/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct gr_poly_struct {
    pub coeffs: gr_ptr,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gr_poly_struct"][::std::mem::size_of::<gr_poly_struct>() - 24usize];
    ["Alignment of gr_poly_struct"][::std::mem::align_of::<gr_poly_struct>() - 8usize];
    ["Offset of field: gr_poly_struct::coeffs"]
        [::std::mem::offset_of!(gr_poly_struct, coeffs) - 0usize];
    ["Offset of field: gr_poly_struct::alloc"]
        [::std::mem::offset_of!(gr_poly_struct, alloc) - 8usize];
    ["Offset of field: gr_poly_struct::length"]
        [::std::mem::offset_of!(gr_poly_struct, length) - 16usize];
};
impl Default for gr_poly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gr_poly_t = [gr_poly_struct; 1usize];
pub type gr_poly_roots_op = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut gr_vec_struct,
        arg2: *mut gr_vec_struct,
        arg3: *const gr_poly_struct,
        arg4: libc::c_int,
        arg5: gr_ctx_ptr,
    ) -> libc::c_int,
>;
pub type gr_poly_roots_op_other = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut gr_vec_struct,
        arg2: *mut gr_vec_struct,
        arg3: *const gr_poly_struct,
        arg4: gr_ctx_ptr,
        arg5: libc::c_int,
        arg6: gr_ctx_ptr,
    ) -> libc::c_int,
>;
extern "C" {
    pub fn gr_poly_init(poly: *mut gr_poly_struct, ctx: *mut gr_ctx_struct);
    pub fn gr_poly_init2(poly: *mut gr_poly_struct, len: mp_limb_signed_t, ctx: *mut gr_ctx_struct);
    pub fn gr_poly_clear(poly: *mut gr_poly_struct, ctx: *mut gr_ctx_struct);
    #[link_name = "gr_poly_entry_ptr__extern"]
    pub fn gr_poly_entry_ptr(
        poly: *mut gr_poly_struct,
        i: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> gr_ptr;
    #[link_name = "gr_poly_entry_srcptr__extern"]
    pub fn gr_poly_entry_srcptr(
        poly: *const gr_poly_struct,
        i: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> gr_srcptr;
    #[link_name = "gr_poly_length__extern"]
    pub fn gr_poly_length(poly: *const gr_poly_struct, ctx: *mut gr_ctx_struct)
        -> mp_limb_signed_t;
    #[link_name = "gr_poly_swap__extern"]
    pub fn gr_poly_swap(
        poly1: *mut gr_poly_struct,
        poly2: *mut gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    );
    pub fn gr_poly_fit_length(
        poly: *mut gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    );
    pub fn _gr_poly_set_length(
        poly: *mut gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    );
    pub fn _gr_poly_normalise(poly: *mut gr_poly_struct, ctx: *mut gr_ctx_struct);
    pub fn gr_poly_set(
        res: *mut gr_poly_struct,
        src: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_reverse(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_reverse(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_truncate(
        poly: *mut gr_poly_struct,
        src: *const gr_poly_struct,
        newlen: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "gr_poly_zero__extern"]
    pub fn gr_poly_zero(poly: *mut gr_poly_struct, ctx: *mut gr_ctx_struct) -> libc::c_int;
    pub fn gr_poly_one(poly: *mut gr_poly_struct, ctx: *mut gr_ctx_struct) -> libc::c_int;
    pub fn gr_poly_neg_one(poly: *mut gr_poly_struct, ctx: *mut gr_ctx_struct) -> libc::c_int;
    pub fn gr_poly_gen(poly: *mut gr_poly_struct, ctx: *mut gr_ctx_struct) -> libc::c_int;
    pub fn gr_poly_write(
        out: *mut gr_stream_struct,
        poly: *const gr_poly_struct,
        x: *const libc::c_char,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_print(poly: *const gr_poly_struct, ctx: *mut gr_ctx_struct) -> libc::c_int;
    pub fn gr_poly_randtest(
        poly: *mut gr_poly_struct,
        state: *mut flint_rand_s,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_equal(
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn gr_poly_equal(
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn gr_poly_is_zero(poly: *const gr_poly_struct, ctx: *mut gr_ctx_struct) -> truth_t;
    pub fn gr_poly_is_one(poly: *const gr_poly_struct, ctx: *mut gr_ctx_struct) -> truth_t;
    pub fn gr_poly_is_gen(poly: *const gr_poly_struct, ctx: *mut gr_ctx_struct) -> truth_t;
    pub fn gr_poly_is_scalar(poly: *const gr_poly_struct, ctx: *mut gr_ctx_struct) -> truth_t;
    pub fn gr_poly_set_scalar(
        poly: *mut gr_poly_struct,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_si(
        poly: *mut gr_poly_struct,
        x: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_ui(
        poly: *mut gr_poly_struct,
        x: mp_limb_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_fmpz(
        poly: *mut gr_poly_struct,
        x: *const fmpz,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_fmpq(
        poly: *mut gr_poly_struct,
        x: *const fmpq,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_fmpz_poly(
        res: *mut gr_poly_struct,
        src: *const fmpz_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_fmpq_poly(
        res: *mut gr_poly_struct,
        src: *const fmpq_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_gr_poly_other(
        res: *mut gr_poly_struct,
        x: *const gr_poly_struct,
        x_ctx: *mut gr_ctx_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_coeff_scalar(
        poly: *mut gr_poly_struct,
        n: mp_limb_signed_t,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_coeff_si(
        poly: *mut gr_poly_struct,
        n: mp_limb_signed_t,
        x: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_coeff_ui(
        poly: *mut gr_poly_struct,
        n: mp_limb_signed_t,
        x: mp_limb_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_coeff_fmpz(
        poly: *mut gr_poly_struct,
        n: mp_limb_signed_t,
        x: *const fmpz,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_set_coeff_fmpq(
        poly: *mut gr_poly_struct,
        n: mp_limb_signed_t,
        x: *const fmpq,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_get_coeff_scalar(
        res: gr_ptr,
        poly: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_neg(
        res: *mut gr_poly_struct,
        src: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_add(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_add(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_sub(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_sub(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_mul(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_mul(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_mullow_generic(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_mullow__extern"]
    pub fn _gr_poly_mullow(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_mullow(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_mul_scalar(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_pow_series_ui_binexp(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        exp: mp_limb_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_pow_series_ui_binexp(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        exp: mp_limb_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_pow_series_ui(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        exp: mp_limb_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_pow_series_ui(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        exp: mp_limb_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_pow_ui_binexp(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        exp: mp_limb_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_pow_ui_binexp(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        exp: mp_limb_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_pow_ui(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        exp: mp_limb_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_pow_ui(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        exp: mp_limb_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_pow_fmpz(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        exp: *const fmpz,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_pow_series_fmpq_recurrence(
        h: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        exp: *const fmpq,
        len: mp_limb_signed_t,
        precomp: libc::c_int,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_pow_series_fmpq_recurrence(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        exp: *const fmpq,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_shift_left(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_shift_left(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_shift_right(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_shift_right(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_scalar(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_inv(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_basecase_preinv1(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        invB: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_basecase_noinv(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_basecase(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divrem_basecase(
        Q: *mut gr_poly_struct,
        R: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_divconquer_preinv1(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        invB: gr_srcptr,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_divconquer_noinv(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_divconquer(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divrem_divconquer(
        Q: *mut gr_poly_struct,
        R: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_newton(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divrem_newton(
        Q: *mut gr_poly_struct,
        R: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_divrem__extern"]
    pub fn _gr_poly_divrem(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divrem_generic(
        Q: gr_ptr,
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divrem(
        Q: *mut gr_poly_struct,
        R: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_divconquer_preinv1(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        invB: gr_srcptr,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_divconquer_noinv(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_divconquer(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_divconquer(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_basecase_preinv1(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        invB: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_basecase_noinv(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_basecase(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_basecase(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_newton(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_newton(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_div__extern"]
    pub fn _gr_poly_div(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_generic(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_rem(
        R: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_rem(
        R: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_inv_series_newton(
        Qinv: gr_ptr,
        Q: gr_srcptr,
        Qlen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_inv_series_newton(
        Qinv: *mut gr_poly_struct,
        Q: *const gr_poly_struct,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_inv_series_basecase_preinv1(
        res: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        Ainv: gr_srcptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_inv_series_basecase_generic(
        Qinv: gr_ptr,
        Q: gr_srcptr,
        Qlen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_inv_series_basecase(
        Qinv: *mut gr_poly_struct,
        Q: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_inv_series_basecase__extern"]
    pub fn _gr_poly_inv_series_basecase(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_inv_series__extern"]
    pub fn _gr_poly_inv_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_inv_series_generic(
        Qinv: gr_ptr,
        Q: gr_srcptr,
        Qlen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_inv_series(
        Qinv: *mut gr_poly_struct,
        Q: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_series_newton(
        res: gr_ptr,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_series_newton(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_series_divconquer(
        res: gr_ptr,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_series_divconquer(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_series_basecase_generic(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_series_basecase(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_series_basecase_preinv1(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        Binv: gr_srcptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_series_basecase_noinv(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_series_invmul(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_series_invmul(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_div_series_basecase__extern"]
    pub fn _gr_poly_div_series_basecase(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        g: gr_srcptr,
        glen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_div_series__extern"]
    pub fn _gr_poly_div_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        g: gr_srcptr,
        glen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_div_series_generic(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_div_series(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divexact_basecase_bidirectional(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divexact_basecase_bidirectional(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divexact_bidirectional(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divexact_bidirectional(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divexact_basecase_noinv(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divexact_basecase(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divexact_basecase(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_divexact__extern"]
    pub fn _gr_poly_divexact(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divexact_generic(
        Q: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divexact(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divexact_series_basecase_noinv(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_divexact_series_basecase(
        Q: gr_ptr,
        A: gr_srcptr,
        Alen: mp_limb_signed_t,
        B: gr_srcptr,
        Blen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_divexact_series_basecase(
        Q: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_sqrt_series_newton(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_sqrt_series_newton(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_sqrt_series_basecase(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_sqrt_series_basecase(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_sqrt_series_miller(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_sqrt_series_miller(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_sqrt_series__extern"]
    pub fn _gr_poly_sqrt_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_sqrt_series_generic(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_sqrt_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_rsqrt_series_newton(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_rsqrt_series_newton(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_rsqrt_series_basecase(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_rsqrt_series_basecase(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_rsqrt_series_miller(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_rsqrt_series_miller(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_rsqrt_series__extern"]
    pub fn _gr_poly_rsqrt_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_rsqrt_series_generic(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_rsqrt_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_rectangular(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_rectangular(
        res: gr_ptr,
        poly: *const gr_poly_struct,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_modular(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_modular(
        res: gr_ptr,
        poly: *const gr_poly_struct,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_horner(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_horner(
        res: gr_ptr,
        poly: *const gr_poly_struct,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate(
        res: gr_ptr,
        poly: *const gr_poly_struct,
        x: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_other_horner(
        res: gr_ptr,
        f: gr_srcptr,
        len: mp_limb_signed_t,
        x: gr_srcptr,
        x_ctx: *mut gr_ctx_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_other_horner(
        res: gr_ptr,
        f: *const gr_poly_struct,
        a: gr_srcptr,
        a_ctx: *mut gr_ctx_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_other_rectangular(
        res: gr_ptr,
        f: gr_srcptr,
        len: mp_limb_signed_t,
        x: gr_srcptr,
        x_ctx: *mut gr_ctx_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_other_rectangular(
        res: gr_ptr,
        f: *const gr_poly_struct,
        a: gr_srcptr,
        a_ctx: *mut gr_ctx_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_other(
        res: gr_ptr,
        f: gr_srcptr,
        len: mp_limb_signed_t,
        x: gr_srcptr,
        x_ctx: *mut gr_ctx_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_other(
        res: gr_ptr,
        f: *const gr_poly_struct,
        a: gr_srcptr,
        a_ctx: *mut gr_ctx_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_taylor_shift_horner(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_taylor_shift_horner(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_taylor_shift_divconquer(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_taylor_shift_divconquer(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_taylor_shift_convolution(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_taylor_shift_convolution(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_taylor_shift_generic(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_taylor_shift__extern"]
    pub fn _gr_poly_taylor_shift(
        res: gr_ptr,
        f: gr_srcptr,
        len: mp_limb_signed_t,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_taylor_shift(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        c: gr_srcptr,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_compose_horner(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_compose_horner(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_compose_divconquer(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_compose_divconquer(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_compose(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_compose(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_compose_series_horner(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_compose_series_horner(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_compose_series_brent_kung(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_compose_series_brent_kung(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_compose_series_divconquer(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_compose_series_divconquer(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_compose_series(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_compose_series(
        res: *mut gr_poly_struct,
        poly1: *const gr_poly_struct,
        poly2: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_revert_series_lagrange(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_revert_series_lagrange(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_revert_series_lagrange_fast(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_revert_series_lagrange_fast(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_revert_series_newton(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_revert_series_newton(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_revert_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_revert_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_derivative(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_derivative(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_nth_derivative(
        res: gr_ptr,
        poly: gr_srcptr,
        n: mp_limb_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_nth_derivative(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        n: mp_limb_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_integral(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_integral(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_make_monic(
        res: gr_ptr,
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_make_monic(
        res: *mut gr_poly_struct,
        src: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_is_monic(
        poly: gr_srcptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn gr_poly_is_monic(res: *const gr_poly_struct, ctx: *mut gr_ctx_struct) -> truth_t;
    pub fn _gr_poly_hgcd(
        r: gr_ptr,
        sgn: *mut mp_limb_signed_t,
        M: *mut gr_ptr,
        lenM: *mut mp_limb_signed_t,
        A: gr_ptr,
        lenA: *mut mp_limb_signed_t,
        B: gr_ptr,
        lenB: *mut mp_limb_signed_t,
        a: gr_srcptr,
        lena: mp_limb_signed_t,
        b: gr_srcptr,
        lenb: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_gcd_hgcd(
        G: gr_ptr,
        _lenG: *mut mp_limb_signed_t,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        inner_cutoff: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_gcd_hgcd(
        G: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        inner_cutoff: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_gcd_euclidean(
        G: gr_ptr,
        lenG: *mut mp_limb_signed_t,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_gcd_euclidean(
        G: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_gcd(
        G: gr_ptr,
        lenG: *mut mp_limb_signed_t,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_gcd(
        G: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_xgcd_euclidean(
        lenG: *mut mp_limb_signed_t,
        G: gr_ptr,
        S: gr_ptr,
        T: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_xgcd_euclidean(
        G: *mut gr_poly_struct,
        S: *mut gr_poly_struct,
        T: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_xgcd_hgcd(
        Glen: *mut mp_limb_signed_t,
        G: gr_ptr,
        S: gr_ptr,
        T: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        hgcd_cutoff: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_xgcd_hgcd(
        G: *mut gr_poly_struct,
        S: *mut gr_poly_struct,
        T: *mut gr_poly_struct,
        A: *const gr_poly_struct,
        B: *const gr_poly_struct,
        hgcd_cutoff: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_resultant_euclidean(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_resultant_euclidean(
        r: gr_ptr,
        f: *const gr_poly_struct,
        g: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_resultant_hgcd(
        res: gr_ptr,
        A: gr_srcptr,
        lenA: mp_limb_signed_t,
        B: gr_srcptr,
        lenB: mp_limb_signed_t,
        inner_cutoff: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_resultant_hgcd(
        r: gr_ptr,
        f: *const gr_poly_struct,
        g: *const gr_poly_struct,
        inner_cutoff: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_resultant_sylvester(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_resultant_sylvester(
        r: gr_ptr,
        f: *const gr_poly_struct,
        g: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_resultant_small(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_resultant_small(
        r: gr_ptr,
        f: *const gr_poly_struct,
        g: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_resultant(
        res: gr_ptr,
        poly1: gr_srcptr,
        len1: mp_limb_signed_t,
        poly2: gr_srcptr,
        len2: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_resultant(
        r: gr_ptr,
        f: *const gr_poly_struct,
        g: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_tree_alloc(len: mp_limb_signed_t, ctx: *mut gr_ctx_struct) -> *mut gr_ptr;
    pub fn _gr_poly_tree_free(tree: *mut gr_ptr, len: mp_limb_signed_t, ctx: *mut gr_ctx_struct);
    pub fn _gr_poly_tree_build(
        tree: *mut gr_ptr,
        roots: gr_srcptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_vec_fast_precomp(
        vs: gr_ptr,
        poly: gr_srcptr,
        plen: mp_limb_signed_t,
        tree: *mut gr_ptr,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_vec_fast(
        ys: gr_ptr,
        poly: gr_srcptr,
        plen: mp_limb_signed_t,
        xs: gr_srcptr,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_vec_fast(
        ys: *mut gr_vec_struct,
        poly: *const gr_poly_struct,
        xs: *const gr_vec_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_evaluate_vec_iter(
        ys: gr_ptr,
        poly: gr_srcptr,
        plen: mp_limb_signed_t,
        xs: gr_srcptr,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_evaluate_vec_iter(
        ys: *mut gr_vec_struct,
        poly: *const gr_poly_struct,
        xs: *const gr_vec_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_factor_squarefree(
        c: gr_ptr,
        fac: *mut gr_vec_struct,
        exp: *mut gr_vec_struct,
        F: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_squarefree_part(
        res: *mut gr_poly_struct,
        poly: *const gr_poly_struct,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "gr_poly_roots__extern"]
    pub fn gr_poly_roots(
        roots: *mut gr_vec_struct,
        mult: *mut gr_vec_struct,
        poly: *const gr_poly_struct,
        flags: libc::c_int,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "gr_poly_roots_other__extern"]
    pub fn gr_poly_roots_other(
        roots: *mut gr_vec_struct,
        mult: *mut gr_vec_struct,
        poly: *const gr_poly_struct,
        poly_ctx: *mut gr_ctx_struct,
        flags: libc::c_int,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_asin_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_asin_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_asinh_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_asinh_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_acos_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_acos_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_acosh_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_acosh_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_atan_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_atan_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_atanh_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_atanh_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_log_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_log_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_log1p_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_log1p_series(
        res: *mut gr_poly_struct,
        f: *const gr_poly_struct,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_exp_series_basecase(
        f: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_exp_series_basecase(
        f: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_exp_series_basecase_mul(
        f: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_exp_series_basecase_mul(
        f: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_exp_series_newton(
        f: gr_ptr,
        g: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_exp_series_newton(
        f: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "_gr_poly_exp_series__extern"]
    pub fn _gr_poly_exp_series(
        res: gr_ptr,
        f: gr_srcptr,
        flen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_exp_series_generic(
        f: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_exp_series(
        f: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_sin_cos_series_basecase(
        s: gr_ptr,
        c: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        times_pi: libc::c_int,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_sin_cos_series_basecase(
        s: *mut gr_poly_struct,
        c: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        times_pi: libc::c_int,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_sin_cos_series_tangent(
        s: gr_ptr,
        c: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        times_pi: libc::c_int,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_sin_cos_series_tangent(
        s: *mut gr_poly_struct,
        c: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        times_pi: libc::c_int,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_tan_series_basecase(
        f: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_tan_series_basecase(
        f: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_tan_series_newton(
        f: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_tan_series_newton(
        f: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        cutoff: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_poly_tan_series(
        f: gr_ptr,
        h: gr_srcptr,
        hlen: mp_limb_signed_t,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_poly_tan_series(
        f: *mut gr_poly_struct,
        h: *const gr_poly_struct,
        n: mp_limb_signed_t,
        ctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
}
