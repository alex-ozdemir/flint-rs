/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_camel_case_types)]
use crate::deps::*;
use crate::flint::*;
use libc::{c_char, c_int, c_uint, c_void, size_t, FILE};


#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nmod_mat_struct {
    pub entries: *mut mp_limb_t,
    pub r: mp_limb_signed_t,
    pub c: mp_limb_signed_t,
    pub rows: *mut *mut mp_limb_t,
    pub mod_: nmod_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nmod_mat_struct"][::std::mem::size_of::<nmod_mat_struct>() - 56usize];
    ["Alignment of nmod_mat_struct"][::std::mem::align_of::<nmod_mat_struct>() - 8usize];
    ["Offset of field: nmod_mat_struct::entries"]
        [::std::mem::offset_of!(nmod_mat_struct, entries) - 0usize];
    ["Offset of field: nmod_mat_struct::r"][::std::mem::offset_of!(nmod_mat_struct, r) - 8usize];
    ["Offset of field: nmod_mat_struct::c"][::std::mem::offset_of!(nmod_mat_struct, c) - 16usize];
    ["Offset of field: nmod_mat_struct::rows"]
        [::std::mem::offset_of!(nmod_mat_struct, rows) - 24usize];
    ["Offset of field: nmod_mat_struct::mod_"]
        [::std::mem::offset_of!(nmod_mat_struct, mod_) - 32usize];
};
impl Default for nmod_mat_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nmod_mat_t = [nmod_mat_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nmod_poly_struct {
    pub coeffs: mp_ptr,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub mod_: nmod_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nmod_poly_struct"][::std::mem::size_of::<nmod_poly_struct>() - 48usize];
    ["Alignment of nmod_poly_struct"][::std::mem::align_of::<nmod_poly_struct>() - 8usize];
    ["Offset of field: nmod_poly_struct::coeffs"]
        [::std::mem::offset_of!(nmod_poly_struct, coeffs) - 0usize];
    ["Offset of field: nmod_poly_struct::alloc"]
        [::std::mem::offset_of!(nmod_poly_struct, alloc) - 8usize];
    ["Offset of field: nmod_poly_struct::length"]
        [::std::mem::offset_of!(nmod_poly_struct, length) - 16usize];
    ["Offset of field: nmod_poly_struct::mod_"]
        [::std::mem::offset_of!(nmod_poly_struct, mod_) - 24usize];
};
impl Default for nmod_poly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nmod_poly_t = [nmod_poly_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nmod_poly_factor_struct {
    pub p: *mut nmod_poly_struct,
    pub exp: *mut mp_limb_signed_t,
    pub num: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nmod_poly_factor_struct"][::std::mem::size_of::<nmod_poly_factor_struct>() - 32usize];
    ["Alignment of nmod_poly_factor_struct"]
        [::std::mem::align_of::<nmod_poly_factor_struct>() - 8usize];
    ["Offset of field: nmod_poly_factor_struct::p"]
        [::std::mem::offset_of!(nmod_poly_factor_struct, p) - 0usize];
    ["Offset of field: nmod_poly_factor_struct::exp"]
        [::std::mem::offset_of!(nmod_poly_factor_struct, exp) - 8usize];
    ["Offset of field: nmod_poly_factor_struct::num"]
        [::std::mem::offset_of!(nmod_poly_factor_struct, num) - 16usize];
    ["Offset of field: nmod_poly_factor_struct::alloc"]
        [::std::mem::offset_of!(nmod_poly_factor_struct, alloc) - 24usize];
};
impl Default for nmod_poly_factor_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nmod_poly_factor_t = [nmod_poly_factor_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nmod_poly_mat_struct {
    pub entries: *mut nmod_poly_struct,
    pub r: mp_limb_signed_t,
    pub c: mp_limb_signed_t,
    pub rows: *mut *mut nmod_poly_struct,
    pub modulus: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nmod_poly_mat_struct"][::std::mem::size_of::<nmod_poly_mat_struct>() - 40usize];
    ["Alignment of nmod_poly_mat_struct"][::std::mem::align_of::<nmod_poly_mat_struct>() - 8usize];
    ["Offset of field: nmod_poly_mat_struct::entries"]
        [::std::mem::offset_of!(nmod_poly_mat_struct, entries) - 0usize];
    ["Offset of field: nmod_poly_mat_struct::r"]
        [::std::mem::offset_of!(nmod_poly_mat_struct, r) - 8usize];
    ["Offset of field: nmod_poly_mat_struct::c"]
        [::std::mem::offset_of!(nmod_poly_mat_struct, c) - 16usize];
    ["Offset of field: nmod_poly_mat_struct::rows"]
        [::std::mem::offset_of!(nmod_poly_mat_struct, rows) - 24usize];
    ["Offset of field: nmod_poly_mat_struct::modulus"]
        [::std::mem::offset_of!(nmod_poly_mat_struct, modulus) - 32usize];
};
impl Default for nmod_poly_mat_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nmod_poly_mat_t = [nmod_poly_mat_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nmod_mpoly_struct {
    pub coeffs: *mut mp_limb_t,
    pub exps: *mut mp_limb_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_t,
    pub coeffs_alloc: mp_limb_signed_t,
    pub exps_alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nmod_mpoly_struct"][::std::mem::size_of::<nmod_mpoly_struct>() - 48usize];
    ["Alignment of nmod_mpoly_struct"][::std::mem::align_of::<nmod_mpoly_struct>() - 8usize];
    ["Offset of field: nmod_mpoly_struct::coeffs"]
        [::std::mem::offset_of!(nmod_mpoly_struct, coeffs) - 0usize];
    ["Offset of field: nmod_mpoly_struct::exps"]
        [::std::mem::offset_of!(nmod_mpoly_struct, exps) - 8usize];
    ["Offset of field: nmod_mpoly_struct::length"]
        [::std::mem::offset_of!(nmod_mpoly_struct, length) - 16usize];
    ["Offset of field: nmod_mpoly_struct::bits"]
        [::std::mem::offset_of!(nmod_mpoly_struct, bits) - 24usize];
    ["Offset of field: nmod_mpoly_struct::coeffs_alloc"]
        [::std::mem::offset_of!(nmod_mpoly_struct, coeffs_alloc) - 32usize];
    ["Offset of field: nmod_mpoly_struct::exps_alloc"]
        [::std::mem::offset_of!(nmod_mpoly_struct, exps_alloc) - 40usize];
};
impl Default for nmod_mpoly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nmod_mpoly_t = [nmod_mpoly_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nmod_mpoly_factor_struct {
    pub constant: mp_limb_t,
    pub poly: *mut nmod_mpoly_struct,
    pub exp: *mut fmpz,
    pub num: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nmod_mpoly_factor_struct"]
        [::std::mem::size_of::<nmod_mpoly_factor_struct>() - 40usize];
    ["Alignment of nmod_mpoly_factor_struct"]
        [::std::mem::align_of::<nmod_mpoly_factor_struct>() - 8usize];
    ["Offset of field: nmod_mpoly_factor_struct::constant"]
        [::std::mem::offset_of!(nmod_mpoly_factor_struct, constant) - 0usize];
    ["Offset of field: nmod_mpoly_factor_struct::poly"]
        [::std::mem::offset_of!(nmod_mpoly_factor_struct, poly) - 8usize];
    ["Offset of field: nmod_mpoly_factor_struct::exp"]
        [::std::mem::offset_of!(nmod_mpoly_factor_struct, exp) - 16usize];
    ["Offset of field: nmod_mpoly_factor_struct::num"]
        [::std::mem::offset_of!(nmod_mpoly_factor_struct, num) - 24usize];
    ["Offset of field: nmod_mpoly_factor_struct::alloc"]
        [::std::mem::offset_of!(nmod_mpoly_factor_struct, alloc) - 32usize];
};
impl Default for nmod_mpoly_factor_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nmod_mpoly_factor_t = [nmod_mpoly_factor_struct; 1usize];
