/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


pub const CA_TRIG_DIRECT: u32 = 0;
pub const CA_TRIG_EXPONENTIAL: u32 = 1;
pub const CA_TRIG_SINE_COSINE: u32 = 2;
pub const CA_TRIG_TANGENT: u32 = 3;
pub const CA_FEXPR_SERIALIZATION: u32 = 1;
pub const CA_FACTOR_ZZ_NONE: u32 = 0;
pub const CA_FACTOR_ZZ_SMOOTH: u32 = 2;
pub const CA_FACTOR_ZZ_FULL: u32 = 4;
pub const CA_FACTOR_POLY_NONE: u32 = 0;
pub const CA_FACTOR_POLY_CONTENT: u32 = 64;
pub const CA_FACTOR_POLY_SQF: u32 = 128;
pub const CA_FACTOR_POLY_FULL: u32 = 256;
#[repr(C)]
pub struct ca_elem_struct {
    pub q: __BindgenUnionField<fmpq>,
    pub nf: __BindgenUnionField<nf_elem_struct>,
    pub mpoly_q: __BindgenUnionField<*mut fmpz_mpoly_q_struct>,
    pub bindgen_union_field: [u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_elem_struct"][::std::mem::size_of::<ca_elem_struct>() - 32usize];
    ["Alignment of ca_elem_struct"][::std::mem::align_of::<ca_elem_struct>() - 8usize];
    ["Offset of field: ca_elem_struct::q"][::std::mem::offset_of!(ca_elem_struct, q) - 0usize];
    ["Offset of field: ca_elem_struct::nf"][::std::mem::offset_of!(ca_elem_struct, nf) - 0usize];
    ["Offset of field: ca_elem_struct::mpoly_q"]
        [::std::mem::offset_of!(ca_elem_struct, mpoly_q) - 0usize];
};
impl Default for ca_elem_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ca_struct {
    pub field: mp_limb_t,
    pub elem: ca_elem_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_struct"][::std::mem::size_of::<ca_struct>() - 40usize];
    ["Alignment of ca_struct"][::std::mem::align_of::<ca_struct>() - 8usize];
    ["Offset of field: ca_struct::field"][::std::mem::offset_of!(ca_struct, field) - 0usize];
    ["Offset of field: ca_struct::elem"][::std::mem::offset_of!(ca_struct, elem) - 8usize];
};
impl Default for ca_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ca_t = [ca_struct; 1usize];
pub type ca_ptr = *mut ca_struct;
pub type ca_srcptr = *const ca_struct;
#[repr(C)]
pub struct ca_ext_qqbar {
    pub x: qqbar_struct,
    pub nf: *mut nf_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_ext_qqbar"][::std::mem::size_of::<ca_ext_qqbar>() - 128usize];
    ["Alignment of ca_ext_qqbar"][::std::mem::align_of::<ca_ext_qqbar>() - 8usize];
    ["Offset of field: ca_ext_qqbar::x"][::std::mem::offset_of!(ca_ext_qqbar, x) - 0usize];
    ["Offset of field: ca_ext_qqbar::nf"][::std::mem::offset_of!(ca_ext_qqbar, nf) - 120usize];
};
impl Default for ca_ext_qqbar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ca_ext_func_data {
    pub args: *mut ca_struct,
    pub nargs: mp_limb_signed_t,
    pub enclosure: acb_struct,
    pub prec: mp_limb_signed_t,
    pub qqbar: *mut qqbar_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_ext_func_data"][::std::mem::size_of::<ca_ext_func_data>() - 128usize];
    ["Alignment of ca_ext_func_data"][::std::mem::align_of::<ca_ext_func_data>() - 8usize];
    ["Offset of field: ca_ext_func_data::args"]
        [::std::mem::offset_of!(ca_ext_func_data, args) - 0usize];
    ["Offset of field: ca_ext_func_data::nargs"]
        [::std::mem::offset_of!(ca_ext_func_data, nargs) - 8usize];
    ["Offset of field: ca_ext_func_data::enclosure"]
        [::std::mem::offset_of!(ca_ext_func_data, enclosure) - 16usize];
    ["Offset of field: ca_ext_func_data::prec"]
        [::std::mem::offset_of!(ca_ext_func_data, prec) - 112usize];
    ["Offset of field: ca_ext_func_data::qqbar"]
        [::std::mem::offset_of!(ca_ext_func_data, qqbar) - 120usize];
};
impl Default for ca_ext_func_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ca_ext_struct {
    pub head: calcium_func_code,
    pub hash: mp_limb_t,
    pub depth: mp_limb_signed_t,
    pub data: ca_ext_struct__bindgen_ty_1,
}
#[repr(C)]
pub struct ca_ext_struct__bindgen_ty_1 {
    pub qqbar: __BindgenUnionField<ca_ext_qqbar>,
    pub func_data: __BindgenUnionField<ca_ext_func_data>,
    pub bindgen_union_field: [u64; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_ext_struct__bindgen_ty_1"]
        [::std::mem::size_of::<ca_ext_struct__bindgen_ty_1>() - 128usize];
    ["Alignment of ca_ext_struct__bindgen_ty_1"]
        [::std::mem::align_of::<ca_ext_struct__bindgen_ty_1>() - 8usize];
    ["Offset of field: ca_ext_struct__bindgen_ty_1::qqbar"]
        [::std::mem::offset_of!(ca_ext_struct__bindgen_ty_1, qqbar) - 0usize];
    ["Offset of field: ca_ext_struct__bindgen_ty_1::func_data"]
        [::std::mem::offset_of!(ca_ext_struct__bindgen_ty_1, func_data) - 0usize];
};
impl Default for ca_ext_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_ext_struct"][::std::mem::size_of::<ca_ext_struct>() - 152usize];
    ["Alignment of ca_ext_struct"][::std::mem::align_of::<ca_ext_struct>() - 8usize];
    ["Offset of field: ca_ext_struct::head"][::std::mem::offset_of!(ca_ext_struct, head) - 0usize];
    ["Offset of field: ca_ext_struct::hash"][::std::mem::offset_of!(ca_ext_struct, hash) - 8usize];
    ["Offset of field: ca_ext_struct::depth"]
        [::std::mem::offset_of!(ca_ext_struct, depth) - 16usize];
    ["Offset of field: ca_ext_struct::data"][::std::mem::offset_of!(ca_ext_struct, data) - 24usize];
};
impl Default for ca_ext_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ca_ext_t = [ca_ext_struct; 1usize];
pub type ca_ext_ptr = *mut ca_ext_struct;
pub type ca_ext_srcptr = *const ca_ext_struct;
#[repr(C)]
pub struct ca_ext_cache_struct {
    pub items: *mut *mut ca_ext_struct,
    pub length: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
    pub hash_size: mp_limb_signed_t,
    pub hash_table: *mut mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_ext_cache_struct"][::std::mem::size_of::<ca_ext_cache_struct>() - 40usize];
    ["Alignment of ca_ext_cache_struct"][::std::mem::align_of::<ca_ext_cache_struct>() - 8usize];
    ["Offset of field: ca_ext_cache_struct::items"]
        [::std::mem::offset_of!(ca_ext_cache_struct, items) - 0usize];
    ["Offset of field: ca_ext_cache_struct::length"]
        [::std::mem::offset_of!(ca_ext_cache_struct, length) - 8usize];
    ["Offset of field: ca_ext_cache_struct::alloc"]
        [::std::mem::offset_of!(ca_ext_cache_struct, alloc) - 16usize];
    ["Offset of field: ca_ext_cache_struct::hash_size"]
        [::std::mem::offset_of!(ca_ext_cache_struct, hash_size) - 24usize];
    ["Offset of field: ca_ext_cache_struct::hash_table"]
        [::std::mem::offset_of!(ca_ext_cache_struct, hash_table) - 32usize];
};
impl Default for ca_ext_cache_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ca_ext_cache_t = [ca_ext_cache_struct; 1usize];
#[repr(C)]
pub struct ca_field_struct {
    pub length: mp_limb_signed_t,
    pub ext: *mut *mut ca_ext_struct,
    pub ideal: fmpz_mpoly_vec_struct,
    pub hash: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_field_struct"][::std::mem::size_of::<ca_field_struct>() - 48usize];
    ["Alignment of ca_field_struct"][::std::mem::align_of::<ca_field_struct>() - 8usize];
    ["Offset of field: ca_field_struct::length"]
        [::std::mem::offset_of!(ca_field_struct, length) - 0usize];
    ["Offset of field: ca_field_struct::ext"]
        [::std::mem::offset_of!(ca_field_struct, ext) - 8usize];
    ["Offset of field: ca_field_struct::ideal"]
        [::std::mem::offset_of!(ca_field_struct, ideal) - 16usize];
    ["Offset of field: ca_field_struct::hash"]
        [::std::mem::offset_of!(ca_field_struct, hash) - 40usize];
};
impl Default for ca_field_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ca_field_t = [ca_field_struct; 1usize];
pub type ca_field_ptr = *mut ca_field_struct;
pub type ca_field_srcptr = *const ca_field_struct;
#[repr(C)]
pub struct ca_field_cache_struct {
    pub items: *mut *mut ca_field_struct,
    pub length: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
    pub hash_size: mp_limb_signed_t,
    pub hash_table: *mut mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_field_cache_struct"][::std::mem::size_of::<ca_field_cache_struct>() - 40usize];
    ["Alignment of ca_field_cache_struct"]
        [::std::mem::align_of::<ca_field_cache_struct>() - 8usize];
    ["Offset of field: ca_field_cache_struct::items"]
        [::std::mem::offset_of!(ca_field_cache_struct, items) - 0usize];
    ["Offset of field: ca_field_cache_struct::length"]
        [::std::mem::offset_of!(ca_field_cache_struct, length) - 8usize];
    ["Offset of field: ca_field_cache_struct::alloc"]
        [::std::mem::offset_of!(ca_field_cache_struct, alloc) - 16usize];
    ["Offset of field: ca_field_cache_struct::hash_size"]
        [::std::mem::offset_of!(ca_field_cache_struct, hash_size) - 24usize];
    ["Offset of field: ca_field_cache_struct::hash_table"]
        [::std::mem::offset_of!(ca_field_cache_struct, hash_table) - 32usize];
};
impl Default for ca_field_cache_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ca_field_cache_t = [ca_field_cache_struct; 1usize];
pub const CA_OPT_VERBOSE: _bindgen_ty_4 = 0;
pub const CA_OPT_PRINT_FLAGS: _bindgen_ty_4 = 1;
pub const CA_OPT_MPOLY_ORD: _bindgen_ty_4 = 2;
pub const CA_OPT_PREC_LIMIT: _bindgen_ty_4 = 3;
pub const CA_OPT_QQBAR_DEG_LIMIT: _bindgen_ty_4 = 4;
pub const CA_OPT_LOW_PREC: _bindgen_ty_4 = 5;
pub const CA_OPT_SMOOTH_LIMIT: _bindgen_ty_4 = 6;
pub const CA_OPT_LLL_PREC: _bindgen_ty_4 = 7;
pub const CA_OPT_POW_LIMIT: _bindgen_ty_4 = 8;
pub const CA_OPT_USE_GROEBNER: _bindgen_ty_4 = 9;
pub const CA_OPT_GROEBNER_LENGTH_LIMIT: _bindgen_ty_4 = 10;
pub const CA_OPT_GROEBNER_POLY_LENGTH_LIMIT: _bindgen_ty_4 = 11;
pub const CA_OPT_GROEBNER_POLY_BITS_LIMIT: _bindgen_ty_4 = 12;
pub const CA_OPT_VIETA_LIMIT: _bindgen_ty_4 = 13;
pub const CA_OPT_TRIG_FORM: _bindgen_ty_4 = 14;
pub const CA_OPT_NUM_OPTIONS: _bindgen_ty_4 = 15;
pub type _bindgen_ty_4 = libc::c_uint;
#[repr(C)]
pub struct ca_ctx_struct {
    pub ext_cache: ca_ext_cache_struct,
    pub field_cache: ca_field_cache_struct,
    pub field_qq: *mut ca_field_struct,
    pub field_qq_i: *mut ca_field_struct,
    pub mctx: *mut *mut fmpz_mpoly_ctx_struct,
    pub mctx_len: mp_limb_signed_t,
    pub options: *mut mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_ctx_struct"][::std::mem::size_of::<ca_ctx_struct>() - 120usize];
    ["Alignment of ca_ctx_struct"][::std::mem::align_of::<ca_ctx_struct>() - 8usize];
    ["Offset of field: ca_ctx_struct::ext_cache"]
        [::std::mem::offset_of!(ca_ctx_struct, ext_cache) - 0usize];
    ["Offset of field: ca_ctx_struct::field_cache"]
        [::std::mem::offset_of!(ca_ctx_struct, field_cache) - 40usize];
    ["Offset of field: ca_ctx_struct::field_qq"]
        [::std::mem::offset_of!(ca_ctx_struct, field_qq) - 80usize];
    ["Offset of field: ca_ctx_struct::field_qq_i"]
        [::std::mem::offset_of!(ca_ctx_struct, field_qq_i) - 88usize];
    ["Offset of field: ca_ctx_struct::mctx"][::std::mem::offset_of!(ca_ctx_struct, mctx) - 96usize];
    ["Offset of field: ca_ctx_struct::mctx_len"]
        [::std::mem::offset_of!(ca_ctx_struct, mctx_len) - 104usize];
    ["Offset of field: ca_ctx_struct::options"]
        [::std::mem::offset_of!(ca_ctx_struct, options) - 112usize];
};
impl Default for ca_ctx_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ca_ctx_t = [ca_ctx_struct; 1usize];
#[repr(C)]
pub struct ca_factor_struct {
    pub base: ca_ptr,
    pub exp: ca_ptr,
    pub length: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ca_factor_struct"][::std::mem::size_of::<ca_factor_struct>() - 32usize];
    ["Alignment of ca_factor_struct"][::std::mem::align_of::<ca_factor_struct>() - 8usize];
    ["Offset of field: ca_factor_struct::base"]
        [::std::mem::offset_of!(ca_factor_struct, base) - 0usize];
    ["Offset of field: ca_factor_struct::exp"]
        [::std::mem::offset_of!(ca_factor_struct, exp) - 8usize];
    ["Offset of field: ca_factor_struct::length"]
        [::std::mem::offset_of!(ca_factor_struct, length) - 16usize];
    ["Offset of field: ca_factor_struct::alloc"]
        [::std::mem::offset_of!(ca_factor_struct, alloc) - 24usize];
};
impl Default for ca_factor_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ca_factor_t = [ca_factor_struct; 1usize];
extern "C" {
    pub fn ca_ctx_init(ctx: *mut ca_ctx_struct);
    pub fn ca_ctx_clear(ctx: *mut ca_ctx_struct);
    pub fn ca_ctx_print(ctx: *mut ca_ctx_struct);
    #[link_name = "ca_ctx_get_option__extern"]
    pub fn ca_ctx_get_option(ctx: *mut ca_ctx_struct, i: mp_limb_signed_t) -> mp_limb_signed_t;
    #[link_name = "ca_ctx_set_option__extern"]
    pub fn ca_ctx_set_option(ctx: *mut ca_ctx_struct, i: mp_limb_signed_t, value: mp_limb_signed_t);
    pub fn _ca_ctx_get_field_const(
        ctx: *mut ca_ctx_struct,
        func: calcium_func_code,
    ) -> ca_field_ptr;
    pub fn _ca_ctx_get_field_fx(
        ctx: *mut ca_ctx_struct,
        func: calcium_func_code,
        x: *const ca_struct,
    ) -> ca_field_ptr;
    pub fn _ca_ctx_get_field_fxy(
        ctx: *mut ca_ctx_struct,
        func: calcium_func_code,
        x: *const ca_struct,
        y: *const ca_struct,
    ) -> ca_field_ptr;
    pub fn ca_init(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_clear(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_swap(x: *mut ca_struct, y: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn _ca_make_field_element(
        x: *mut ca_struct,
        field: ca_field_srcptr,
        ctx: *mut ca_ctx_struct,
    );
    #[link_name = "_ca_make_fmpq__extern"]
    pub fn _ca_make_fmpq(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    #[link_name = "_ca_function_fx__extern"]
    pub fn _ca_function_fx(
        res: *mut ca_struct,
        func: calcium_func_code,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    #[link_name = "_ca_function_fxy__extern"]
    pub fn _ca_function_fxy(
        res: *mut ca_struct,
        func: calcium_func_code,
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_set(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_transfer(
        res: *mut ca_struct,
        res_ctx: *mut ca_ctx_struct,
        src: *const ca_struct,
        src_ctx: *mut ca_ctx_struct,
    );
    pub fn ca_zero(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_one(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_neg_one(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_set_si(x: *mut ca_struct, v: mp_limb_signed_t, ctx: *mut ca_ctx_struct);
    pub fn ca_set_ui(x: *mut ca_struct, v: mp_limb_t, ctx: *mut ca_ctx_struct);
    pub fn ca_set_fmpz(x: *mut ca_struct, v: *const fmpz, ctx: *mut ca_ctx_struct);
    pub fn ca_set_fmpq(x: *mut ca_struct, v: *const fmpq, ctx: *mut ca_ctx_struct);
    pub fn ca_set_d(res: *mut ca_struct, x: f64, ctx: *mut ca_ctx_struct);
    pub fn ca_set_d_d(res: *mut ca_struct, x: f64, y: f64, ctx: *mut ca_ctx_struct);
    pub fn ca_i(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_neg_i(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_pi(res: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_pi_i(res: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_euler(res: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_unknown(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_undefined(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_uinf(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_pos_inf(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_neg_inf(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_pos_i_inf(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_neg_i_inf(x: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_set_qqbar(res: *mut ca_struct, x: *const qqbar_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_can_evaluate_qqbar(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    pub fn ca_get_qqbar(
        res: *mut qqbar_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> libc::c_int;
    pub fn ca_get_fmpq(res: *mut fmpq, x: *const ca_struct, ctx: *mut ca_ctx_struct)
        -> libc::c_int;
    pub fn ca_get_fmpz(res: *mut fmpz, x: *const ca_struct, ctx: *mut ca_ctx_struct)
        -> libc::c_int;
    pub fn ca_get_fexpr(
        res: *mut fexpr_struct,
        x: *const ca_struct,
        flags: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_set_fexpr(
        res: *mut ca_struct,
        expr: *const fexpr_struct,
        ctx: *mut ca_ctx_struct,
    ) -> libc::c_int;
    pub fn ca_fprint(fp: *mut FILE, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_print(x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_printn(x: *const ca_struct, n: mp_limb_signed_t, ctx: *mut ca_ctx_struct);
    pub fn ca_get_str(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> *mut libc::c_char;
    pub fn ca_randtest_same_nf(
        res: *mut ca_struct,
        state: *mut flint_rand_s,
        x: *const ca_struct,
        bits: mp_limb_signed_t,
        den_bits: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_randtest_rational(
        res: *mut ca_struct,
        state: *mut flint_rand_s,
        bits: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_randtest(
        res: *mut ca_struct,
        state: *mut flint_rand_s,
        depth: mp_limb_signed_t,
        bits: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_randtest_special(
        res: *mut ca_struct,
        state: *mut flint_rand_s,
        depth: mp_limb_signed_t,
        bits: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    #[link_name = "ca_is_special__extern"]
    pub fn ca_is_special(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    #[link_name = "ca_is_unknown__extern"]
    pub fn ca_is_unknown(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    #[link_name = "ca_is_qq_elem__extern"]
    pub fn ca_is_qq_elem(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    #[link_name = "ca_is_qq_elem_zero__extern"]
    pub fn ca_is_qq_elem_zero(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    #[link_name = "ca_is_qq_elem_one__extern"]
    pub fn ca_is_qq_elem_one(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    #[link_name = "ca_is_qq_elem_integer__extern"]
    pub fn ca_is_qq_elem_integer(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    #[link_name = "ca_is_nf_elem__extern"]
    pub fn ca_is_nf_elem(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    #[link_name = "ca_is_generic_elem__extern"]
    pub fn ca_is_generic_elem(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> libc::c_int;
    pub fn ca_is_cyclotomic_nf_elem(
        p: *mut mp_limb_signed_t,
        q: *mut mp_limb_t,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> libc::c_int;
    pub fn ca_is_zero_check_fast(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_number(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_zero(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_one(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_neg_one(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_i(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_neg_i(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_algebraic(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_rational(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_integer(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_real(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_negative_real(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_imaginary(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_undefined(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_infinity(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_uinf(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_signed_inf(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_pos_inf(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_neg_inf(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_pos_i_inf(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_is_neg_i_inf(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> truth_t;
    pub fn ca_check_equal(
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> truth_t;
    pub fn ca_check_lt(
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> truth_t;
    pub fn ca_check_le(
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> truth_t;
    pub fn ca_check_gt(
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> truth_t;
    pub fn ca_check_ge(
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> truth_t;
    pub fn ca_equal_repr(
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> libc::c_int;
    pub fn ca_cmp_repr(
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    ) -> libc::c_int;
    pub fn ca_hash_repr(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> mp_limb_t;
    pub fn ca_merge_fields(
        resx: *mut ca_struct,
        resy: *mut ca_struct,
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_condense_field(res: *mut ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_is_gen_as_ext(x: *const ca_struct, ctx: *mut ca_ctx_struct) -> ca_ext_ptr;
    pub fn _ca_mpoly_q_reduce_ideal(
        res: *mut fmpz_mpoly_q_struct,
        field: ca_field_srcptr,
        ctx: *mut ca_ctx_struct,
    );
    pub fn _ca_mpoly_q_simplify_fraction_ideal(
        res: *mut fmpz_mpoly_q_struct,
        field: ca_field_srcptr,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_neg(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_add_fmpq(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpq,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_add_fmpz(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpz,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_add_ui(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_add_si(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_add(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sub_fmpq(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpq,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sub_fmpz(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpz,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sub_ui(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sub_si(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpq_sub(
        res: *mut ca_struct,
        x: *const fmpq,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_sub(
        res: *mut ca_struct,
        x: *const fmpz,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_ui_sub(
        res: *mut ca_struct,
        x: mp_limb_t,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_si_sub(
        res: *mut ca_struct,
        x: mp_limb_signed_t,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sub(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_mul_fmpq(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpq,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_mul_fmpz(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpz,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_mul_ui(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_mul_si(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_mul(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_inv(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_fmpq_div(
        res: *mut ca_struct,
        x: *const fmpq,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_div(
        res: *mut ca_struct,
        x: *const fmpz,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_ui_div(
        res: *mut ca_struct,
        x: mp_limb_t,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_si_div(
        res: *mut ca_struct,
        x: mp_limb_signed_t,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_div_fmpq(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpq,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_div_fmpz(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpz,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_div_ui(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_div_si(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_div(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_dot(
        res: *mut ca_struct,
        initial: *const ca_struct,
        subtract: libc::c_int,
        x: ca_srcptr,
        xstep: mp_limb_signed_t,
        y: ca_srcptr,
        ystep: mp_limb_signed_t,
        len: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_poly_evaluate(
        res: *mut ca_struct,
        poly: *const fmpz_poly_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpq_poly_evaluate(
        res: *mut ca_struct,
        poly: *const fmpq_poly_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_mpoly_evaluate_horner(
        res: *mut ca_struct,
        f: *const fmpz_mpoly_struct,
        x: ca_srcptr,
        mctx: *const fmpz_mpoly_ctx_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_mpoly_evaluate_iter(
        res: *mut ca_struct,
        f: *const fmpz_mpoly_struct,
        x: ca_srcptr,
        mctx: *const fmpz_mpoly_ctx_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_mpoly_evaluate(
        res: *mut ca_struct,
        f: *const fmpz_mpoly_struct,
        x: ca_srcptr,
        mctx: *const fmpz_mpoly_ctx_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_mpoly_q_evaluate(
        res: *mut ca_struct,
        f: *const fmpz_mpoly_q_struct,
        x: ca_srcptr,
        mctx: *const fmpz_mpoly_ctx_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_fmpz_mpoly_q_evaluate_no_division_by_zero(
        res: *mut ca_struct,
        f: *const fmpz_mpoly_q_struct,
        x: ca_srcptr,
        mctx: *const fmpz_mpoly_ctx_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_inv_no_division_by_zero(
        res: *mut ca_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    #[link_name = "ca_sqr__extern"]
    pub fn ca_sqr(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_pow_fmpq(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpq,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_pow_fmpz(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const fmpz,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_pow_ui(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_pow_si(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_pow(
        res: *mut ca_struct,
        x: *const ca_struct,
        y: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_pow_si_arithmetic(
        res: *mut ca_struct,
        x: *const ca_struct,
        n: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sqrt_inert(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_sqrt_nofactor(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_sqrt_factor(
        res: *mut ca_struct,
        x: *const ca_struct,
        flags: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sqrt(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    #[link_name = "ca_sqrt_ui__extern"]
    pub fn ca_sqrt_ui(res: *mut ca_struct, n: mp_limb_t, ctx: *mut ca_ctx_struct);
    pub fn ca_conj_shallow(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_conj_deep(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_conj(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_abs(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_sgn(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_csgn(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_arg(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_re(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_im(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_floor(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_ceil(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_exp(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_log(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_sin_cos_exponential(
        res1: *mut ca_struct,
        res2: *mut ca_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sin_cos_direct_exp_hack(
        res1: *mut ca_struct,
        res2: *mut ca_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sin_cos_direct(
        res1: *mut ca_struct,
        res2: *mut ca_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sin_cos_tangent(
        res1: *mut ca_struct,
        res2: *mut ca_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sin_cos(
        res1: *mut ca_struct,
        res2: *mut ca_struct,
        x: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_sin(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_cos(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_tan_sine_cosine(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_tan_exponential(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_tan_direct(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_tan(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_cot(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_atan_logarithm(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_atan_direct(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_atan(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_asin_logarithm(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_asin_direct(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_asin(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_acos_logarithm(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_acos_direct(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_acos(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_erf(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_erfc(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_erfi(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_gamma(res: *mut ca_struct, x: *const ca_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_get_acb_raw(
        res: *mut acb_struct,
        x: *const ca_struct,
        prec: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_get_acb(
        res: *mut acb_struct,
        x: *const ca_struct,
        prec: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_get_acb_accurate_parts(
        res: *mut acb_struct,
        x: *const ca_struct,
        prec: mp_limb_signed_t,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_get_decimal_str(
        x: *const ca_struct,
        digits: mp_limb_signed_t,
        flags: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    ) -> *mut libc::c_char;
    pub fn ca_factor_init(fac: *mut ca_factor_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_factor_clear(fac: *mut ca_factor_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_factor_one(fac: *mut ca_factor_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_factor_print(fac: *const ca_factor_struct, ctx: *mut ca_ctx_struct);
    pub fn ca_factor_insert(
        fac: *mut ca_factor_struct,
        base: *const ca_struct,
        exp: *const ca_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_factor_get_ca(
        res: *mut ca_struct,
        fac: *const ca_factor_struct,
        ctx: *mut ca_ctx_struct,
    );
    pub fn ca_factor(
        res: *mut ca_factor_struct,
        x: *const ca_struct,
        flags: mp_limb_t,
        ctx: *mut ca_ctx_struct,
    );
}
