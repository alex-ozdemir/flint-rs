/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


pub const FEXPR_TYPE_BITS: u32 = 4;
pub const FEXPR_SMALL_SYMBOL_LEN: u32 = 7;
pub const FEXPR_LATEX_SMALL: u32 = 1;
pub const FEXPR_LATEX_LOGIC: u32 = 2;
#[repr(C)]
pub struct fexpr_struct {
    pub data: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fexpr_struct"][::std::mem::size_of::<fexpr_struct>() - 16usize];
    ["Alignment of fexpr_struct"][::std::mem::align_of::<fexpr_struct>() - 8usize];
    ["Offset of field: fexpr_struct::data"][::std::mem::offset_of!(fexpr_struct, data) - 0usize];
    ["Offset of field: fexpr_struct::alloc"][::std::mem::offset_of!(fexpr_struct, alloc) - 8usize];
};
impl Default for fexpr_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fexpr_t = [fexpr_struct; 1usize];
pub type fexpr_ptr = *mut fexpr_struct;
pub type fexpr_srcptr = *const fexpr_struct;
#[repr(C)]
pub struct fexpr_vec_struct {
    pub entries: *mut fexpr_struct,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fexpr_vec_struct"][::std::mem::size_of::<fexpr_vec_struct>() - 24usize];
    ["Alignment of fexpr_vec_struct"][::std::mem::align_of::<fexpr_vec_struct>() - 8usize];
    ["Offset of field: fexpr_vec_struct::entries"]
        [::std::mem::offset_of!(fexpr_vec_struct, entries) - 0usize];
    ["Offset of field: fexpr_vec_struct::alloc"]
        [::std::mem::offset_of!(fexpr_vec_struct, alloc) - 8usize];
    ["Offset of field: fexpr_vec_struct::length"]
        [::std::mem::offset_of!(fexpr_vec_struct, length) - 16usize];
};
impl Default for fexpr_vec_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fexpr_vec_t = [fexpr_vec_struct; 1usize];
extern "C" {
    #[link_name = "fexpr_init__extern"]
    pub fn fexpr_init(expr: *mut fexpr_struct);
    #[link_name = "fexpr_clear__extern"]
    pub fn fexpr_clear(expr: *mut fexpr_struct);
    #[link_name = "_fexpr_vec_init__extern"]
    pub fn _fexpr_vec_init(len: mp_limb_signed_t) -> fexpr_ptr;
    #[link_name = "_fexpr_vec_clear__extern"]
    pub fn _fexpr_vec_clear(vec: fexpr_ptr, len: mp_limb_signed_t);
    #[link_name = "fexpr_fit_size__extern"]
    pub fn fexpr_fit_size(expr: *mut fexpr_struct, size: mp_limb_signed_t);
    #[link_name = "_fexpr_size__extern"]
    pub fn _fexpr_size(expr: *const mp_limb_t) -> mp_limb_signed_t;
    #[link_name = "fexpr_size__extern"]
    pub fn fexpr_size(expr: *const fexpr_struct) -> mp_limb_signed_t;
    #[link_name = "fexpr_set__extern"]
    pub fn fexpr_set(res: *mut fexpr_struct, expr: *const fexpr_struct);
    #[link_name = "fexpr_swap__extern"]
    pub fn fexpr_swap(a: *mut fexpr_struct, b: *mut fexpr_struct);
    #[link_name = "_mpn_equal__extern"]
    pub fn _mpn_equal(a: mp_srcptr, b: mp_srcptr, len: mp_limb_signed_t) -> libc::c_int;
    #[link_name = "fexpr_equal__extern"]
    pub fn fexpr_equal(a: *const fexpr_struct, b: *const fexpr_struct) -> libc::c_int;
    pub fn fexpr_equal_si(expr: *const fexpr_struct, c: mp_limb_signed_t) -> libc::c_int;
    pub fn fexpr_equal_ui(expr: *const fexpr_struct, c: mp_limb_t) -> libc::c_int;
    pub fn fexpr_hash(expr: *const fexpr_struct) -> mp_limb_t;
    pub fn fexpr_cmp_fast(a: *const fexpr_struct, b: *const fexpr_struct) -> libc::c_int;
    pub fn _fexpr_vec_sort_fast(vec: fexpr_ptr, len: mp_limb_signed_t);
    #[link_name = "_fexpr_is_integer__extern"]
    pub fn _fexpr_is_integer(expr: *const mp_limb_t) -> libc::c_int;
    #[link_name = "fexpr_is_integer__extern"]
    pub fn fexpr_is_integer(expr: *const fexpr_struct) -> libc::c_int;
    pub fn fexpr_is_neg_integer(expr: *const fexpr_struct) -> libc::c_int;
    #[link_name = "_fexpr_is_symbol__extern"]
    pub fn _fexpr_is_symbol(expr: *const mp_limb_t) -> libc::c_int;
    #[link_name = "fexpr_is_symbol__extern"]
    pub fn fexpr_is_symbol(expr: *const fexpr_struct) -> libc::c_int;
    #[link_name = "_fexpr_is_string__extern"]
    pub fn _fexpr_is_string(expr: *const mp_limb_t) -> libc::c_int;
    #[link_name = "fexpr_is_string__extern"]
    pub fn fexpr_is_string(expr: *const fexpr_struct) -> libc::c_int;
    #[link_name = "_fexpr_is_atom__extern"]
    pub fn _fexpr_is_atom(expr: *const mp_limb_t) -> libc::c_int;
    #[link_name = "fexpr_is_atom__extern"]
    pub fn fexpr_is_atom(expr: *const fexpr_struct) -> libc::c_int;
    #[link_name = "fexpr_zero__extern"]
    pub fn fexpr_zero(res: *mut fexpr_struct);
    #[link_name = "fexpr_is_zero__extern"]
    pub fn fexpr_is_zero(expr: *const fexpr_struct) -> libc::c_int;
    pub fn fexpr_set_si(res: *mut fexpr_struct, c: mp_limb_signed_t);
    pub fn fexpr_set_ui(res: *mut fexpr_struct, c: mp_limb_t);
    pub fn fexpr_set_fmpz(res: *mut fexpr_struct, c: *const fmpz);
    pub fn fexpr_get_fmpz(c: *mut fmpz, x: *const fexpr_struct) -> libc::c_int;
    pub fn fexpr_set_fmpq(res: *mut fexpr_struct, x: *const fmpq);
    #[link_name = "fexpr_set_symbol_builtin__extern"]
    pub fn fexpr_set_symbol_builtin(res: *mut fexpr_struct, id: mp_limb_signed_t);
    pub fn fexpr_set_symbol_str(res: *mut fexpr_struct, s: *const libc::c_char);
    pub fn fexpr_get_symbol_str(expr: *const fexpr_struct) -> *mut libc::c_char;
    pub fn fexpr_set_string(res: *mut fexpr_struct, s: *const libc::c_char);
    pub fn fexpr_get_string(expr: *const fexpr_struct) -> *mut libc::c_char;
    pub fn fexpr_depth(expr: *const fexpr_struct) -> mp_limb_signed_t;
    pub fn fexpr_num_leaves(expr: *const fexpr_struct) -> mp_limb_signed_t;
    #[link_name = "fexpr_size_bytes__extern"]
    pub fn fexpr_size_bytes(expr: *const fexpr_struct) -> mp_limb_signed_t;
    #[link_name = "fexpr_allocated_bytes__extern"]
    pub fn fexpr_allocated_bytes(expr: *const fexpr_struct) -> mp_limb_signed_t;
    #[link_name = "fexpr_is_any_builtin_symbol__extern"]
    pub fn fexpr_is_any_builtin_symbol(expr: *const fexpr_struct) -> libc::c_int;
    #[link_name = "fexpr_is_builtin_symbol__extern"]
    pub fn fexpr_is_builtin_symbol(expr: *const fexpr_struct, i: mp_limb_signed_t) -> libc::c_int;
    pub fn fexpr_is_builtin_call(expr: *const fexpr_struct, i: mp_limb_signed_t) -> libc::c_int;
    pub fn fexpr_is_any_builtin_call(expr: *const fexpr_struct) -> libc::c_int;
    #[link_name = "fexpr_nargs__extern"]
    pub fn fexpr_nargs(expr: *const fexpr_struct) -> mp_limb_signed_t;
    pub fn fexpr_func(res: *mut fexpr_struct, expr: *const fexpr_struct);
    pub fn fexpr_view_func(res: *mut fexpr_struct, expr: *const fexpr_struct);
    pub fn fexpr_arg(res: *mut fexpr_struct, expr: *const fexpr_struct, i: mp_limb_signed_t);
    pub fn fexpr_view_arg(res: *mut fexpr_struct, expr: *const fexpr_struct, i: mp_limb_signed_t);
    #[link_name = "fexpr_view_next__extern"]
    pub fn fexpr_view_next(view: *mut fexpr_struct);
    pub fn fexpr_call0(res: *mut fexpr_struct, f: *const fexpr_struct);
    pub fn fexpr_call1(res: *mut fexpr_struct, f: *const fexpr_struct, x1: *const fexpr_struct);
    pub fn fexpr_call2(
        res: *mut fexpr_struct,
        f: *const fexpr_struct,
        x1: *const fexpr_struct,
        x2: *const fexpr_struct,
    );
    pub fn fexpr_call3(
        res: *mut fexpr_struct,
        f: *const fexpr_struct,
        x1: *const fexpr_struct,
        x2: *const fexpr_struct,
        x3: *const fexpr_struct,
    );
    pub fn fexpr_call4(
        res: *mut fexpr_struct,
        f: *const fexpr_struct,
        x1: *const fexpr_struct,
        x2: *const fexpr_struct,
        x3: *const fexpr_struct,
        x4: *const fexpr_struct,
    );
    pub fn fexpr_call_vec(
        res: *mut fexpr_struct,
        f: *const fexpr_struct,
        args: fexpr_srcptr,
        len: mp_limb_signed_t,
    );
    pub fn fexpr_call_builtin1(res: *mut fexpr_struct, f: mp_limb_signed_t, x: *const fexpr_struct);
    pub fn fexpr_call_builtin2(
        res: *mut fexpr_struct,
        f: mp_limb_signed_t,
        x: *const fexpr_struct,
        y: *const fexpr_struct,
    );
    pub fn fexpr_contains(expr: *const fexpr_struct, x: *const fexpr_struct) -> libc::c_int;
    pub fn fexpr_replace(
        res: *mut fexpr_struct,
        expr: *const fexpr_struct,
        x: *const fexpr_struct,
        y: *const fexpr_struct,
    ) -> libc::c_int;
    pub fn fexpr_replace2(
        res: *mut fexpr_struct,
        expr: *const fexpr_struct,
        x1: *const fexpr_struct,
        y1: *const fexpr_struct,
        x2: *const fexpr_struct,
        y2: *const fexpr_struct,
    ) -> libc::c_int;
    pub fn fexpr_replace_vec(
        res: *mut fexpr_struct,
        expr: *const fexpr_struct,
        xs: *const fexpr_vec_struct,
        ys: *const fexpr_vec_struct,
    ) -> libc::c_int;
    pub fn fexpr_write(stream: *mut calcium_stream_struct, expr: *const fexpr_struct);
    pub fn fexpr_print(expr: *const fexpr_struct);
    pub fn fexpr_get_str(expr: *const fexpr_struct) -> *mut libc::c_char;
    pub fn fexpr_write_latex(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_print_latex(expr: *const fexpr_struct, flags: mp_limb_t);
    pub fn fexpr_get_str_latex(expr: *const fexpr_struct, flags: mp_limb_t) -> *mut libc::c_char;
    pub fn fexpr_write_latex_call(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_subscript(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_subscript_call(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_infix(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_mul(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_div(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_neg_pos(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_add(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_sub(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_pow(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_exp(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_factorial(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_integral(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_sum_product(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_divsum(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_limit(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_derivative(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_logic(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_collection(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_matrix(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_simple(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_simple2(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_simple2_small(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_alg_structure(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_setop(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_cases(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_where(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_show_form(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_range(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_decimal(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_call1_optional_derivative(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_call2_optional_derivative(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_sub1_call1_optional_derivative(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_sub1_call2_optional_derivative(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_misc_special(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_write_latex_residue(
        out: *mut calcium_stream_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    );
    pub fn fexpr_set_arf(res: *mut fexpr_struct, x: *const arf_struct);
    pub fn fexpr_set_d(res: *mut fexpr_struct, x: f64);
    pub fn fexpr_set_re_im_d(res: *mut fexpr_struct, x: f64, y: f64);
    pub fn fexpr_neg(res: *mut fexpr_struct, a: *const fexpr_struct);
    pub fn fexpr_add(res: *mut fexpr_struct, a: *const fexpr_struct, b: *const fexpr_struct);
    pub fn fexpr_sub(res: *mut fexpr_struct, a: *const fexpr_struct, b: *const fexpr_struct);
    pub fn fexpr_mul(res: *mut fexpr_struct, a: *const fexpr_struct, b: *const fexpr_struct);
    pub fn fexpr_div(res: *mut fexpr_struct, a: *const fexpr_struct, b: *const fexpr_struct);
    pub fn fexpr_pow(res: *mut fexpr_struct, a: *const fexpr_struct, b: *const fexpr_struct);
    pub fn fexpr_is_arithmetic_operation(expr: *const fexpr_struct) -> libc::c_int;
    pub fn fexpr_arithmetic_nodes(nodes: *mut fexpr_vec_struct, expr: *const fexpr_struct);
    pub fn fexpr_get_fmpz_mpoly_q(
        res: *mut fmpz_mpoly_q_struct,
        expr: *const fexpr_struct,
        vars: *const fexpr_vec_struct,
        ctx: *const fmpz_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fexpr_set_fmpz_mpoly(
        res: *mut fexpr_struct,
        poly: *const fmpz_mpoly_struct,
        vars: *const fexpr_vec_struct,
        ctx: *const fmpz_mpoly_ctx_struct,
    );
    pub fn fexpr_set_fmpz_mpoly_q(
        res: *mut fexpr_struct,
        frac: *const fmpz_mpoly_q_struct,
        vars: *const fexpr_vec_struct,
        ctx: *const fmpz_mpoly_ctx_struct,
    );
    pub fn fexpr_expanded_normal_form(
        res: *mut fexpr_struct,
        expr: *const fexpr_struct,
        flags: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "fexpr_vec_init__extern"]
    pub fn fexpr_vec_init(vec: *mut fexpr_vec_struct, len: mp_limb_signed_t);
    #[link_name = "fexpr_vec_print__extern"]
    pub fn fexpr_vec_print(F: *const fexpr_vec_struct);
    #[link_name = "fexpr_vec_swap__extern"]
    pub fn fexpr_vec_swap(x: *mut fexpr_vec_struct, y: *mut fexpr_vec_struct);
    #[link_name = "fexpr_vec_fit_length__extern"]
    pub fn fexpr_vec_fit_length(vec: *mut fexpr_vec_struct, len: mp_limb_signed_t);
    #[link_name = "fexpr_vec_clear__extern"]
    pub fn fexpr_vec_clear(vec: *mut fexpr_vec_struct);
    #[link_name = "fexpr_vec_set__extern"]
    pub fn fexpr_vec_set(dest: *mut fexpr_vec_struct, src: *const fexpr_vec_struct);
    #[link_name = "fexpr_vec_append__extern"]
    pub fn fexpr_vec_append(vec: *mut fexpr_vec_struct, f: *const fexpr_struct);
    #[link_name = "fexpr_vec_insert_unique__extern"]
    pub fn fexpr_vec_insert_unique(
        vec: *mut fexpr_vec_struct,
        f: *const fexpr_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "fexpr_vec_set_length__extern"]
    pub fn fexpr_vec_set_length(vec: *mut fexpr_vec_struct, len: mp_limb_signed_t);
}
