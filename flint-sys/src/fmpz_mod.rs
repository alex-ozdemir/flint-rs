/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct {
    pub gammapow: fmpz_t,
    pub cm: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct"][::std::mem::size_of::<
        fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct,
    >() - 16usize];
    ["Alignment of fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct"][::std::mem::align_of::<
        fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct,
    >() - 8usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct::gammapow"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct,
        gammapow
    )
        - 0usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct::cm"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct,
        cm
    ) - 8usize];
};
impl Default for fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct fmpz_mod_discrete_log_pohlig_hellman_entry_struct {
    pub exp: mp_limb_signed_t,
    pub prime: mp_limb_t,
    pub gamma: fmpz_t,
    pub gammainv: fmpz_t,
    pub startingbeta: fmpz_t,
    pub co: fmpz_t,
    pub startinge: fmpz_t,
    pub idem: fmpz_t,
    pub cbound: mp_limb_t,
    pub dbound: mp_limb_t,
    pub table: *mut fmpz_mod_discrete_log_pohlig_hellman_table_entry_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_discrete_log_pohlig_hellman_entry_struct"]
        [::std::mem::size_of::<fmpz_mod_discrete_log_pohlig_hellman_entry_struct>() - 88usize];
    ["Alignment of fmpz_mod_discrete_log_pohlig_hellman_entry_struct"]
        [::std::mem::align_of::<fmpz_mod_discrete_log_pohlig_hellman_entry_struct>() - 8usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::exp"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_entry_struct, exp) - 0usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::prime"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_entry_struct, prime) - 8usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::gamma"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
        gamma
    ) - 16usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::gammainv"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
        gammainv
    ) - 24usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::startingbeta"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
        startingbeta
    )
        - 32usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::co"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_entry_struct, co) - 40usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::startinge"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
        startinge
    ) - 48usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::idem"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_entry_struct, idem) - 56usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::cbound"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
        cbound
    ) - 64usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::dbound"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
        dbound
    ) - 72usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_entry_struct::table"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
        table
    ) - 80usize];
};
impl Default for fmpz_mod_discrete_log_pohlig_hellman_entry_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct fmpz_mod_discrete_log_pohlig_hellman_struct {
    pub fpctx: fmpz_mod_ctx_t,
    pub pm1: fmpz_t,
    pub alpha: fmpz_t,
    pub alphainv: fmpz_t,
    pub num_factors: mp_limb_signed_t,
    pub entries: *mut fmpz_mod_discrete_log_pohlig_hellman_entry_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_discrete_log_pohlig_hellman_struct"]
        [::std::mem::size_of::<fmpz_mod_discrete_log_pohlig_hellman_struct>() - 152usize];
    ["Alignment of fmpz_mod_discrete_log_pohlig_hellman_struct"]
        [::std::mem::align_of::<fmpz_mod_discrete_log_pohlig_hellman_struct>() - 8usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_struct::fpctx"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_struct, fpctx) - 0usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_struct::pm1"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_struct, pm1) - 112usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_struct::alpha"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_struct, alpha) - 120usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_struct::alphainv"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_struct, alphainv) - 128usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_struct::num_factors"][::std::mem::offset_of!(
        fmpz_mod_discrete_log_pohlig_hellman_struct,
        num_factors
    ) - 136usize];
    ["Offset of field: fmpz_mod_discrete_log_pohlig_hellman_struct::entries"]
        [::std::mem::offset_of!(fmpz_mod_discrete_log_pohlig_hellman_struct, entries) - 144usize];
};
impl Default for fmpz_mod_discrete_log_pohlig_hellman_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_discrete_log_pohlig_hellman_t =
    [fmpz_mod_discrete_log_pohlig_hellman_struct; 1usize];
extern "C" {
    pub fn fmpz_mod_ctx_init(ctx: *mut fmpz_mod_ctx_struct, n: *const fmpz);
    pub fn fmpz_mod_ctx_init_ui(ctx: *mut fmpz_mod_ctx_struct, n: mp_limb_t);
    pub fn fmpz_mod_ctx_init_rand_bits(
        ctx: *mut fmpz_mod_ctx_struct,
        state: *mut flint_rand_s,
        max_bits: mp_limb_t,
    );
    pub fn fmpz_mod_ctx_init_rand_bits_prime(
        ctx: *mut fmpz_mod_ctx_struct,
        state: *mut flint_rand_s,
        max_bits: mp_limb_t,
    );
    pub fn fmpz_mod_ctx_clear(ctx: *mut fmpz_mod_ctx_struct);
    #[link_name = "fmpz_mod_ctx_modulus__extern"]
    pub fn fmpz_mod_ctx_modulus(ctx: *const fmpz_mod_ctx_struct) -> *const fmpz;
    pub fn fmpz_mod_ctx_set_modulus(ctx: *mut fmpz_mod_ctx_struct, n: *const fmpz);
    pub fn fmpz_mod_ctx_set_modulus_ui(ctx: *mut fmpz_mod_ctx_struct, n: mp_limb_t);
    pub fn fmpz_mod_is_canonical(a: *const fmpz, ctx: *const fmpz_mod_ctx_struct) -> libc::c_int;
    pub fn fmpz_mod_assert_canonical(a: *const fmpz, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_is_one(a: *const fmpz, ctx: *const fmpz_mod_ctx_struct) -> libc::c_int;
    pub fn fmpz_mod_equal_fmpz(
        a: *const fmpz,
        b: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_equal_si(
        a: *const fmpz,
        b: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_set_fmpz(a: *mut fmpz, b: *const fmpz, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_set_ui(a: *mut fmpz, b: mp_limb_t, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_set_si(a: *mut fmpz, b: mp_limb_signed_t, ctx: *const fmpz_mod_ctx_struct);
    pub fn _fmpz_mod_add1(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_add2s(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_add2(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_addN(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_add__extern"]
    pub fn fmpz_mod_add(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_add_fmpz(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_add_ui(
        a: *mut fmpz,
        b: *const fmpz,
        c: mp_limb_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_add_si(
        a: *mut fmpz,
        b: *const fmpz,
        c: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_sub1(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_sub2s(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_sub2(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_subN(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_sub__extern"]
    pub fn fmpz_mod_sub(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_sub_fmpz(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_sub_ui(
        a: *mut fmpz,
        b: *const fmpz,
        c: mp_limb_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_sub_si(
        a: *mut fmpz,
        b: *const fmpz,
        c: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_fmpz_sub(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_ui_sub(
        a: *mut fmpz,
        b: mp_limb_t,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_si_sub(
        a: *mut fmpz,
        b: mp_limb_signed_t,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_neg(a: *mut fmpz, b: *const fmpz, ctx: *const fmpz_mod_ctx_struct);
    pub fn _fmpz_mod_mul1(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_mul2s(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_mul2(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_mulN(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_mul__extern"]
    pub fn fmpz_mod_mul(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_mul_fmpz(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_mul_ui(
        a: *mut fmpz,
        b: *const fmpz,
        c: mp_limb_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_mul_si(
        a: *mut fmpz,
        b: *const fmpz,
        c: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_addmul(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        d: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_is_invertible(a: *const fmpz, ctx: *const fmpz_mod_ctx_struct) -> libc::c_int;
    pub fn fmpz_mod_inv(a: *mut fmpz, b: *const fmpz, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_divides(
        a: *mut fmpz,
        b: *const fmpz,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_pow_ui(
        a: *mut fmpz,
        b: *const fmpz,
        pow: mp_limb_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_pow_fmpz(
        a: *mut fmpz,
        b: *const fmpz,
        pow: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_rand(a: *mut fmpz, state: *mut flint_rand_s, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_rand_not_zero(
        a: *mut fmpz,
        state: *mut flint_rand_s,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_discrete_log_pohlig_hellman_init(
        L: *mut fmpz_mod_discrete_log_pohlig_hellman_struct,
    );
    pub fn fmpz_mod_discrete_log_pohlig_hellman_clear(
        L: *mut fmpz_mod_discrete_log_pohlig_hellman_struct,
    );
    pub fn fmpz_mod_discrete_log_pohlig_hellman_precompute_prime(
        L: *mut fmpz_mod_discrete_log_pohlig_hellman_struct,
        p: *const fmpz,
    ) -> f64;
    pub fn fmpz_mod_discrete_log_pohlig_hellman_run(
        x: *mut fmpz,
        L: *const fmpz_mod_discrete_log_pohlig_hellman_struct,
        y: *const fmpz,
    );
    #[link_name = "fmpz_mod_discrete_log_pohlig_hellman_primitive_root__extern"]
    pub fn fmpz_mod_discrete_log_pohlig_hellman_primitive_root(
        L: *mut fmpz_mod_discrete_log_pohlig_hellman_struct,
    ) -> *const fmpz;
    pub fn fmpz_next_smooth_prime(a: *mut fmpz, b: *const fmpz) -> libc::c_int;
}
