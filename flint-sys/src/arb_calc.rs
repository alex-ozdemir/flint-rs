/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


pub const ARB_CALC_SUCCESS: u32 = 0;
pub const ARB_CALC_IMPRECISE_INPUT: u32 = 1;
pub const ARB_CALC_NO_CONVERGENCE: u32 = 2;
pub type arb_calc_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        out: arb_ptr,
        inp: *const arb_struct,
        param: *mut libc::c_void,
        order: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    ) -> libc::c_int,
>;
extern "C" {
    pub static mut arb_calc_verbose: libc::c_int;
    #[link_name = "arf_interval_init__extern"]
    pub fn arf_interval_init(v: *mut arf_interval_struct);
    #[link_name = "arf_interval_clear__extern"]
    pub fn arf_interval_clear(v: *mut arf_interval_struct);
    #[link_name = "_arf_interval_vec_init__extern"]
    pub fn _arf_interval_vec_init(n: mp_limb_signed_t) -> arf_interval_ptr;
    #[link_name = "_arf_interval_vec_clear__extern"]
    pub fn _arf_interval_vec_clear(v: arf_interval_ptr, n: mp_limb_signed_t);
    #[link_name = "arf_interval_set__extern"]
    pub fn arf_interval_set(v: *mut arf_interval_struct, u: *const arf_interval_struct);
    #[link_name = "arf_interval_swap__extern"]
    pub fn arf_interval_swap(v: *mut arf_interval_struct, u: *mut arf_interval_struct);
    #[link_name = "arf_interval_get_arb__extern"]
    pub fn arf_interval_get_arb(
        x: *mut arb_struct,
        v: *const arf_interval_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arf_interval_fprintd(
        file: *mut FILE,
        v: *const arf_interval_struct,
        n: mp_limb_signed_t,
    );
    pub fn arf_interval_printd(v: *const arf_interval_struct, n: mp_limb_signed_t);
    pub fn arb_calc_partition(
        L: *mut arf_interval_struct,
        R: *mut arf_interval_struct,
        func: arb_calc_func_t,
        param: *mut libc::c_void,
        block: *const arf_interval_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_calc_isolate_roots(
        blocks: *mut arf_interval_ptr,
        flags: *mut *mut libc::c_int,
        func: arb_calc_func_t,
        param: *mut libc::c_void,
        block: *const arf_interval_struct,
        maxdepth: mp_limb_signed_t,
        maxeval: mp_limb_signed_t,
        maxfound: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn arb_calc_refine_root_bisect(
        r: *mut arf_interval_struct,
        func: arb_calc_func_t,
        param: *mut libc::c_void,
        start: *const arf_interval_struct,
        iter: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_calc_newton_conv_factor(
        conv_factor: *mut arf_struct,
        func: arb_calc_func_t,
        param: *mut libc::c_void,
        conv_region: *const arb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_calc_newton_step(
        xnew: *mut arb_struct,
        func: arb_calc_func_t,
        param: *mut libc::c_void,
        x: *const arb_struct,
        conv_region: *const arb_struct,
        conv_factor: *const arf_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_calc_refine_root_newton(
        r: *mut arb_struct,
        func: arb_calc_func_t,
        param: *mut libc::c_void,
        start: *const arb_struct,
        conv_region: *const arb_struct,
        conv_factor: *const arf_struct,
        eval_extra_prec: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
}
