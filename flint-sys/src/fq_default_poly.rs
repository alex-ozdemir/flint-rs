/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_camel_case_types)]
use crate::deps::*;
use crate::fmpz_types::*;
use crate::nmod_types::*;
use crate::fmpz_mod_types::*;
use crate::fq_default::*;
use crate::fq_zech_types::*;
use crate::fq_nmod_types::*;
use crate::fq_types::*;
use libc::{c_char, c_int, c_uint, c_void, size_t, FILE};


#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_default_poly_struct {
    pub fq: __BindgenUnionField<fq_poly_t>,
    pub fq_nmod: __BindgenUnionField<fq_nmod_poly_t>,
    pub fq_zech: __BindgenUnionField<fq_zech_poly_t>,
    pub nmod: __BindgenUnionField<nmod_poly_t>,
    pub fmpz_mod: __BindgenUnionField<fmpz_mod_poly_t>,
    pub bindgen_union_field: [u64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_default_poly_struct"][::std::mem::size_of::<fq_default_poly_struct>() - 48usize];
    ["Alignment of fq_default_poly_struct"]
        [::std::mem::align_of::<fq_default_poly_struct>() - 8usize];
    ["Offset of field: fq_default_poly_struct::fq"]
        [::std::mem::offset_of!(fq_default_poly_struct, fq) - 0usize];
    ["Offset of field: fq_default_poly_struct::fq_nmod"]
        [::std::mem::offset_of!(fq_default_poly_struct, fq_nmod) - 0usize];
    ["Offset of field: fq_default_poly_struct::fq_zech"]
        [::std::mem::offset_of!(fq_default_poly_struct, fq_zech) - 0usize];
    ["Offset of field: fq_default_poly_struct::nmod"]
        [::std::mem::offset_of!(fq_default_poly_struct, nmod) - 0usize];
    ["Offset of field: fq_default_poly_struct::fmpz_mod"]
        [::std::mem::offset_of!(fq_default_poly_struct, fmpz_mod) - 0usize];
};
impl Default for fq_default_poly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_default_poly_t = [fq_default_poly_struct; 1usize];
extern "C" {
    pub fn fq_default_poly_set_fmpz_poly(
        rop: *mut fq_default_poly_struct,
        op: *const fmpz_poly_struct,
        ctx: *const fq_default_ctx_struct,
    );
    pub fn fq_default_poly_fprint(
        file: *mut FILE,
        poly: *const fq_default_poly_struct,
        ctx: *const fq_default_ctx_struct,
    ) -> ::std::os::raw::c_int;
    pub fn fq_default_poly_fprint_pretty(
        file: *mut FILE,
        poly: *const fq_default_poly_struct,
        x: *const ::std::os::raw::c_char,
        ctx: *const fq_default_ctx_struct,
    ) -> ::std::os::raw::c_int;
    pub fn fq_default_poly_print(
        poly: *const fq_default_poly_struct,
        ctx: *const fq_default_ctx_struct,
    ) -> ::std::os::raw::c_int;
    pub fn fq_default_poly_print_pretty(
        poly: *const fq_default_poly_struct,
        x: *const ::std::os::raw::c_char,
        ctx: *const fq_default_ctx_struct,
    ) -> ::std::os::raw::c_int;
}
