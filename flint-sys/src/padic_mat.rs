/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    #[link_name = "padic_mat__extern"]
    pub fn padic_mat(A: *const padic_mat_struct) -> *mut fmpz_mat_struct;
    #[link_name = "padic_mat_entry__extern"]
    pub fn padic_mat_entry(
        A: *const padic_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> *mut fmpz;
    #[link_name = "padic_mat_get_val__extern"]
    pub fn padic_mat_get_val(A: *const padic_mat_struct) -> mp_limb_signed_t;
    #[link_name = "padic_mat_get_prec__extern"]
    pub fn padic_mat_get_prec(A: *const padic_mat_struct) -> mp_limb_signed_t;
    #[link_name = "padic_mat_nrows__extern"]
    pub fn padic_mat_nrows(A: *const padic_mat_struct) -> mp_limb_signed_t;
    #[link_name = "padic_mat_ncols__extern"]
    pub fn padic_mat_ncols(A: *const padic_mat_struct) -> mp_limb_signed_t;
    pub fn padic_mat_init(A: *mut padic_mat_struct, r: mp_limb_signed_t, c: mp_limb_signed_t);
    pub fn padic_mat_init2(
        A: *mut padic_mat_struct,
        r: mp_limb_signed_t,
        c: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn padic_mat_clear(A: *mut padic_mat_struct);
    pub fn _padic_mat_canonicalise(A: *mut padic_mat_struct, ctx: *const padic_ctx_struct);
    pub fn _padic_mat_reduce(A: *mut padic_mat_struct, ctx: *const padic_ctx_struct);
    pub fn padic_mat_reduce(A: *mut padic_mat_struct, ctx: *const padic_ctx_struct);
    #[link_name = "padic_mat_is_empty__extern"]
    pub fn padic_mat_is_empty(A: *const padic_mat_struct) -> libc::c_int;
    #[link_name = "padic_mat_is_square__extern"]
    pub fn padic_mat_is_square(A: *const padic_mat_struct) -> libc::c_int;
    pub fn padic_mat_is_canonical(
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    ) -> libc::c_int;
    pub fn padic_mat_is_reduced(
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    ) -> libc::c_int;
    pub fn padic_mat_set(
        B: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_swap(A: *mut padic_mat_struct, B: *mut padic_mat_struct);
    #[link_name = "padic_mat_swap_entrywise__extern"]
    pub fn padic_mat_swap_entrywise(mat1: *mut padic_mat_struct, mat2: *mut padic_mat_struct);
    pub fn padic_mat_zero(A: *mut padic_mat_struct);
    pub fn padic_mat_one(A: *mut padic_mat_struct);
    pub fn padic_mat_set_fmpq_mat(
        B: *mut padic_mat_struct,
        A: *const fmpq_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_get_fmpq_mat(
        B: *mut fmpq_mat_struct,
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_get_entry_padic(
        rop: *mut padic_struct,
        op: *const padic_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_set_entry_padic(
        rop: *mut padic_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
        op: *const padic_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_equal(A: *const padic_mat_struct, B: *const padic_mat_struct) -> libc::c_int;
    pub fn padic_mat_is_zero(A: *const padic_mat_struct) -> libc::c_int;
    pub fn padic_mat_fprint(
        file: *mut FILE,
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    ) -> libc::c_int;
    pub fn padic_mat_fprint_pretty(
        file: *mut FILE,
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    ) -> libc::c_int;
    pub fn padic_mat_print(A: *const padic_mat_struct, ctx: *const padic_ctx_struct)
        -> libc::c_int;
    pub fn padic_mat_print_pretty(
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    ) -> libc::c_int;
    pub fn padic_mat_randtest(
        mat: *mut padic_mat_struct,
        state: *mut flint_rand_s,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_transpose(B: *mut padic_mat_struct, A: *const padic_mat_struct);
    pub fn _padic_mat_add(
        C: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        B: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_add(
        C: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        B: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn _padic_mat_sub(
        C: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        B: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_sub(
        C: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        B: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn _padic_mat_neg(B: *mut padic_mat_struct, A: *const padic_mat_struct);
    pub fn padic_mat_neg(
        B: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn _padic_mat_scalar_mul_padic(
        B: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        c: *const padic_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_scalar_mul_padic(
        B: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        c: *const padic_struct,
        ctx: *const padic_ctx_struct,
    );
    pub fn _padic_mat_scalar_mul_fmpz(
        B: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        c: *const fmpz,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_scalar_mul_fmpz(
        B: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        c: *const fmpz,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_scalar_div_fmpz(
        B: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        c: *const fmpz,
        ctx: *const padic_ctx_struct,
    );
    pub fn padic_mat_mul(
        C: *mut padic_mat_struct,
        A: *const padic_mat_struct,
        B: *const padic_mat_struct,
        ctx: *const padic_ctx_struct,
    );
}
