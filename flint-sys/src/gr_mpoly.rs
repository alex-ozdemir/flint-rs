/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct gr_mpoly_struct {
    pub coeffs: gr_ptr,
    pub exps: *mut mp_limb_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_t,
    pub coeffs_alloc: mp_limb_signed_t,
    pub exps_alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gr_mpoly_struct"][::std::mem::size_of::<gr_mpoly_struct>() - 48usize];
    ["Alignment of gr_mpoly_struct"][::std::mem::align_of::<gr_mpoly_struct>() - 8usize];
    ["Offset of field: gr_mpoly_struct::coeffs"]
        [::std::mem::offset_of!(gr_mpoly_struct, coeffs) - 0usize];
    ["Offset of field: gr_mpoly_struct::exps"]
        [::std::mem::offset_of!(gr_mpoly_struct, exps) - 8usize];
    ["Offset of field: gr_mpoly_struct::length"]
        [::std::mem::offset_of!(gr_mpoly_struct, length) - 16usize];
    ["Offset of field: gr_mpoly_struct::bits"]
        [::std::mem::offset_of!(gr_mpoly_struct, bits) - 24usize];
    ["Offset of field: gr_mpoly_struct::coeffs_alloc"]
        [::std::mem::offset_of!(gr_mpoly_struct, coeffs_alloc) - 32usize];
    ["Offset of field: gr_mpoly_struct::exps_alloc"]
        [::std::mem::offset_of!(gr_mpoly_struct, exps_alloc) - 40usize];
};
impl Default for gr_mpoly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gr_mpoly_t = [gr_mpoly_struct; 1usize];
extern "C" {
    #[link_name = "gr_mpoly_init__extern"]
    pub fn gr_mpoly_init(
        A: *mut gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_init3(
        A: *mut gr_mpoly_struct,
        alloc: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_init2(
        A: *mut gr_mpoly_struct,
        alloc: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    #[link_name = "gr_mpoly_clear__extern"]
    pub fn gr_mpoly_clear(
        A: *mut gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn _gr_mpoly_fit_length(
        coeffs: *mut gr_ptr,
        coeffs_alloc: *mut mp_limb_signed_t,
        exps: *mut *mut mp_limb_t,
        exps_alloc: *mut mp_limb_signed_t,
        N: mp_limb_signed_t,
        length: mp_limb_signed_t,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_fit_length(
        A: *mut gr_mpoly_struct,
        len: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_fit_bits(
        A: *mut gr_mpoly_struct,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_fit_length_fit_bits(
        A: *mut gr_mpoly_struct,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_fit_length_reset_bits(
        A: *mut gr_mpoly_struct,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    #[link_name = "_gr_mpoly_set_length__extern"]
    pub fn _gr_mpoly_set_length(
        A: *mut gr_mpoly_struct,
        newlen: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    #[link_name = "gr_mpoly_swap__extern"]
    pub fn gr_mpoly_swap(
        A: *mut gr_mpoly_struct,
        B: *mut gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_set(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "gr_mpoly_zero__extern"]
    pub fn gr_mpoly_zero(
        A: *mut gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "gr_mpoly_is_zero__extern"]
    pub fn gr_mpoly_is_zero(
        A: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn gr_mpoly_gen(
        A: *mut gr_mpoly_struct,
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_is_gen(
        A: *const gr_mpoly_struct,
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn gr_mpoly_equal(
        A: *const gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn _gr_mpoly_push_exp_ui(
        A: *mut gr_mpoly_struct,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_push_term_scalar_ui(
        A: *mut gr_mpoly_struct,
        c: gr_srcptr,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn _gr_mpoly_push_exp_fmpz(
        A: *mut gr_mpoly_struct,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_push_term_scalar_fmpz(
        A: *mut gr_mpoly_struct,
        c: gr_srcptr,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_sort_terms(
        A: *mut gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_combine_like_terms(
        A: *mut gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_is_canonical(
        A: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn gr_mpoly_assert_canonical(
        A: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    );
    pub fn gr_mpoly_randtest_bits(
        A: *mut gr_mpoly_struct,
        state: *mut flint_rand_s,
        length: mp_limb_signed_t,
        exp_bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_write_pretty(
        out: *mut gr_stream_struct,
        A: *const gr_mpoly_struct,
        x_in: *mut *const libc::c_char,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_print_pretty(
        A: *const gr_mpoly_struct,
        x_in: *mut *const libc::c_char,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_scalar(
        A: *mut gr_mpoly_struct,
        c: gr_srcptr,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_ui(
        A: *mut gr_mpoly_struct,
        c: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_si(
        A: *mut gr_mpoly_struct,
        c: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_fmpz(
        A: *mut gr_mpoly_struct,
        c: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_fmpq(
        A: *mut gr_mpoly_struct,
        c: *const fmpq,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "gr_mpoly_one__extern"]
    pub fn gr_mpoly_one(
        A: *mut gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "gr_mpoly_is_one__extern"]
    pub fn gr_mpoly_is_one(
        A: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> truth_t;
    pub fn gr_mpoly_get_coeff_scalar_fmpz(
        c: gr_ptr,
        A: *const gr_mpoly_struct,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_get_coeff_scalar_ui(
        c: gr_ptr,
        A: *const gr_mpoly_struct,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_scalar_fmpz(
        A: *mut gr_mpoly_struct,
        c: gr_srcptr,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_ui_fmpz(
        A: *mut gr_mpoly_struct,
        c: mp_limb_t,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_si_fmpz(
        A: *mut gr_mpoly_struct,
        c: mp_limb_signed_t,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_fmpz_fmpz(
        A: *mut gr_mpoly_struct,
        c: *const fmpz,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_fmpq_fmpz(
        A: *mut gr_mpoly_struct,
        c: *const fmpq,
        exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_scalar_ui(
        poly: *mut gr_mpoly_struct,
        c: gr_srcptr,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_ui_ui(
        A: *mut gr_mpoly_struct,
        c: mp_limb_t,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_si_ui(
        A: *mut gr_mpoly_struct,
        c: mp_limb_signed_t,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_fmpz_ui(
        A: *mut gr_mpoly_struct,
        c: *const fmpz,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_set_coeff_fmpq_ui(
        A: *mut gr_mpoly_struct,
        c: *const fmpq,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_neg(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_add(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        C: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_sub(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        C: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul(
        poly1: *mut gr_mpoly_struct,
        poly2: *const gr_mpoly_struct,
        poly3: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul_johnson(
        poly1: *mut gr_mpoly_struct,
        poly2: *const gr_mpoly_struct,
        poly3: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul_monomial(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        C: *const gr_mpoly_struct,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul_scalar(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        c: gr_srcptr,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul_si(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        c: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul_ui(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        c: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul_fmpz(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        c: *const fmpz,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
    pub fn gr_mpoly_mul_fmpq(
        A: *mut gr_mpoly_struct,
        B: *const gr_mpoly_struct,
        c: *const fmpq,
        mctx: *const mpoly_ctx_struct,
        cctx: *mut gr_ctx_struct,
    ) -> libc::c_int;
}
