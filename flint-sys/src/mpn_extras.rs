/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_camel_case_types)]
use crate::deps::*;
use libc::{c_char, c_int, c_uint, c_void, size_t, FILE};


pub const FLINT_FFT_MUL_THRESHOLD: u32 = 1540;
pub const FLINT_FFT_SQR_THRESHOLD: u32 = 3080;
pub const FLINT_MPN_MUL_FUNC_TAB_WIDTH: u32 = 17;
pub const FLINT_MPN_SQR_FUNC_TAB_WIDTH: u32 = 14;
pub const FLINT_MUL_USE_FUNC_TAB: u32 = 1;
pub const FLINT_MPN_MULHIGH_FUNC_TAB_WIDTH: u32 = 12;
pub const FLINT_MPN_SQRHIGH_FUNC_TAB_WIDTH: u32 = 8;
pub const FLINT_MPN_MULHIGH_NORMALISED_FUNC_TAB_WIDTH: u32 = 12;
pub const FLINT_HAVE_NATIVE_MPN_MULHIGH_BASECASE: u32 = 1;
pub const FLINT_HAVE_NATIVE_MPN_SQRHIGH_BASECASE: u32 = 1;
pub type flint_mpn_mul_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr) -> mp_limb_t,
>;
pub type flint_mpn_sqr_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: mp_ptr, arg2: mp_srcptr) -> mp_limb_t>;
#[repr(C)]
pub struct mp_limb_pair_t {
    pub m1: mp_limb_t,
    pub m2: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mp_limb_pair_t"][::std::mem::size_of::<mp_limb_pair_t>() - 16usize];
    ["Alignment of mp_limb_pair_t"][::std::mem::align_of::<mp_limb_pair_t>() - 8usize];
    ["Offset of field: mp_limb_pair_t::m1"][::std::mem::offset_of!(mp_limb_pair_t, m1) - 0usize];
    ["Offset of field: mp_limb_pair_t::m2"][::std::mem::offset_of!(mp_limb_pair_t, m2) - 8usize];
};
impl Default for mp_limb_pair_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type flint_mpn_mulhigh_normalised_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr) -> mp_limb_pair_t,
>;
extern "C" {
    pub fn flint_mpn_get_d(
        ptr: mp_srcptr,
        size: mp_size_t,
        sign: mp_size_t,
        exp: ::std::os::raw::c_long,
    ) -> f64;
    pub static mut flint_mpn_mul_func_tab: [[flint_mpn_mul_func_t; 17usize]; 0usize];
    pub static flint_mpn_mul_n_func_tab: [flint_mpn_mul_func_t; 0usize];
    pub static flint_mpn_sqr_func_tab: [flint_mpn_sqr_func_t; 0usize];
    pub fn flint_mpn_mul_basecase(
        r: mp_ptr,
        x: mp_srcptr,
        y: mp_srcptr,
        xn: mp_size_t,
        yn: mp_size_t,
    ) -> mp_limb_t;
    pub fn flint_mpn_sqr_basecase(r: mp_ptr, x: mp_srcptr, n: mp_size_t) -> mp_limb_t;
    pub fn flint_mpn_mul_toom22(
        pp: mp_ptr,
        ap: mp_srcptr,
        an: mp_size_t,
        bp: mp_srcptr,
        bn: mp_size_t,
        scratch: mp_ptr,
    );
    pub fn _flint_mpn_mul(
        r: mp_ptr,
        x: mp_srcptr,
        xn: mp_size_t,
        y: mp_srcptr,
        yn: mp_size_t,
    ) -> mp_limb_t;
    pub fn _flint_mpn_mul_n(r: mp_ptr, x: mp_srcptr, y: mp_srcptr, n: mp_size_t);
    pub fn _flint_mpn_sqr(r: mp_ptr, x: mp_srcptr, n: mp_size_t) -> mp_limb_t;
    pub static flint_mpn_mulhigh_func_tab: [flint_mpn_mul_func_t; 0usize];
    pub static flint_mpn_sqrhigh_func_tab: [flint_mpn_sqr_func_t; 0usize];
    pub static flint_mpn_mulhigh_normalised_func_tab: [flint_mpn_mulhigh_normalised_func_t; 0usize];
    pub fn _flint_mpn_mulhigh_basecase(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_limb_t;
    pub fn _flint_mpn_sqrhigh_basecase_even(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
    ) -> mp_limb_t;
    pub fn _flint_mpn_sqrhigh_basecase_odd(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
    ) -> mp_limb_t;
    pub fn flint_mpn_sumdiff_n(
        s: mp_ptr,
        d: mp_ptr,
        x: mp_srcptr,
        y: mp_srcptr,
        n: mp_size_t,
    ) -> mp_limb_t;
    pub fn flint_mpn_debug(x: mp_srcptr, xsize: mp_size_t);
    pub fn flint_mpn_remove_2exp(x: mp_ptr, xsize: mp_size_t, bits: *mut mp_limb_t) -> mp_size_t;
    pub fn flint_mpn_remove_power_ascending(
        x: mp_ptr,
        xsize: mp_size_t,
        p: mp_ptr,
        psize: mp_size_t,
        exp: *mut mp_limb_t,
    ) -> mp_size_t;
    pub fn flint_mpn_factor_trial(
        x: mp_srcptr,
        xsize: mp_size_t,
        start: mp_limb_signed_t,
        stop: mp_limb_signed_t,
    ) -> ::std::os::raw::c_int;
    pub fn flint_mpn_factor_trial_tree(
        factors: *mut mp_limb_signed_t,
        x: mp_srcptr,
        xsize: mp_size_t,
        num_primes: mp_limb_signed_t,
    ) -> ::std::os::raw::c_int;
    pub fn flint_mpn_fmms1(
        y: mp_ptr,
        a1: mp_limb_t,
        x1: mp_srcptr,
        a2: mp_limb_t,
        x2: mp_srcptr,
        n: mp_size_t,
    ) -> mp_size_t;
    pub fn flint_mpn_divides(
        q: mp_ptr,
        array1: mp_srcptr,
        limbs1: mp_size_t,
        arrayg: mp_srcptr,
        limbsg: mp_size_t,
        temp: mp_ptr,
    ) -> ::std::os::raw::c_int;
    pub fn flint_mpn_gcd_full2(
        arrayg: mp_ptr,
        array1: mp_srcptr,
        limbs1: mp_size_t,
        array2: mp_srcptr,
        limbs2: mp_size_t,
        temp: mp_ptr,
    ) -> mp_size_t;
    pub fn flint_mpn_gcd_full(
        arrayg: mp_ptr,
        array1: mp_srcptr,
        limbs1: mp_size_t,
        array2: mp_srcptr,
        limbs2: mp_size_t,
    ) -> mp_size_t;
    pub fn flint_mpn_preinv1(d: mp_limb_t, d2: mp_limb_t) -> mp_limb_t;
    pub fn flint_mpn_divrem_preinv1(
        q: mp_ptr,
        a: mp_ptr,
        m: mp_size_t,
        b: mp_srcptr,
        n: mp_size_t,
        dinv: mp_limb_t,
    ) -> mp_limb_t;
    pub fn flint_mpn_mulmod_preinv1(
        r: mp_ptr,
        a: mp_srcptr,
        b: mp_srcptr,
        n: mp_size_t,
        d: mp_srcptr,
        dinv: mp_limb_t,
        norm: mp_limb_t,
    );
    pub fn flint_mpn_preinvn(dinv: mp_ptr, d: mp_srcptr, n: mp_size_t);
    pub fn flint_mpn_mod_preinvn(
        r: mp_ptr,
        a: mp_srcptr,
        m: mp_size_t,
        d: mp_srcptr,
        n: mp_size_t,
        dinv: mp_srcptr,
    );
    pub fn flint_mpn_divrem_preinvn(
        q: mp_ptr,
        r: mp_ptr,
        a: mp_srcptr,
        m: mp_size_t,
        d: mp_srcptr,
        n: mp_size_t,
        dinv: mp_srcptr,
    ) -> mp_limb_t;
    pub fn flint_mpn_mulmod_preinvn(
        r: mp_ptr,
        a: mp_srcptr,
        b: mp_srcptr,
        n: mp_size_t,
        d: mp_srcptr,
        dinv: mp_srcptr,
        norm: mp_limb_t,
    );
    pub fn flint_mpn_mulmod_2expp1_basecase(
        xp: mp_ptr,
        yp: mp_srcptr,
        zp: mp_srcptr,
        c: ::std::os::raw::c_int,
        b: mp_limb_t,
        tp: mp_ptr,
    ) -> ::std::os::raw::c_int;
}
