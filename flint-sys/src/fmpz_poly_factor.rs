/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct zassenhaus_prune_struct {
    pub deg: mp_limb_signed_t,
    pub pos_degs: *mut libc::c_uchar,
    pub new_length: mp_limb_signed_t,
    pub new_total: mp_limb_signed_t,
    pub new_degs: *mut mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zassenhaus_prune_struct"][::std::mem::size_of::<zassenhaus_prune_struct>() - 48usize];
    ["Alignment of zassenhaus_prune_struct"]
        [::std::mem::align_of::<zassenhaus_prune_struct>() - 8usize];
    ["Offset of field: zassenhaus_prune_struct::deg"]
        [::std::mem::offset_of!(zassenhaus_prune_struct, deg) - 0usize];
    ["Offset of field: zassenhaus_prune_struct::pos_degs"]
        [::std::mem::offset_of!(zassenhaus_prune_struct, pos_degs) - 8usize];
    ["Offset of field: zassenhaus_prune_struct::new_length"]
        [::std::mem::offset_of!(zassenhaus_prune_struct, new_length) - 16usize];
    ["Offset of field: zassenhaus_prune_struct::new_total"]
        [::std::mem::offset_of!(zassenhaus_prune_struct, new_total) - 24usize];
    ["Offset of field: zassenhaus_prune_struct::new_degs"]
        [::std::mem::offset_of!(zassenhaus_prune_struct, new_degs) - 32usize];
    ["Offset of field: zassenhaus_prune_struct::alloc"]
        [::std::mem::offset_of!(zassenhaus_prune_struct, alloc) - 40usize];
};
impl Default for zassenhaus_prune_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type zassenhaus_prune_t = [zassenhaus_prune_struct; 1usize];
extern "C" {
    pub fn fmpz_poly_factor_init(fac: *mut fmpz_poly_factor_struct);
    pub fn fmpz_poly_factor_init2(fac: *mut fmpz_poly_factor_struct, alloc: mp_limb_signed_t);
    pub fn fmpz_poly_factor_realloc(fac: *mut fmpz_poly_factor_struct, alloc: mp_limb_signed_t);
    pub fn fmpz_poly_factor_fit_length(fac: *mut fmpz_poly_factor_struct, len: mp_limb_signed_t);
    pub fn fmpz_poly_factor_clear(fac: *mut fmpz_poly_factor_struct);
    pub fn fmpz_poly_factor_set(
        res: *mut fmpz_poly_factor_struct,
        fac: *const fmpz_poly_factor_struct,
    );
    pub fn fmpz_poly_factor_insert(
        fac: *mut fmpz_poly_factor_struct,
        p: *const fmpz_poly_struct,
        exp: mp_limb_signed_t,
    );
    pub fn fmpz_poly_factor_concat(
        res: *mut fmpz_poly_factor_struct,
        fac: *const fmpz_poly_factor_struct,
    );
    pub fn fmpz_poly_factor_print(fac: *const fmpz_poly_factor_struct);
    pub fn fmpz_poly_factor_zassenhaus_recombination(
        final_fac: *mut fmpz_poly_factor_struct,
        lifted_fac: *const fmpz_poly_factor_struct,
        F: *const fmpz_poly_struct,
        P: *const fmpz,
        exp: mp_limb_signed_t,
    );
    pub fn fmpz_poly_factor_squarefree(
        fac: *mut fmpz_poly_factor_struct,
        F: *const fmpz_poly_struct,
    );
    pub fn fmpz_poly_factor_mignotte(B: *mut fmpz, f: *const fmpz_poly_struct);
    pub fn _fmpz_poly_factor_zassenhaus(
        final_fac: *mut fmpz_poly_factor_struct,
        exp: mp_limb_signed_t,
        f: *const fmpz_poly_struct,
        cutoff: mp_limb_signed_t,
        use_van_hoeij: libc::c_int,
    );
    pub fn fmpz_poly_factor_zassenhaus(
        fac: *mut fmpz_poly_factor_struct,
        G: *const fmpz_poly_struct,
    );
    pub fn _fmpz_poly_factor_quadratic(
        fac: *mut fmpz_poly_factor_struct,
        f: *const fmpz_poly_struct,
        exp: mp_limb_signed_t,
    );
    pub fn _fmpz_poly_factor_cubic(
        fac: *mut fmpz_poly_factor_struct,
        f: *const fmpz_poly_struct,
        exp: mp_limb_signed_t,
    );
    pub fn _fmpz_poly_factor_CLD_mat(
        res: *mut fmpz_mat_struct,
        f: *const fmpz_poly_struct,
        lifted_fac: *mut fmpz_poly_factor_struct,
        P: *mut fmpz,
        k: mp_limb_t,
    ) -> mp_limb_signed_t;
    pub fn fmpz_poly_factor_van_hoeij_check_if_solved(
        M: *mut fmpz_mat_struct,
        final_fac: *mut fmpz_poly_factor_struct,
        lifted_fac: *mut fmpz_poly_factor_struct,
        f: *const fmpz_poly_struct,
        P: *mut fmpz,
        exp: mp_limb_signed_t,
        lc: *mut fmpz,
    ) -> libc::c_int;
    pub fn fmpz_poly_factor_van_hoeij(
        final_fac: *mut fmpz_poly_factor_struct,
        fac: *const nmod_poly_factor_struct,
        f: *const fmpz_poly_struct,
        exp: mp_limb_signed_t,
        p: mp_limb_t,
    );
    pub fn fmpz_poly_factor(fac: *mut fmpz_poly_factor_struct, G: *const fmpz_poly_struct);
    pub fn fmpz_poly_factor_get_fmpz_poly(
        z: *mut fmpz_poly_struct,
        F: *const fmpz_poly_factor_struct,
        i: mp_limb_signed_t,
    );
    pub fn fmpz_poly_factor_get_fmpz(z: *mut fmpz, F: *const fmpz_poly_factor_struct);
    pub fn zassenhaus_subset_first(
        s: *mut mp_limb_signed_t,
        r: mp_limb_signed_t,
        m: mp_limb_signed_t,
    );
    pub fn zassenhaus_subset_next(s: *mut mp_limb_signed_t, r: mp_limb_signed_t) -> libc::c_int;
    pub fn zassenhaus_subset_next_disjoint(
        s: *mut mp_limb_signed_t,
        r: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    #[link_name = "zassenhaus_prune_init__extern"]
    pub fn zassenhaus_prune_init(Z: *mut zassenhaus_prune_struct);
    pub fn zassenhaus_prune_clear(Z: *mut zassenhaus_prune_struct);
    pub fn zassenhaus_prune_set_degree(Z: *mut zassenhaus_prune_struct, d: mp_limb_signed_t);
    #[link_name = "zassenhaus_prune_start_add_factors__extern"]
    pub fn zassenhaus_prune_start_add_factors(Z: *mut zassenhaus_prune_struct);
    pub fn zassenhaus_prune_add_factor(
        Z: *mut zassenhaus_prune_struct,
        deg: mp_limb_signed_t,
        exp: mp_limb_signed_t,
    );
    pub fn zassenhaus_prune_end_add_factors(Z: *mut zassenhaus_prune_struct);
    pub fn zassenhaus_prune_must_be_irreducible(Z: *const zassenhaus_prune_struct) -> libc::c_int;
    #[link_name = "zassenhaus_prune_degree_is_possible__extern"]
    pub fn zassenhaus_prune_degree_is_possible(
        Z: *const zassenhaus_prune_struct,
        d: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn fmpz_poly_factor_zassenhaus_recombination_with_prune(
        final_fac: *mut fmpz_poly_factor_struct,
        lifted_fac: *const fmpz_poly_factor_struct,
        F: *const fmpz_poly_struct,
        P: *const fmpz,
        exp: mp_limb_signed_t,
        Z: *const zassenhaus_prune_struct,
    );
}
