/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct psl2z_struct {
    pub a: fmpz,
    pub b: fmpz,
    pub c: fmpz,
    pub d: fmpz,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of psl2z_struct"][::std::mem::size_of::<psl2z_struct>() - 32usize];
    ["Alignment of psl2z_struct"][::std::mem::align_of::<psl2z_struct>() - 8usize];
    ["Offset of field: psl2z_struct::a"][::std::mem::offset_of!(psl2z_struct, a) - 0usize];
    ["Offset of field: psl2z_struct::b"][::std::mem::offset_of!(psl2z_struct, b) - 8usize];
    ["Offset of field: psl2z_struct::c"][::std::mem::offset_of!(psl2z_struct, c) - 16usize];
    ["Offset of field: psl2z_struct::d"][::std::mem::offset_of!(psl2z_struct, d) - 24usize];
};
impl Default for psl2z_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type psl2z_t = [psl2z_struct; 1usize];
extern "C" {
    #[link_name = "psl2z_init__extern"]
    pub fn psl2z_init(g: *mut psl2z_struct);
    #[link_name = "psl2z_clear__extern"]
    pub fn psl2z_clear(g: *mut psl2z_struct);
    #[link_name = "psl2z_swap__extern"]
    pub fn psl2z_swap(f: *mut psl2z_struct, g: *mut psl2z_struct);
    #[link_name = "psl2z_set__extern"]
    pub fn psl2z_set(h: *mut psl2z_struct, g: *const psl2z_struct);
    #[link_name = "psl2z_one__extern"]
    pub fn psl2z_one(g: *mut psl2z_struct);
    pub fn psl2z_fprint(file: *mut FILE, g: *const psl2z_struct);
    pub fn psl2z_print(g: *const psl2z_struct);
    #[link_name = "psl2z_equal__extern"]
    pub fn psl2z_equal(f: *const psl2z_struct, g: *const psl2z_struct) -> libc::c_int;
    pub fn psl2z_mul(h: *mut psl2z_struct, f: *const psl2z_struct, g: *const psl2z_struct);
    pub fn psl2z_inv(h: *mut psl2z_struct, g: *const psl2z_struct);
    pub fn psl2z_is_one(g: *const psl2z_struct) -> libc::c_int;
    pub fn psl2z_is_correct(g: *const psl2z_struct) -> libc::c_int;
    pub fn psl2z_randtest(g: *mut psl2z_struct, state: *mut flint_rand_s, bits: mp_limb_signed_t);
    pub fn acb_modular_transform(
        w: *mut acb_struct,
        g: *const psl2z_struct,
        z: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_fundamental_domain_approx_d(
        g: *mut psl2z_struct,
        x: f64,
        y: f64,
        one_minus_eps: f64,
    );
    pub fn acb_modular_fundamental_domain_approx_arf(
        g: *mut psl2z_struct,
        xx: *const arf_struct,
        yy: *const arf_struct,
        one_minus_eps: *const arf_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_fundamental_domain_approx(
        w: *mut acb_struct,
        g: *mut psl2z_struct,
        z: *const acb_struct,
        one_minus_eps: *const arf_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_is_in_fundamental_domain(
        z: *const acb_struct,
        tol: *const arf_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn acb_modular_addseq_theta(
        exponents: *mut mp_limb_signed_t,
        aindex: *mut mp_limb_signed_t,
        bindex: *mut mp_limb_signed_t,
        num: mp_limb_signed_t,
    );
    pub fn acb_modular_addseq_eta(
        exponents: *mut mp_limb_signed_t,
        aindex: *mut mp_limb_signed_t,
        bindex: *mut mp_limb_signed_t,
        num: mp_limb_signed_t,
    );
    pub fn acb_modular_fill_addseq(tab: *mut mp_limb_signed_t, len: mp_limb_signed_t);
    pub fn acb_modular_theta_transform(
        R: *mut libc::c_int,
        S: *mut libc::c_int,
        C: *mut libc::c_int,
        g: *const psl2z_struct,
    );
    pub fn acb_modular_theta_const_sum(
        theta2: *mut acb_struct,
        theta3: *mut acb_struct,
        theta4: *mut acb_struct,
        q: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta_const_sum_basecase(
        theta2: *mut acb_struct,
        theta3: *mut acb_struct,
        theta4: *mut acb_struct,
        q: *const acb_struct,
        N: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta_const_sum_rs(
        theta2: *mut acb_struct,
        theta3: *mut acb_struct,
        theta4: *mut acb_struct,
        q: *const acb_struct,
        N: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta_sum(
        theta1: acb_ptr,
        theta2: acb_ptr,
        theta3: acb_ptr,
        theta4: acb_ptr,
        w: *const acb_struct,
        w_is_unit: libc::c_int,
        q: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta_notransform(
        theta1: *mut acb_struct,
        theta2: *mut acb_struct,
        theta3: *mut acb_struct,
        theta4: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta(
        theta1: *mut acb_struct,
        theta2: *mut acb_struct,
        theta3: *mut acb_struct,
        theta4: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta_jet_notransform(
        theta1: acb_ptr,
        theta2: acb_ptr,
        theta3: acb_ptr,
        theta4: acb_ptr,
        z: *const acb_struct,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta_jet(
        theta1: acb_ptr,
        theta2: acb_ptr,
        theta3: acb_ptr,
        theta4: acb_ptr,
        z: *const acb_struct,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn _acb_modular_theta_series(
        theta1: acb_ptr,
        theta2: acb_ptr,
        theta3: acb_ptr,
        theta4: acb_ptr,
        z: acb_srcptr,
        zlen: mp_limb_signed_t,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_theta_series(
        theta1: *mut acb_poly_struct,
        theta2: *mut acb_poly_struct,
        theta3: *mut acb_poly_struct,
        theta4: *mut acb_poly_struct,
        z: *const acb_poly_struct,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_j(z: *mut acb_struct, tau: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_modular_epsilon_arg(g: *const psl2z_struct) -> libc::c_int;
    pub fn acb_modular_eta_sum(eta: *mut acb_struct, q: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_modular_eta(z: *mut acb_struct, tau: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_modular_lambda(r: *mut acb_struct, tau: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_modular_delta(r: *mut acb_struct, tau: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_modular_eisenstein(
        r: acb_ptr,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_elliptic_p(
        r: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_elliptic_p_zpx(
        r: acb_ptr,
        z: *const acb_struct,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_elliptic_k(k: *mut acb_struct, m: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_modular_elliptic_k_cpx(
        w: acb_ptr,
        m: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_elliptic_e(
        res: *mut acb_struct,
        m: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_modular_hilbert_class_poly(res: *mut fmpz_poly_struct, D: mp_limb_signed_t);
    pub fn _acb_modular_mul(
        z: *mut acb_struct,
        tmp1: *mut acb_struct,
        tmp2: *mut acb_struct,
        x: *const acb_struct,
        y: *const acb_struct,
        wprec: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
}
