/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct fmpz_mod_bpoly_struct {
    pub coeffs: *mut fmpz_mod_poly_struct,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_bpoly_struct"][::std::mem::size_of::<fmpz_mod_bpoly_struct>() - 24usize];
    ["Alignment of fmpz_mod_bpoly_struct"]
        [::std::mem::align_of::<fmpz_mod_bpoly_struct>() - 8usize];
    ["Offset of field: fmpz_mod_bpoly_struct::coeffs"]
        [::std::mem::offset_of!(fmpz_mod_bpoly_struct, coeffs) - 0usize];
    ["Offset of field: fmpz_mod_bpoly_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_bpoly_struct, alloc) - 8usize];
    ["Offset of field: fmpz_mod_bpoly_struct::length"]
        [::std::mem::offset_of!(fmpz_mod_bpoly_struct, length) - 16usize];
};
impl Default for fmpz_mod_bpoly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_bpoly_t = [fmpz_mod_bpoly_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_tpoly_struct {
    pub coeffs: *mut fmpz_mod_bpoly_struct,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_tpoly_struct"][::std::mem::size_of::<fmpz_mod_tpoly_struct>() - 24usize];
    ["Alignment of fmpz_mod_tpoly_struct"]
        [::std::mem::align_of::<fmpz_mod_tpoly_struct>() - 8usize];
    ["Offset of field: fmpz_mod_tpoly_struct::coeffs"]
        [::std::mem::offset_of!(fmpz_mod_tpoly_struct, coeffs) - 0usize];
    ["Offset of field: fmpz_mod_tpoly_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_tpoly_struct, alloc) - 8usize];
    ["Offset of field: fmpz_mod_tpoly_struct::length"]
        [::std::mem::offset_of!(fmpz_mod_tpoly_struct, length) - 16usize];
};
impl Default for fmpz_mod_tpoly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_tpoly_t = [fmpz_mod_tpoly_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_polyu_struct {
    pub exps: *mut mp_limb_t,
    pub coeffs: *mut fmpz,
    pub length: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_polyu_struct"][::std::mem::size_of::<fmpz_mod_polyu_struct>() - 32usize];
    ["Alignment of fmpz_mod_polyu_struct"]
        [::std::mem::align_of::<fmpz_mod_polyu_struct>() - 8usize];
    ["Offset of field: fmpz_mod_polyu_struct::exps"]
        [::std::mem::offset_of!(fmpz_mod_polyu_struct, exps) - 0usize];
    ["Offset of field: fmpz_mod_polyu_struct::coeffs"]
        [::std::mem::offset_of!(fmpz_mod_polyu_struct, coeffs) - 8usize];
    ["Offset of field: fmpz_mod_polyu_struct::length"]
        [::std::mem::offset_of!(fmpz_mod_polyu_struct, length) - 16usize];
    ["Offset of field: fmpz_mod_polyu_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_polyu_struct, alloc) - 24usize];
};
impl Default for fmpz_mod_polyu_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_polyu_t = [fmpz_mod_polyu_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_polyun_struct {
    pub coeffs: *mut fmpz_mod_poly_struct,
    pub exps: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_polyun_struct"][::std::mem::size_of::<fmpz_mod_polyun_struct>() - 32usize];
    ["Alignment of fmpz_mod_polyun_struct"]
        [::std::mem::align_of::<fmpz_mod_polyun_struct>() - 8usize];
    ["Offset of field: fmpz_mod_polyun_struct::coeffs"]
        [::std::mem::offset_of!(fmpz_mod_polyun_struct, coeffs) - 0usize];
    ["Offset of field: fmpz_mod_polyun_struct::exps"]
        [::std::mem::offset_of!(fmpz_mod_polyun_struct, exps) - 8usize];
    ["Offset of field: fmpz_mod_polyun_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_polyun_struct, alloc) - 16usize];
    ["Offset of field: fmpz_mod_polyun_struct::length"]
        [::std::mem::offset_of!(fmpz_mod_polyun_struct, length) - 24usize];
};
impl Default for fmpz_mod_polyun_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_polyun_t = [fmpz_mod_polyun_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_mpolyu_struct {
    pub coeffs: *mut fmpz_mod_mpoly_struct,
    pub exps: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_mpolyu_struct"][::std::mem::size_of::<fmpz_mod_mpolyu_struct>() - 40usize];
    ["Alignment of fmpz_mod_mpolyu_struct"]
        [::std::mem::align_of::<fmpz_mod_mpolyu_struct>() - 8usize];
    ["Offset of field: fmpz_mod_mpolyu_struct::coeffs"]
        [::std::mem::offset_of!(fmpz_mod_mpolyu_struct, coeffs) - 0usize];
    ["Offset of field: fmpz_mod_mpolyu_struct::exps"]
        [::std::mem::offset_of!(fmpz_mod_mpolyu_struct, exps) - 8usize];
    ["Offset of field: fmpz_mod_mpolyu_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_mpolyu_struct, alloc) - 16usize];
    ["Offset of field: fmpz_mod_mpolyu_struct::length"]
        [::std::mem::offset_of!(fmpz_mod_mpolyu_struct, length) - 24usize];
    ["Offset of field: fmpz_mod_mpolyu_struct::bits"]
        [::std::mem::offset_of!(fmpz_mod_mpolyu_struct, bits) - 32usize];
};
impl Default for fmpz_mod_mpolyu_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_mpolyu_t = [fmpz_mod_mpolyu_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_mpolyn_struct {
    pub coeffs: *mut fmpz_mod_poly_struct,
    pub exps: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_mpolyn_struct"][::std::mem::size_of::<fmpz_mod_mpolyn_struct>() - 40usize];
    ["Alignment of fmpz_mod_mpolyn_struct"]
        [::std::mem::align_of::<fmpz_mod_mpolyn_struct>() - 8usize];
    ["Offset of field: fmpz_mod_mpolyn_struct::coeffs"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_struct, coeffs) - 0usize];
    ["Offset of field: fmpz_mod_mpolyn_struct::exps"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_struct, exps) - 8usize];
    ["Offset of field: fmpz_mod_mpolyn_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_struct, alloc) - 16usize];
    ["Offset of field: fmpz_mod_mpolyn_struct::length"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_struct, length) - 24usize];
    ["Offset of field: fmpz_mod_mpolyn_struct::bits"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_struct, bits) - 32usize];
};
impl Default for fmpz_mod_mpolyn_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_mpolyn_t = [fmpz_mod_mpolyn_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_poly_stack_struct {
    pub array: *mut *mut fmpz_mod_poly_struct,
    pub alloc: mp_limb_signed_t,
    pub top: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_poly_stack_struct"]
        [::std::mem::size_of::<fmpz_mod_poly_stack_struct>() - 24usize];
    ["Alignment of fmpz_mod_poly_stack_struct"]
        [::std::mem::align_of::<fmpz_mod_poly_stack_struct>() - 8usize];
    ["Offset of field: fmpz_mod_poly_stack_struct::array"]
        [::std::mem::offset_of!(fmpz_mod_poly_stack_struct, array) - 0usize];
    ["Offset of field: fmpz_mod_poly_stack_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_poly_stack_struct, alloc) - 8usize];
    ["Offset of field: fmpz_mod_poly_stack_struct::top"]
        [::std::mem::offset_of!(fmpz_mod_poly_stack_struct, top) - 16usize];
};
impl Default for fmpz_mod_poly_stack_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_poly_stack_t = [fmpz_mod_poly_stack_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_bpoly_stack_struct {
    pub array: *mut *mut fmpz_mod_bpoly_struct,
    pub alloc: mp_limb_signed_t,
    pub top: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_bpoly_stack_struct"]
        [::std::mem::size_of::<fmpz_mod_bpoly_stack_struct>() - 24usize];
    ["Alignment of fmpz_mod_bpoly_stack_struct"]
        [::std::mem::align_of::<fmpz_mod_bpoly_stack_struct>() - 8usize];
    ["Offset of field: fmpz_mod_bpoly_stack_struct::array"]
        [::std::mem::offset_of!(fmpz_mod_bpoly_stack_struct, array) - 0usize];
    ["Offset of field: fmpz_mod_bpoly_stack_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_bpoly_stack_struct, alloc) - 8usize];
    ["Offset of field: fmpz_mod_bpoly_stack_struct::top"]
        [::std::mem::offset_of!(fmpz_mod_bpoly_stack_struct, top) - 16usize];
};
impl Default for fmpz_mod_bpoly_stack_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_bpoly_stack_t = [fmpz_mod_bpoly_stack_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_polyun_stack_struct {
    pub array: *mut *mut fmpz_mod_polyun_struct,
    pub alloc: mp_limb_signed_t,
    pub top: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_polyun_stack_struct"]
        [::std::mem::size_of::<fmpz_mod_polyun_stack_struct>() - 24usize];
    ["Alignment of fmpz_mod_polyun_stack_struct"]
        [::std::mem::align_of::<fmpz_mod_polyun_stack_struct>() - 8usize];
    ["Offset of field: fmpz_mod_polyun_stack_struct::array"]
        [::std::mem::offset_of!(fmpz_mod_polyun_stack_struct, array) - 0usize];
    ["Offset of field: fmpz_mod_polyun_stack_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_polyun_stack_struct, alloc) - 8usize];
    ["Offset of field: fmpz_mod_polyun_stack_struct::top"]
        [::std::mem::offset_of!(fmpz_mod_polyun_stack_struct, top) - 16usize];
};
impl Default for fmpz_mod_polyun_stack_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_polyun_stack_t = [fmpz_mod_polyun_stack_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_mpolyn_stack_struct {
    pub array: *mut *mut fmpz_mod_mpolyn_struct,
    pub alloc: mp_limb_signed_t,
    pub top: mp_limb_signed_t,
    pub bits: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_mpolyn_stack_struct"]
        [::std::mem::size_of::<fmpz_mod_mpolyn_stack_struct>() - 32usize];
    ["Alignment of fmpz_mod_mpolyn_stack_struct"]
        [::std::mem::align_of::<fmpz_mod_mpolyn_stack_struct>() - 8usize];
    ["Offset of field: fmpz_mod_mpolyn_stack_struct::array"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_stack_struct, array) - 0usize];
    ["Offset of field: fmpz_mod_mpolyn_stack_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_stack_struct, alloc) - 8usize];
    ["Offset of field: fmpz_mod_mpolyn_stack_struct::top"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_stack_struct, top) - 16usize];
    ["Offset of field: fmpz_mod_mpolyn_stack_struct::bits"]
        [::std::mem::offset_of!(fmpz_mod_mpolyn_stack_struct, bits) - 24usize];
};
impl Default for fmpz_mod_mpolyn_stack_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_mpolyn_stack_t = [fmpz_mod_mpolyn_stack_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_poly_bpoly_stack_struct {
    pub poly_stack: fmpz_mod_poly_stack_t,
    pub bpoly_stack: fmpz_mod_bpoly_stack_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_poly_bpoly_stack_struct"]
        [::std::mem::size_of::<fmpz_mod_poly_bpoly_stack_struct>() - 48usize];
    ["Alignment of fmpz_mod_poly_bpoly_stack_struct"]
        [::std::mem::align_of::<fmpz_mod_poly_bpoly_stack_struct>() - 8usize];
    ["Offset of field: fmpz_mod_poly_bpoly_stack_struct::poly_stack"]
        [::std::mem::offset_of!(fmpz_mod_poly_bpoly_stack_struct, poly_stack) - 0usize];
    ["Offset of field: fmpz_mod_poly_bpoly_stack_struct::bpoly_stack"]
        [::std::mem::offset_of!(fmpz_mod_poly_bpoly_stack_struct, bpoly_stack) - 24usize];
};
impl Default for fmpz_mod_poly_bpoly_stack_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_poly_bpoly_stack_t = [fmpz_mod_poly_bpoly_stack_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_poly_polyun_stack_struct {
    pub poly_stack: fmpz_mod_poly_stack_t,
    pub polyun_stack: fmpz_mod_polyun_stack_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_poly_polyun_stack_struct"]
        [::std::mem::size_of::<fmpz_mod_poly_polyun_stack_struct>() - 48usize];
    ["Alignment of fmpz_mod_poly_polyun_stack_struct"]
        [::std::mem::align_of::<fmpz_mod_poly_polyun_stack_struct>() - 8usize];
    ["Offset of field: fmpz_mod_poly_polyun_stack_struct::poly_stack"]
        [::std::mem::offset_of!(fmpz_mod_poly_polyun_stack_struct, poly_stack) - 0usize];
    ["Offset of field: fmpz_mod_poly_polyun_stack_struct::polyun_stack"]
        [::std::mem::offset_of!(fmpz_mod_poly_polyun_stack_struct, polyun_stack) - 24usize];
};
impl Default for fmpz_mod_poly_polyun_stack_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_poly_polyun_stack_t = [fmpz_mod_poly_polyun_stack_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_poly_polyun_mpolyn_stack_struct {
    pub poly_stack: fmpz_mod_poly_stack_t,
    pub polyun_stack: fmpz_mod_polyun_stack_t,
    pub mpolyn_stack: fmpz_mod_mpolyn_stack_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_poly_polyun_mpolyn_stack_struct"]
        [::std::mem::size_of::<fmpz_mod_poly_polyun_mpolyn_stack_struct>() - 80usize];
    ["Alignment of fmpz_mod_poly_polyun_mpolyn_stack_struct"]
        [::std::mem::align_of::<fmpz_mod_poly_polyun_mpolyn_stack_struct>() - 8usize];
    ["Offset of field: fmpz_mod_poly_polyun_mpolyn_stack_struct::poly_stack"]
        [::std::mem::offset_of!(fmpz_mod_poly_polyun_mpolyn_stack_struct, poly_stack) - 0usize];
    ["Offset of field: fmpz_mod_poly_polyun_mpolyn_stack_struct::polyun_stack"]
        [::std::mem::offset_of!(fmpz_mod_poly_polyun_mpolyn_stack_struct, polyun_stack) - 24usize];
    ["Offset of field: fmpz_mod_poly_polyun_mpolyn_stack_struct::mpolyn_stack"]
        [::std::mem::offset_of!(fmpz_mod_poly_polyun_mpolyn_stack_struct, mpolyn_stack) - 48usize];
};
impl Default for fmpz_mod_poly_polyun_mpolyn_stack_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_poly_polyun_mpolyn_stack_t = [fmpz_mod_poly_polyun_mpolyn_stack_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_mpolyv_struct {
    pub coeffs: *mut fmpz_mod_mpoly_struct,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_mpolyv_struct"][::std::mem::size_of::<fmpz_mod_mpolyv_struct>() - 24usize];
    ["Alignment of fmpz_mod_mpolyv_struct"]
        [::std::mem::align_of::<fmpz_mod_mpolyv_struct>() - 8usize];
    ["Offset of field: fmpz_mod_mpolyv_struct::coeffs"]
        [::std::mem::offset_of!(fmpz_mod_mpolyv_struct, coeffs) - 0usize];
    ["Offset of field: fmpz_mod_mpolyv_struct::alloc"]
        [::std::mem::offset_of!(fmpz_mod_mpolyv_struct, alloc) - 8usize];
    ["Offset of field: fmpz_mod_mpolyv_struct::length"]
        [::std::mem::offset_of!(fmpz_mod_mpolyv_struct, length) - 16usize];
};
impl Default for fmpz_mod_mpolyv_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_mpolyv_t = [fmpz_mod_mpolyv_struct; 1usize];
#[repr(C)]
pub struct fmpz_mod_mpoly_pfrac_struct {
    pub bits: mp_limb_t,
    pub w: mp_limb_signed_t,
    pub r: mp_limb_signed_t,
    pub inv_prod_dbetas: *mut fmpz_mod_poly_struct,
    pub inv_prod_dbetas_mvar: *mut fmpz_mod_mpoly_struct,
    pub dbetas: *mut fmpz_mod_poly_struct,
    pub dbetas_mvar: *mut fmpz_mod_mpoly_struct,
    pub prod_mbetas: *mut fmpz_mod_mpoly_struct,
    pub prod_mbetas_coeffs: *mut fmpz_mod_mpolyv_struct,
    pub mbetas: *mut fmpz_mod_mpoly_struct,
    pub deltas: *mut fmpz_mod_mpoly_struct,
    pub xalpha: *mut fmpz_mod_mpoly_struct,
    pub q: *mut fmpz_mod_mpoly_struct,
    pub G: *mut fmpz_mod_mpoly_geobucket_struct,
    pub qt: *mut fmpz_mod_mpoly_struct,
    pub newt: *mut fmpz_mod_mpoly_struct,
    pub delta_coeffs: *mut fmpz_mod_mpolyv_struct,
    pub T: fmpz_mod_mpoly_t,
    pub Q: fmpz_mod_mpoly_t,
    pub R: fmpz_mod_mpoly_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpz_mod_mpoly_pfrac_struct"]
        [::std::mem::size_of::<fmpz_mod_mpoly_pfrac_struct>() - 280usize];
    ["Alignment of fmpz_mod_mpoly_pfrac_struct"]
        [::std::mem::align_of::<fmpz_mod_mpoly_pfrac_struct>() - 8usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::bits"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, bits) - 0usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::w"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, w) - 8usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::r"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, r) - 16usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::inv_prod_dbetas"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, inv_prod_dbetas) - 24usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::inv_prod_dbetas_mvar"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, inv_prod_dbetas_mvar) - 32usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::dbetas"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, dbetas) - 40usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::dbetas_mvar"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, dbetas_mvar) - 48usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::prod_mbetas"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, prod_mbetas) - 56usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::prod_mbetas_coeffs"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, prod_mbetas_coeffs) - 64usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::mbetas"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, mbetas) - 72usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::deltas"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, deltas) - 80usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::xalpha"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, xalpha) - 88usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::q"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, q) - 96usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::G"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, G) - 104usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::qt"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, qt) - 112usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::newt"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, newt) - 120usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::delta_coeffs"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, delta_coeffs) - 128usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::T"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, T) - 136usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::Q"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, Q) - 184usize];
    ["Offset of field: fmpz_mod_mpoly_pfrac_struct::R"]
        [::std::mem::offset_of!(fmpz_mod_mpoly_pfrac_struct, R) - 232usize];
};
impl Default for fmpz_mod_mpoly_pfrac_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz_mod_mpoly_pfrac_t = [fmpz_mod_mpoly_pfrac_struct; 1usize];
extern "C" {
    #[link_name = "fmpz_mod_mpoly_factor_init__extern"]
    pub fn fmpz_mod_mpoly_factor_init(
        f: *mut fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_init2(
        f: *mut fmpz_mod_mpoly_factor_struct,
        alloc: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_realloc(
        f: *mut fmpz_mod_mpoly_factor_struct,
        alloc: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_fit_length(
        f: *mut fmpz_mod_mpoly_factor_struct,
        len: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_clear(
        f: *mut fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpoly_factor_length__extern"]
    pub fn fmpz_mod_mpoly_factor_length(
        f: *const fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "fmpz_mod_mpoly_factor_get_constant_fmpz__extern"]
    pub fn fmpz_mod_mpoly_factor_get_constant_fmpz(
        c: *mut fmpz,
        f: *const fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpoly_factor_get_base__extern"]
    pub fn fmpz_mod_mpoly_factor_get_base(
        p: *mut fmpz_mod_mpoly_struct,
        f: *const fmpz_mod_mpoly_factor_struct,
        i: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpoly_factor_swap_base__extern"]
    pub fn fmpz_mod_mpoly_factor_swap_base(
        p: *mut fmpz_mod_mpoly_struct,
        f: *mut fmpz_mod_mpoly_factor_struct,
        i: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpoly_factor_get_exp_si__extern"]
    pub fn fmpz_mod_mpoly_factor_get_exp_si(
        f: *mut fmpz_mod_mpoly_factor_struct,
        i: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "fmpz_mod_mpoly_factor_swap__extern"]
    pub fn fmpz_mod_mpoly_factor_swap(
        f: *mut fmpz_mod_mpoly_factor_struct,
        g: *mut fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_set(
        f: *mut fmpz_mod_mpoly_factor_struct,
        g: *const fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_print_pretty(
        f: *const fmpz_mod_mpoly_factor_struct,
        vars: *mut *const libc::c_char,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_content(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_squarefree(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_sort(
        f: *mut fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_cmp(
        A: *const fmpz_mod_mpoly_factor_struct,
        B: *const fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[doc = "Internal functions (guaranteed to change without notice)"]
    #[link_name = "_fmpz_mod_poly_degree__extern"]
    pub fn _fmpz_mod_poly_degree(a: *const fmpz_mod_poly_struct) -> mp_limb_signed_t;
    pub fn fmpz_mod_poly_scalar_addmul_fmpz_mod(
        A: *mut fmpz_mod_poly_struct,
        B: *const fmpz_mod_poly_struct,
        C: *const fmpz_mod_poly_struct,
        d0: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_poly_addmul_linear(
        A: *mut fmpz_mod_poly_struct,
        B: *const fmpz_mod_poly_struct,
        C: *const fmpz_mod_poly_struct,
        d1: *const fmpz,
        d0: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_poly_shift_left_scalar_addmul_fmpz_mod(
        A: *mut fmpz_mod_poly_struct,
        k: mp_limb_signed_t,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_poly_eval_pow(
        eval: *mut fmpz,
        P: *const fmpz_mod_poly_struct,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_poly_eval2_pow(
        evalp: *mut fmpz,
        evalm: *mut fmpz,
        P: *const fmpz_mod_poly_struct,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_mat_is_reduced(
        N: *const fmpz_mod_mat_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mat_init_nullspace_tr(
        X: *mut fmpz_mod_mat_struct,
        tmp: *mut fmpz_mod_mat_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_factor_separable(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        sep: libc::c_int,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_expand(
        A: *mut fmpz_mod_mpoly_struct,
        f: *const fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fmpz_mod_mpoly_factor_matches__extern"]
    pub fn fmpz_mod_mpoly_factor_matches(
        a: *const fmpz_mod_mpoly_struct,
        f: *const fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fmpz_mod_mpoly_factor_append_fmpz_swap__extern"]
    pub fn fmpz_mod_mpoly_factor_append_fmpz_swap(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *mut fmpz_mod_mpoly_struct,
        e: *const fmpz,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpoly_factor_one__extern"]
    pub fn fmpz_mod_mpoly_factor_one(
        f: *mut fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_get_lead0(
        c: *mut fmpz_mod_mpoly_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_set_lead0(
        A: *mut fmpz_mod_mpoly_struct,
        B: *const fmpz_mod_mpoly_struct,
        c: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_factor_set_nmod_mpoly_factor(
        f: *mut fmpz_mod_mpoly_factor_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        nf: *const nmod_mpoly_factor_struct,
        nctx: *const nmod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_poly_stack_init(S: *mut fmpz_mod_poly_stack_struct);
    pub fn fmpz_mod_poly_stack_clear(S: *mut fmpz_mod_poly_stack_struct);
    pub fn fmpz_mod_poly_stack_fit_request(
        S: *mut fmpz_mod_poly_stack_struct,
        k: mp_limb_signed_t,
    ) -> *mut *mut fmpz_mod_poly_struct;
    #[link_name = "fmpz_mod_poly_stack_request__extern"]
    pub fn fmpz_mod_poly_stack_request(
        S: *mut fmpz_mod_poly_stack_struct,
        k: mp_limb_signed_t,
    ) -> *mut *mut fmpz_mod_poly_struct;
    #[link_name = "fmpz_mod_poly_stack_take_top__extern"]
    pub fn fmpz_mod_poly_stack_take_top(
        S: *mut fmpz_mod_poly_stack_struct,
    ) -> *mut fmpz_mod_poly_struct;
    #[link_name = "fmpz_mod_poly_stack_give_back__extern"]
    pub fn fmpz_mod_poly_stack_give_back(S: *mut fmpz_mod_poly_stack_struct, k: mp_limb_signed_t);
    #[link_name = "fmpz_mod_poly_stack_size__extern"]
    pub fn fmpz_mod_poly_stack_size(S: *const fmpz_mod_poly_stack_struct) -> mp_limb_signed_t;
    pub fn fmpz_mod_bpoly_stack_init(S: *mut fmpz_mod_bpoly_stack_struct);
    pub fn fmpz_mod_bpoly_stack_clear(S: *mut fmpz_mod_bpoly_stack_struct);
    pub fn fmpz_mod_bpoly_stack_fit_request(
        S: *mut fmpz_mod_bpoly_stack_struct,
        k: mp_limb_signed_t,
    ) -> *mut *mut fmpz_mod_bpoly_struct;
    #[link_name = "fmpz_mod_bpoly_stack_request__extern"]
    pub fn fmpz_mod_bpoly_stack_request(
        S: *mut fmpz_mod_bpoly_stack_struct,
        k: mp_limb_signed_t,
    ) -> *mut *mut fmpz_mod_bpoly_struct;
    #[link_name = "fmpz_mod_bpoly_stack_take_top__extern"]
    pub fn fmpz_mod_bpoly_stack_take_top(
        S: *mut fmpz_mod_bpoly_stack_struct,
    ) -> *mut fmpz_mod_bpoly_struct;
    #[link_name = "fmpz_mod_bpoly_stack_give_back__extern"]
    pub fn fmpz_mod_bpoly_stack_give_back(S: *mut fmpz_mod_bpoly_stack_struct, k: mp_limb_signed_t);
    #[link_name = "fmpz_mod_bpoly_stack_size__extern"]
    pub fn fmpz_mod_bpoly_stack_size(S: *const fmpz_mod_bpoly_stack_struct) -> mp_limb_signed_t;
    pub fn fmpz_mod_polyun_stack_init(S: *mut fmpz_mod_polyun_stack_struct);
    pub fn fmpz_mod_polyun_stack_clear(S: *mut fmpz_mod_polyun_stack_struct);
    pub fn fmpz_mod_polyun_stack_fit_request(
        S: *mut fmpz_mod_polyun_stack_struct,
        k: mp_limb_signed_t,
    ) -> *mut *mut fmpz_mod_polyun_struct;
    #[link_name = "fmpz_mod_polyun_stack_request__extern"]
    pub fn fmpz_mod_polyun_stack_request(
        S: *mut fmpz_mod_polyun_stack_struct,
        k: mp_limb_signed_t,
    ) -> *mut *mut fmpz_mod_polyun_struct;
    #[link_name = "fmpz_mod_polyun_stack_take_top__extern"]
    pub fn fmpz_mod_polyun_stack_take_top(
        S: *mut fmpz_mod_polyun_stack_struct,
    ) -> *mut fmpz_mod_polyun_struct;
    #[link_name = "fmpz_mod_polyun_stack_give_back__extern"]
    pub fn fmpz_mod_polyun_stack_give_back(
        S: *mut fmpz_mod_polyun_stack_struct,
        k: mp_limb_signed_t,
    );
    #[link_name = "fmpz_mod_polyun_stack_size__extern"]
    pub fn fmpz_mod_polyun_stack_size(S: *const fmpz_mod_polyun_stack_struct) -> mp_limb_signed_t;
    pub fn fmpz_mod_mpolyn_stack_init(
        S: *mut fmpz_mod_mpolyn_stack_struct,
        bits: mp_limb_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_stack_clear(
        S: *mut fmpz_mod_mpolyn_stack_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_stack_fit_request(
        S: *mut fmpz_mod_mpolyn_stack_struct,
        k: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> *mut *mut fmpz_mod_mpolyn_struct;
    #[link_name = "fmpz_mod_mpolyn_stack_request__extern"]
    pub fn fmpz_mod_mpolyn_stack_request(
        S: *mut fmpz_mod_mpolyn_stack_struct,
        k: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> *mut *mut fmpz_mod_mpolyn_struct;
    #[link_name = "fmpz_mod_mpolyn_stack_take_top__extern"]
    pub fn fmpz_mod_mpolyn_stack_take_top(
        S: *mut fmpz_mod_mpolyn_stack_struct,
    ) -> *mut fmpz_mod_mpolyn_struct;
    #[link_name = "fmpz_mod_mpolyn_stack_give_back__extern"]
    pub fn fmpz_mod_mpolyn_stack_give_back(
        S: *mut fmpz_mod_mpolyn_stack_struct,
        k: mp_limb_signed_t,
    );
    #[link_name = "fmpz_mod_mpolyn_stack_size__extern"]
    pub fn fmpz_mod_mpolyn_stack_size(S: *const fmpz_mod_mpolyn_stack_struct) -> mp_limb_signed_t;
    pub fn _fmpz_mod_poly_vec_max_degree(
        A: *const fmpz_mod_poly_struct,
        Alen: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn _fmpz_mod_poly_vec_content(
        g: *mut fmpz_mod_poly_struct,
        A: *const fmpz_mod_poly_struct,
        Alen: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_poly_vec_remove_content(
        g: *mut fmpz_mod_poly_struct,
        A: *mut fmpz_mod_poly_struct,
        Alen: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_poly_vec_mul_poly(
        A: *mut fmpz_mod_poly_struct,
        Alen: mp_limb_signed_t,
        g: *const fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_poly_vec_divexact_poly(
        A: *mut fmpz_mod_poly_struct,
        Alen: mp_limb_signed_t,
        g: *const fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn _fmpz_mod_poly_vec_mul_fmpz_mod(
        A: *mut fmpz_mod_poly_struct,
        Alen: mp_limb_signed_t,
        g: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_polyu1n_bidegree__extern"]
    pub fn fmpz_mod_polyu1n_bidegree(A: *const fmpz_mod_polyun_struct) -> mp_limb_t;
    #[link_name = "fmpz_mod_polyun_leadcoeff__extern"]
    pub fn fmpz_mod_polyun_leadcoeff(A: *const fmpz_mod_polyun_struct) -> *const fmpz;
    #[link_name = "fmpz_mod_polyun_swap__extern"]
    pub fn fmpz_mod_polyun_swap(A: *mut fmpz_mod_polyun_struct, B: *mut fmpz_mod_polyun_struct);
    pub fn fmpz_mod_polyun_is_canonical(
        A: *const fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fmpz_mod_polyun_init__extern"]
    pub fn fmpz_mod_polyun_init(A: *mut fmpz_mod_polyun_struct, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_polyun_clear(A: *mut fmpz_mod_polyun_struct, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_polyun_realloc(
        A: *mut fmpz_mod_polyun_struct,
        len: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyu2n_print_pretty(
        A: *const fmpz_mod_polyun_struct,
        var0: *const libc::c_char,
        var1: *const libc::c_char,
        varlast: *const libc::c_char,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyun_equal(
        A: *mut fmpz_mod_polyun_struct,
        B: *const fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_polyun_set(
        A: *mut fmpz_mod_polyun_struct,
        B: *const fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyu3n_print_pretty(
        A: *const fmpz_mod_polyun_struct,
        var0: *const libc::c_char,
        var1: *const libc::c_char,
        var2: *const libc::c_char,
        varlast: *const libc::c_char,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyu1n_print_pretty(
        A: *const fmpz_mod_polyun_struct,
        var0: *const libc::c_char,
        varlast: *const libc::c_char,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_polyun_fit_length__extern"]
    pub fn fmpz_mod_polyun_fit_length(
        A: *mut fmpz_mod_polyun_struct,
        len: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyun_one(A: *mut fmpz_mod_polyun_struct, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_mpoly_get_polyu1n(
        A: *mut fmpz_mod_polyun_struct,
        B: *const fmpz_mod_mpoly_struct,
        varx: mp_limb_signed_t,
        vary: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_set_polyu1n(
        B: *mut fmpz_mod_mpoly_struct,
        A: *const fmpz_mod_polyun_struct,
        varx: mp_limb_signed_t,
        vary: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_init(
        A: *mut fmpz_mod_mpolyn_struct,
        bits: mp_limb_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpolyn_swap__extern"]
    pub fn fmpz_mod_mpolyn_swap(
        A: *mut fmpz_mod_mpolyn_struct,
        B: *mut fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_fit_length(
        A: *mut fmpz_mod_mpolyn_struct,
        length: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpolyn_leadcoeff__extern"]
    pub fn fmpz_mod_mpolyn_leadcoeff(A: *const fmpz_mod_mpolyn_struct) -> *const fmpz;
    pub fn fmpz_mod_mpolyn_is_canonical(
        A: *const fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_lastdeg(
        A: *const fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fmpz_mod_mpolyn_clear(
        A: *mut fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_one(
        A: *mut fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_scalar_mul_fmpz_mod(
        A: *mut fmpz_mod_mpolyn_struct,
        c: *const fmpz,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_equal(
        A: *const fmpz_mod_mpolyn_struct,
        B: *const fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_print_pretty(
        poly: *const fmpz_mod_mpolyn_struct,
        x: *mut *const libc::c_char,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_cvtfrom_mpolyn(
        A: *mut fmpz_mod_mpoly_struct,
        B: *const fmpz_mod_mpolyn_struct,
        var: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_cvtto_mpolyn(
        A: *mut fmpz_mod_mpolyn_struct,
        B: *const fmpz_mod_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_to_mpolyn_perm_deflate(
        A: *mut fmpz_mod_mpolyn_struct,
        nctx: *const fmpz_mod_mpoly_ctx_struct,
        B: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        perm: *const mp_limb_signed_t,
        shift: *const mp_limb_t,
        stride: *const mp_limb_t,
    );
    pub fn fmpz_mod_mpoly_from_mpolyn_perm_inflate(
        A: *mut fmpz_mod_mpoly_struct,
        Abits: mp_limb_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        B: *const fmpz_mod_mpolyn_struct,
        nctx: *const fmpz_mod_mpoly_ctx_struct,
        perm: *const mp_limb_signed_t,
        shift: *const mp_limb_t,
        stride: *const mp_limb_t,
    );
    pub fn fmpz_mod_mpolyn_set(
        A: *mut fmpz_mod_mpolyn_struct,
        B: *const fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_is_nonzero_fmpz(
        A: *const fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_divides(
        Q: *mut fmpz_mod_mpolyn_struct,
        A: *const fmpz_mod_mpolyn_struct,
        B: *const fmpz_mod_mpolyn_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_polyu1n_interp_reduce_2sm_poly(
        E: *mut fmpz_mod_poly_struct,
        F: *mut fmpz_mod_poly_struct,
        A: *const fmpz_mod_polyun_struct,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyu1n_interp_lift_2sm_poly(
        lastdeg: *mut mp_limb_signed_t,
        F: *mut fmpz_mod_polyun_struct,
        A: *const fmpz_mod_poly_struct,
        B: *const fmpz_mod_poly_struct,
        alpha: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyu1n_interp_crt_2sm_poly(
        lastdeg: *mut mp_limb_signed_t,
        F: *mut fmpz_mod_polyun_struct,
        T: *mut fmpz_mod_polyun_struct,
        A: *const fmpz_mod_poly_struct,
        B: *const fmpz_mod_poly_struct,
        modulus: *const fmpz_mod_poly_struct,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_interp_reduce_sm_poly(
        E: *mut fmpz_mod_poly_struct,
        A: *const fmpz_mod_mpolyn_struct,
        alpha: *const fmpz,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_interp_lift_sm_poly(
        A: *mut fmpz_mod_mpolyn_struct,
        B: *const fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_interp_crt_sm_poly(
        lastdeg_: *mut mp_limb_signed_t,
        F: *mut fmpz_mod_mpolyn_struct,
        T: *mut fmpz_mod_mpolyn_struct,
        A: *const fmpz_mod_poly_struct,
        modulus: *const fmpz_mod_poly_struct,
        alpha: *const fmpz,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_interp_reduce_2sm_mpolyn(
        E: *mut fmpz_mod_mpolyn_struct,
        F: *mut fmpz_mod_mpolyn_struct,
        A: *mut fmpz_mod_mpolyn_struct,
        var: mp_limb_signed_t,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_interp_lift_2sm_mpolyn(
        lastdeg: *mut mp_limb_signed_t,
        T: *mut fmpz_mod_mpolyn_struct,
        A: *mut fmpz_mod_mpolyn_struct,
        B: *mut fmpz_mod_mpolyn_struct,
        var: mp_limb_signed_t,
        alpha: *const fmpz,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_interp_crt_2sm_mpolyn(
        lastdeg: *mut mp_limb_signed_t,
        F: *mut fmpz_mod_mpolyn_struct,
        T: *mut fmpz_mod_mpolyn_struct,
        A: *mut fmpz_mod_mpolyn_struct,
        B: *mut fmpz_mod_mpolyn_struct,
        var: mp_limb_signed_t,
        modulus: *mut fmpz_mod_poly_struct,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_interp_lift_sm_mpoly(
        A: *mut fmpz_mod_mpolyn_struct,
        B: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyn_interp_crt_sm_mpoly(
        lastdeg: *mut mp_limb_signed_t,
        F: *mut fmpz_mod_mpolyn_struct,
        T: *mut fmpz_mod_mpolyn_struct,
        A: *mut fmpz_mod_mpoly_struct,
        modulus: *mut fmpz_mod_poly_struct,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_interp_mcrt_sm_mpoly(
        lastdeg: *mut mp_limb_signed_t,
        F: *mut fmpz_mod_mpolyn_struct,
        A: *const fmpz_mod_mpoly_struct,
        modulus: *const fmpz_mod_poly_struct,
        alphapow: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fmpz_mod_polyu_swap__extern"]
    pub fn fmpz_mod_polyu_swap(A: *mut fmpz_mod_polyu_struct, B: *mut fmpz_mod_polyu_struct);
    pub fn fmpz_mod_polyu_init(A: *mut fmpz_mod_polyu_struct);
    pub fn fmpz_mod_polyu_clear(A: *mut fmpz_mod_polyu_struct);
    pub fn fmpz_mod_polyu_realloc(A: *mut fmpz_mod_polyu_struct, len: mp_limb_signed_t);
    #[link_name = "fmpz_mod_polyu_fit_length__extern"]
    pub fn fmpz_mod_polyu_fit_length(
        a: *mut fmpz_mod_polyu_struct,
        len: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyu3_degrees(
        deg0: *mut mp_limb_signed_t,
        deg1: *mut mp_limb_signed_t,
        deg2: *mut mp_limb_signed_t,
        A: *const fmpz_mod_polyu_struct,
    );
    pub fn fmpz_mod_polyu3_print_pretty(
        A: *const fmpz_mod_polyu_struct,
        var0: *const libc::c_char,
        var1: *const libc::c_char,
        var2: *const libc::c_char,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_mpolyu_is_canonical(
        A: *const fmpz_mod_mpolyu_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyu3_print_pretty(
        A: *const fmpz_mod_mpolyu_struct,
        var0: *const libc::c_char,
        var1: *const libc::c_char,
        var2: *const libc::c_char,
        vars: *mut *const libc::c_char,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_is_canonical(
        A: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fmpz_mod_bpoly_init__extern"]
    pub fn fmpz_mod_bpoly_init(A: *mut fmpz_mod_bpoly_struct, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_bpoly_clear(A: *mut fmpz_mod_bpoly_struct, ctx: *const fmpz_mod_ctx_struct);
    #[link_name = "fmpz_mod_bpoly_swap__extern"]
    pub fn fmpz_mod_bpoly_swap(
        A: *mut fmpz_mod_bpoly_struct,
        B: *mut fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_bpoly_get_coeff__extern"]
    pub fn fmpz_mod_bpoly_get_coeff(
        c: *mut fmpz,
        A: *const fmpz_mod_bpoly_struct,
        e0: mp_limb_signed_t,
        e1: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_bpoly_degree0__extern"]
    pub fn fmpz_mod_bpoly_degree0(
        A: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "fmpz_mod_bpoly_normalise__extern"]
    pub fn fmpz_mod_bpoly_normalise(A: *mut fmpz_mod_bpoly_struct, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_bpoly_equal(
        A: *const fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_bpoly_set(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_set_poly_gen1(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_set_poly_gen0(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_one(A: *mut fmpz_mod_bpoly_struct, ctx: *const fmpz_mod_ctx_struct);
    #[link_name = "fmpz_mod_bpoly_is_one__extern"]
    pub fn fmpz_mod_bpoly_is_one(
        A: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_bpoly_degree1(
        A: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fmpz_mod_bpoly_print_pretty(
        A: *const fmpz_mod_bpoly_struct,
        xvar: *const libc::c_char,
        yvar: *const libc::c_char,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_fit_length(
        A: *mut fmpz_mod_bpoly_struct,
        len: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_set_coeff(
        A: *mut fmpz_mod_bpoly_struct,
        xi: mp_limb_signed_t,
        yi: mp_limb_signed_t,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_zero(A: *mut fmpz_mod_bpoly_struct, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_bpoly_reverse_vars(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_taylor_shift_gen1(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        c: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_sub(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        C: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_add(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        C: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_make_primitive(
        g: *mut fmpz_mod_poly_struct,
        A: *mut fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_mul(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        C: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_mul_series(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        C: *const fmpz_mod_bpoly_struct,
        order: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_divrem_series(
        Q: *mut fmpz_mod_bpoly_struct,
        R: *mut fmpz_mod_bpoly_struct,
        A: *const fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        order: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_divides(
        Q: *mut fmpz_mod_bpoly_struct,
        A: *const fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_bpoly_taylor_shift_gen0(
        A: *mut fmpz_mod_bpoly_struct,
        alpha: *const fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_derivative_gen0(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_make_monic_series(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_bpoly_struct,
        order: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_tpoly_init__extern"]
    pub fn fmpz_mod_tpoly_init(A: *mut fmpz_mod_tpoly_struct, ctx: *const fmpz_mod_ctx_struct);
    #[link_name = "fmpz_mod_tpoly_swap__extern"]
    pub fn fmpz_mod_tpoly_swap(
        A: *mut fmpz_mod_tpoly_struct,
        B: *mut fmpz_mod_tpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_tpoly_fit_length(
        A: *mut fmpz_mod_tpoly_struct,
        len: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_tpoly_clear(A: *mut fmpz_mod_tpoly_struct, ctx: *const fmpz_mod_ctx_struct);
    pub fn fmpz_mod_mpoly_get_fmpz_mod_bpoly(
        A: *mut fmpz_mod_bpoly_struct,
        B: *const fmpz_mod_mpoly_struct,
        var0: mp_limb_signed_t,
        var1: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_set_fmpz_mod_bpoly(
        A: *mut fmpz_mod_mpoly_struct,
        Abits: mp_limb_t,
        B: *const fmpz_mod_bpoly_struct,
        var0: mp_limb_signed_t,
        var1: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_bpoly_factor_smprime(
        c: *mut fmpz_mod_poly_struct,
        F: *mut fmpz_mod_tpoly_struct,
        B: *mut fmpz_mod_bpoly_struct,
        allow_shift: libc::c_int,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn _fmpz_mod_zip_vand_solve(
        coeffs: *mut fmpz,
        monomials: *const fmpz,
        mlength: mp_limb_signed_t,
        evals: *const fmpz,
        elength: mp_limb_signed_t,
        master: *const fmpz,
        scratch: *mut fmpz,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn _fmpz_mod_zip_eval_step(
        ev: *mut fmpz,
        cur: *mut fmpz,
        inc: *const fmpz,
        coeffs: *const fmpz,
        length: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpolyv_init__extern"]
    pub fn fmpz_mod_mpolyv_init(
        A: *mut fmpz_mod_mpolyv_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    #[link_name = "fmpz_mod_mpolyv_swap__extern"]
    pub fn fmpz_mod_mpolyv_swap(
        A: *mut fmpz_mod_mpolyv_struct,
        B: *mut fmpz_mod_mpolyv_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyv_clear(
        A: *mut fmpz_mod_mpolyv_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyv_print_pretty(
        poly: *const fmpz_mod_mpolyv_struct,
        x: *mut *const libc::c_char,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyv_fit_length(
        A: *mut fmpz_mod_mpolyv_struct,
        length: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpolyv_set_coeff(
        A: *mut fmpz_mod_mpolyv_struct,
        i: mp_limb_signed_t,
        c: *mut fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_to_mpolyv(
        A: *mut fmpz_mod_mpolyv_struct,
        B: *const fmpz_mod_mpoly_struct,
        xalpha: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_from_mpolyv(
        A: *mut fmpz_mod_mpoly_struct,
        Abits: mp_limb_t,
        B: *const fmpz_mod_mpolyv_struct,
        xalpha: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_vec_content_mpoly(
        g: *mut fmpz_mod_mpoly_struct,
        A: *const fmpz_mod_mpoly_struct,
        Alen: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn _fmpz_mod_mpoly_vec_divexact_mpoly(
        A: *mut fmpz_mod_mpoly_struct,
        Alen: mp_limb_signed_t,
        c: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_vec_mul_mpoly(
        A: *mut fmpz_mod_mpoly_struct,
        Alen: mp_limb_signed_t,
        c: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_factor_separable(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        sep: libc::c_int,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_lcc_wang(
        lc_divs: *mut fmpz_mod_mpoly_struct,
        lcAfac: *const fmpz_mod_mpoly_factor_struct,
        Auc: *const fmpz_mod_poly_struct,
        Auf: *const fmpz_mod_bpoly_struct,
        r: mp_limb_signed_t,
        alpha: *const fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_irred_smprime_zassenhaus(
        fac: *mut fmpz_mod_mpolyv_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        state: *mut flint_rand_s,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_irred_smprime_wang(
        fac: *mut fmpz_mod_mpolyv_struct,
        A: *const fmpz_mod_mpoly_struct,
        lcAfac: *const fmpz_mod_mpoly_factor_struct,
        lcA: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        state: *mut flint_rand_s,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_irred_smprime_zippel(
        fac: *mut fmpz_mod_mpolyv_struct,
        A: *const fmpz_mod_mpoly_struct,
        lcAfac: *const fmpz_mod_mpoly_factor_struct,
        lcA: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        state: *mut flint_rand_s,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_compression_do(
        L: *mut fmpz_mod_mpoly_struct,
        Lctx: *const fmpz_mod_mpoly_ctx_struct,
        Acoeffs: *mut fmpz,
        Alen: mp_limb_signed_t,
        M: *mut mpoly_compression_struct,
    );
    pub fn fmpz_mod_mpoly_compression_undo(
        A: *mut fmpz_mod_mpoly_struct,
        Abits: mp_limb_t,
        Actx: *const fmpz_mod_mpoly_ctx_struct,
        L: *mut fmpz_mod_mpoly_struct,
        Lctx: *const fmpz_mod_mpoly_ctx_struct,
        M: *mut mpoly_compression_struct,
    );
    pub fn fmpz_mod_mpoly_pfrac_init(
        I: *mut fmpz_mod_mpoly_pfrac_struct,
        bits: mp_limb_t,
        l: mp_limb_signed_t,
        r: mp_limb_signed_t,
        betas: *const fmpz_mod_mpoly_struct,
        alpha: *const fmpz,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_pfrac_clear(
        I: *mut fmpz_mod_mpoly_pfrac_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_pfrac(
        r: mp_limb_signed_t,
        t: *mut fmpz_mod_mpoly_struct,
        deg: *const mp_limb_signed_t,
        I: *mut fmpz_mod_mpoly_pfrac_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_hlift(
        m: mp_limb_signed_t,
        f: *mut fmpz_mod_mpoly_struct,
        r: mp_limb_signed_t,
        alpha: *const fmpz,
        A: *const fmpz_mod_mpoly_struct,
        degs: *const mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_bpoly_pfrac(
        r: mp_limb_signed_t,
        C: *mut fmpz_mod_bpoly_struct,
        C_deg1_bound: *mut mp_limb_signed_t,
        A: *mut fmpz_mod_bpoly_struct,
        B: *mut fmpz_mod_bpoly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_bpoly_hlift2(
        A: *mut fmpz_mod_bpoly_struct,
        B0: *mut fmpz_mod_bpoly_struct,
        B1: *mut fmpz_mod_bpoly_struct,
        alpha: *const fmpz,
        degree_inner: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
        St: *mut fmpz_mod_poly_bpoly_stack_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_bpoly_hlift(
        r: mp_limb_signed_t,
        A: *mut fmpz_mod_bpoly_struct,
        B: *mut fmpz_mod_bpoly_struct,
        alpha: *const fmpz,
        degree_inner: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
        St: *mut fmpz_mod_poly_bpoly_stack_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_polyu3_hlift(
        r: mp_limb_signed_t,
        BB: *mut fmpz_mod_polyun_struct,
        A: *mut fmpz_mod_polyu_struct,
        B: *mut fmpz_mod_polyu_struct,
        beta: *const fmpz,
        degree_inner: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_hlift_zippel(
        m: mp_limb_signed_t,
        B: *mut fmpz_mod_mpoly_struct,
        r: mp_limb_signed_t,
        alpha: *const fmpz,
        A: *const fmpz_mod_mpoly_struct,
        degs: *const mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        state: *mut flint_rand_s,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_algo(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        algo: libc::c_uint,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_zassenhaus(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_wang(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpoly_factor_zippel(
        f: *mut fmpz_mod_mpoly_factor_struct,
        A: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn _fmpz_mod_mpoly_evaluate_rest_fmpz_mod_poly(
        E: *mut fmpz_mod_poly_struct,
        starts: *mut mp_limb_signed_t,
        ends: *mut mp_limb_signed_t,
        stops: *mut mp_limb_signed_t,
        es: *mut mp_limb_t,
        Acoeffs: *const fmpz,
        Aexps: *const mp_limb_t,
        Alen: mp_limb_signed_t,
        var: mp_limb_signed_t,
        alphas: *const fmpz_mod_poly_struct,
        offsets: *const mp_limb_signed_t,
        shifts: *const mp_limb_signed_t,
        N: mp_limb_signed_t,
        mask: mp_limb_t,
        nvars: mp_limb_signed_t,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> libc::c_int;
    pub fn _fmpz_mod_mpoly_eval_rest_to_fmpz_mod_bpoly(
        E: *mut fmpz_mod_bpoly_struct,
        A: *const fmpz_mod_mpoly_struct,
        alphabetas: *const fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_set_fmpz_mod_bpoly_var1_zero(
        A: *mut fmpz_mod_mpoly_struct,
        Abits: mp_limb_t,
        B: *const fmpz_mod_bpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn _fmpz_mod_mpoly_gcd_algo(
        G: *mut fmpz_mod_mpoly_struct,
        Abar: *mut fmpz_mod_mpoly_struct,
        Bbar: *mut fmpz_mod_mpoly_struct,
        A: *const fmpz_mod_mpoly_struct,
        B: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        algo: libc::c_uint,
    ) -> libc::c_int;
    pub fn fmpz_mod_polyu1n_gcd_brown_smprime(
        G: *mut fmpz_mod_polyun_struct,
        Abar: *mut fmpz_mod_polyun_struct,
        Bbar: *mut fmpz_mod_polyun_struct,
        A: *mut fmpz_mod_polyun_struct,
        B: *mut fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_ctx_struct,
        St_poly: *mut fmpz_mod_poly_stack_struct,
        St_polyun: *mut fmpz_mod_polyun_stack_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyn_gcd_brown_smprime(
        G: *mut fmpz_mod_mpolyn_struct,
        Abar: *mut fmpz_mod_mpolyn_struct,
        Bbar: *mut fmpz_mod_mpolyn_struct,
        A: *mut fmpz_mod_mpolyn_struct,
        B: *mut fmpz_mod_mpolyn_struct,
        var: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        I: *const mpoly_gcd_info_struct,
        St: *mut fmpz_mod_poly_polyun_mpolyn_stack_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyl_gcdp_zippel(
        G: *mut fmpz_mod_mpoly_struct,
        Abar: *mut fmpz_mod_mpoly_struct,
        Bbar: *mut fmpz_mod_mpoly_struct,
        A: *mut fmpz_mod_mpoly_struct,
        B: *mut fmpz_mod_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
        state: *mut flint_rand_s,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyl_gcd_zippel2_smprime(
        rG: *mut fmpz_mod_mpoly_struct,
        rGdegs: *const mp_limb_signed_t,
        rAbar: *mut fmpz_mod_mpoly_struct,
        rBbar: *mut fmpz_mod_mpoly_struct,
        A: *const fmpz_mod_mpoly_struct,
        Adegs: *const mp_limb_signed_t,
        B: *const fmpz_mod_mpoly_struct,
        Bdegs: *const mp_limb_signed_t,
        gamma: *const fmpz_mod_mpoly_struct,
        gammadegs: *const mp_limb_signed_t,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_mpolyl_gcd_hensel_smprime(
        G: *mut fmpz_mod_mpoly_struct,
        Gdeg: mp_limb_signed_t,
        Abar: *mut fmpz_mod_mpoly_struct,
        Bbar: *mut fmpz_mod_mpoly_struct,
        A: *const fmpz_mod_mpoly_struct,
        B: *const fmpz_mod_mpoly_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fmpz_mod_pow_cache_start(
        b: *const fmpz,
        c: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_pow_cache_mulpow_ui(
        a: *mut fmpz,
        b: *const fmpz,
        e: mp_limb_t,
        c: *mut fmpz_mod_poly_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn mpoly_monomial_evals_fmpz_mod(
        EH: *mut fmpz_mod_poly_struct,
        Aexps: *const mp_limb_t,
        Alen: mp_limb_signed_t,
        Abits: mp_limb_t,
        alpha_caches: *mut fmpz_mod_poly_struct,
        start: mp_limb_signed_t,
        stop: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        fpctx: *const fmpz_mod_ctx_struct,
    );
    pub fn mpoly1_monomial_evals_fmpz_mod(
        EH: *mut fmpz_mod_polyun_struct,
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Amarks: *const mp_limb_t,
        Amarkslen: mp_limb_signed_t,
        alpha_caches: *mut fmpz_mod_poly_struct,
        m: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        fpctx: *const fmpz_mod_ctx_struct,
    );
    pub fn mpoly2_monomial_evals_fmpz_mod(
        EH: *mut fmpz_mod_polyun_struct,
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Amarks: *mut mp_limb_t,
        Amarkslen: mp_limb_signed_t,
        alpha_caches: *mut fmpz_mod_poly_struct,
        m: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
        fpctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_mpoly_mock_eval_coeff(
        mock: *mut fmpz_mod_polyun_struct,
        A: *const fmpz_mod_mpoly_struct,
        Aeh_inc: *const fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    );
    pub fn fmpz_mod_polyun_product_roots(
        M: *mut fmpz_mod_polyun_struct,
        H: *const fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fmpz_mod_polyun_zip_start(
        Z: *mut fmpz_mod_polyun_struct,
        H: *mut fmpz_mod_polyun_struct,
        req_images: mp_limb_signed_t,
        fctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyu2n_zip_eval_cur_inc_coeff(
        E: *mut fmpz_mod_polyun_struct,
        Acur: *mut fmpz_mod_polyun_struct,
        Ainc: *const fmpz_mod_polyun_struct,
        Acoeff: *const fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_ctx_struct,
    );
    pub fn fmpz_mod_polyun_zip_solve(
        A: *mut fmpz_mod_mpoly_struct,
        Z: *mut fmpz_mod_polyun_struct,
        H: *mut fmpz_mod_polyun_struct,
        M: *mut fmpz_mod_polyun_struct,
        ctx: *const fmpz_mod_mpoly_ctx_struct,
    ) -> libc::c_int;
}
