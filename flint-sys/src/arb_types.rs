/* automatically generated by rust-bindgen 0.70.1 */

use crate::deps::*;
use crate::arf_types::*;
use crate::flint::*;


#[repr(C)]
pub struct mag_struct {
    pub exp: fmpz,
    pub man: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mag_struct"][::std::mem::size_of::<mag_struct>() - 16usize];
    ["Alignment of mag_struct"][::std::mem::align_of::<mag_struct>() - 8usize];
    ["Offset of field: mag_struct::exp"][::std::mem::offset_of!(mag_struct, exp) - 0usize];
    ["Offset of field: mag_struct::man"][::std::mem::offset_of!(mag_struct, man) - 8usize];
};
impl Default for mag_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mag_t = [mag_struct; 1usize];
pub type mag_ptr = *mut mag_struct;
pub type mag_srcptr = *const mag_struct;
#[repr(C)]
pub struct arb_struct {
    pub mid: arf_struct,
    pub rad: mag_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arb_struct"][::std::mem::size_of::<arb_struct>() - 48usize];
    ["Alignment of arb_struct"][::std::mem::align_of::<arb_struct>() - 8usize];
    ["Offset of field: arb_struct::mid"][::std::mem::offset_of!(arb_struct, mid) - 0usize];
    ["Offset of field: arb_struct::rad"][::std::mem::offset_of!(arb_struct, rad) - 32usize];
};
impl Default for arb_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arb_t = [arb_struct; 1usize];
pub type arb_ptr = *mut arb_struct;
pub type arb_srcptr = *const arb_struct;
#[repr(C)]
pub struct arb_mat_struct {
    pub entries: arb_ptr,
    pub r: mp_limb_signed_t,
    pub c: mp_limb_signed_t,
    pub rows: *mut arb_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arb_mat_struct"][::std::mem::size_of::<arb_mat_struct>() - 32usize];
    ["Alignment of arb_mat_struct"][::std::mem::align_of::<arb_mat_struct>() - 8usize];
    ["Offset of field: arb_mat_struct::entries"]
        [::std::mem::offset_of!(arb_mat_struct, entries) - 0usize];
    ["Offset of field: arb_mat_struct::r"][::std::mem::offset_of!(arb_mat_struct, r) - 8usize];
    ["Offset of field: arb_mat_struct::c"][::std::mem::offset_of!(arb_mat_struct, c) - 16usize];
    ["Offset of field: arb_mat_struct::rows"]
        [::std::mem::offset_of!(arb_mat_struct, rows) - 24usize];
};
impl Default for arb_mat_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arb_mat_t = [arb_mat_struct; 1usize];
#[repr(C)]
pub struct arb_poly_struct {
    pub coeffs: arb_ptr,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arb_poly_struct"][::std::mem::size_of::<arb_poly_struct>() - 24usize];
    ["Alignment of arb_poly_struct"][::std::mem::align_of::<arb_poly_struct>() - 8usize];
    ["Offset of field: arb_poly_struct::coeffs"]
        [::std::mem::offset_of!(arb_poly_struct, coeffs) - 0usize];
    ["Offset of field: arb_poly_struct::alloc"]
        [::std::mem::offset_of!(arb_poly_struct, alloc) - 8usize];
    ["Offset of field: arb_poly_struct::length"]
        [::std::mem::offset_of!(arb_poly_struct, length) - 16usize];
};
impl Default for arb_poly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arb_poly_t = [arb_poly_struct; 1usize];
