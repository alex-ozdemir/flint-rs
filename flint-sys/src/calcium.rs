/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct calcium_stream_struct {
    pub fp: *mut FLINT_FILE,
    pub s: *mut libc::c_char,
    pub len: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of calcium_stream_struct"][::std::mem::size_of::<calcium_stream_struct>() - 32usize];
    ["Alignment of calcium_stream_struct"]
        [::std::mem::align_of::<calcium_stream_struct>() - 8usize];
    ["Offset of field: calcium_stream_struct::fp"]
        [::std::mem::offset_of!(calcium_stream_struct, fp) - 0usize];
    ["Offset of field: calcium_stream_struct::s"]
        [::std::mem::offset_of!(calcium_stream_struct, s) - 8usize];
    ["Offset of field: calcium_stream_struct::len"]
        [::std::mem::offset_of!(calcium_stream_struct, len) - 16usize];
    ["Offset of field: calcium_stream_struct::alloc"]
        [::std::mem::offset_of!(calcium_stream_struct, alloc) - 24usize];
};
impl Default for calcium_stream_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type calcium_stream_t = [calcium_stream_struct; 1usize];
pub const calcium_func_code_CA_QQBar: calcium_func_code = 0;
pub const calcium_func_code_CA_Neg: calcium_func_code = 1;
pub const calcium_func_code_CA_Add: calcium_func_code = 2;
pub const calcium_func_code_CA_Sub: calcium_func_code = 3;
pub const calcium_func_code_CA_Mul: calcium_func_code = 4;
pub const calcium_func_code_CA_Div: calcium_func_code = 5;
pub const calcium_func_code_CA_Sqrt: calcium_func_code = 6;
pub const calcium_func_code_CA_Cbrt: calcium_func_code = 7;
pub const calcium_func_code_CA_Root: calcium_func_code = 8;
pub const calcium_func_code_CA_Floor: calcium_func_code = 9;
pub const calcium_func_code_CA_Ceil: calcium_func_code = 10;
pub const calcium_func_code_CA_Abs: calcium_func_code = 11;
pub const calcium_func_code_CA_Sign: calcium_func_code = 12;
pub const calcium_func_code_CA_Re: calcium_func_code = 13;
pub const calcium_func_code_CA_Im: calcium_func_code = 14;
pub const calcium_func_code_CA_Arg: calcium_func_code = 15;
pub const calcium_func_code_CA_Conjugate: calcium_func_code = 16;
pub const calcium_func_code_CA_Pi: calcium_func_code = 17;
pub const calcium_func_code_CA_Sin: calcium_func_code = 18;
pub const calcium_func_code_CA_Cos: calcium_func_code = 19;
pub const calcium_func_code_CA_Exp: calcium_func_code = 20;
pub const calcium_func_code_CA_Log: calcium_func_code = 21;
pub const calcium_func_code_CA_Pow: calcium_func_code = 22;
pub const calcium_func_code_CA_Tan: calcium_func_code = 23;
pub const calcium_func_code_CA_Cot: calcium_func_code = 24;
pub const calcium_func_code_CA_Cosh: calcium_func_code = 25;
pub const calcium_func_code_CA_Sinh: calcium_func_code = 26;
pub const calcium_func_code_CA_Tanh: calcium_func_code = 27;
pub const calcium_func_code_CA_Coth: calcium_func_code = 28;
pub const calcium_func_code_CA_Atan: calcium_func_code = 29;
pub const calcium_func_code_CA_Acos: calcium_func_code = 30;
pub const calcium_func_code_CA_Asin: calcium_func_code = 31;
pub const calcium_func_code_CA_Acot: calcium_func_code = 32;
pub const calcium_func_code_CA_Atanh: calcium_func_code = 33;
pub const calcium_func_code_CA_Acosh: calcium_func_code = 34;
pub const calcium_func_code_CA_Asinh: calcium_func_code = 35;
pub const calcium_func_code_CA_Acoth: calcium_func_code = 36;
pub const calcium_func_code_CA_Euler: calcium_func_code = 37;
pub const calcium_func_code_CA_Gamma: calcium_func_code = 38;
pub const calcium_func_code_CA_LogGamma: calcium_func_code = 39;
pub const calcium_func_code_CA_Psi: calcium_func_code = 40;
pub const calcium_func_code_CA_Erf: calcium_func_code = 41;
pub const calcium_func_code_CA_Erfc: calcium_func_code = 42;
pub const calcium_func_code_CA_Erfi: calcium_func_code = 43;
pub const calcium_func_code_CA_RiemannZeta: calcium_func_code = 44;
pub const calcium_func_code_CA_HurwitzZeta: calcium_func_code = 45;
pub const calcium_func_code_CA_FUNC_CODE_LENGTH: calcium_func_code = 46;
pub type calcium_func_code = libc::c_uint;
extern "C" {
    pub fn calcium_stream_init_file(out: *mut calcium_stream_struct, fp: *mut FILE);
    #[link_name = "calcium_stream_init_str__extern"]
    pub fn calcium_stream_init_str(out: *mut calcium_stream_struct);
    pub fn calcium_write(out: *mut calcium_stream_struct, s: *const libc::c_char);
    pub fn calcium_write_si(out: *mut calcium_stream_struct, x: mp_limb_signed_t);
    pub fn calcium_write_fmpz(out: *mut calcium_stream_struct, c: *const fmpz);
    pub fn calcium_write_acb(
        out: *mut calcium_stream_struct,
        z: *const acb_struct,
        digits: mp_limb_signed_t,
        flags: mp_limb_t,
    );
    #[link_name = "calcium_write_free__extern"]
    pub fn calcium_write_free(out: *mut calcium_stream_struct, s: *mut libc::c_char);
    #[link_name = "truth_print__extern"]
    pub fn truth_print(t: truth_t);
    pub fn calcium_func_name(func: calcium_func_code) -> *const libc::c_char;
    #[link_name = "calcium_fmpz_hash__extern"]
    pub fn calcium_fmpz_hash(x: *const fmpz) -> mp_limb_t;
}
