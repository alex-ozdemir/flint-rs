/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


pub const __FLINT_VERSION: u32 = 3;
pub const __FLINT_VERSION_MINOR: u32 = 1;
pub const __FLINT_VERSION_PATCHLEVEL: u32 = 0;
#[allow(unsafe_code)]
pub const FLINT_VERSION: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"3.1.0\0") };
#[allow(unsafe_code)]
pub const _WORD_FMT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"l\0") };
#[allow(unsafe_code)]
pub const WORD_FMT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"%l\0") };
#[allow(unsafe_code)]
pub const WORD_WIDTH_FMT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"%*l\0") };
pub const FLINT_BITS: u32 = 64;
pub const FLINT_D_BITS: u32 = 53;
pub const FLINT64: u32 = 1;
pub const SMALL_FMPZ_BITCOUNT_MAX: u32 = 62;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __FLINT_FILE {
    _unused: [u8; 0],
}
pub type FLINT_FILE = __FLINT_FILE;
pub type flint_cleanup_function_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type thread_pool_handle = libc::c_int;
#[repr(C)]
pub struct flint_rand_s {
    pub gmp_state: gmp_randstate_t,
    pub gmp_init: libc::c_int,
    pub __randval: mp_limb_t,
    pub __randval2: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flint_rand_s"][::std::mem::size_of::<flint_rand_s>() - 56usize];
    ["Alignment of flint_rand_s"][::std::mem::align_of::<flint_rand_s>() - 8usize];
    ["Offset of field: flint_rand_s::gmp_state"]
        [::std::mem::offset_of!(flint_rand_s, gmp_state) - 0usize];
    ["Offset of field: flint_rand_s::gmp_init"]
        [::std::mem::offset_of!(flint_rand_s, gmp_init) - 32usize];
    ["Offset of field: flint_rand_s::__randval"]
        [::std::mem::offset_of!(flint_rand_s, __randval) - 40usize];
    ["Offset of field: flint_rand_s::__randval2"]
        [::std::mem::offset_of!(flint_rand_s, __randval2) - 48usize];
};
impl Default for flint_rand_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type flint_rand_t = [flint_rand_s; 1usize];
pub const flint_err_t_FLINT_ERROR: flint_err_t = 0;
pub const flint_err_t_FLINT_OVERFLOW: flint_err_t = 1;
pub const flint_err_t_FLINT_IMPINV: flint_err_t = 2;
pub const flint_err_t_FLINT_DOMERR: flint_err_t = 3;
pub const flint_err_t_FLINT_DIVZERO: flint_err_t = 4;
pub const flint_err_t_FLINT_EXPOF: flint_err_t = 5;
pub const flint_err_t_FLINT_INEXACT: flint_err_t = 6;
pub const flint_err_t_FLINT_TEST_FAIL: flint_err_t = 7;
pub type flint_err_t = libc::c_uint;
#[repr(C)]
pub struct nmod_t {
    pub n: mp_limb_t,
    pub ninv: mp_limb_t,
    pub norm: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nmod_t"][::std::mem::size_of::<nmod_t>() - 24usize];
    ["Alignment of nmod_t"][::std::mem::align_of::<nmod_t>() - 8usize];
    ["Offset of field: nmod_t::n"][::std::mem::offset_of!(nmod_t, n) - 0usize];
    ["Offset of field: nmod_t::ninv"][::std::mem::offset_of!(nmod_t, ninv) - 8usize];
    ["Offset of field: nmod_t::norm"][::std::mem::offset_of!(nmod_t, norm) - 16usize];
};
impl Default for nmod_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpz = mp_limb_signed_t;
pub type fmpz_t = [fmpz; 1usize];
#[repr(C)]
pub struct fmpq {
    pub num: fmpz,
    pub den: fmpz,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fmpq"][::std::mem::size_of::<fmpq>() - 16usize];
    ["Alignment of fmpq"][::std::mem::align_of::<fmpq>() - 8usize];
    ["Offset of field: fmpq::num"][::std::mem::offset_of!(fmpq, num) - 0usize];
    ["Offset of field: fmpq::den"][::std::mem::offset_of!(fmpq, den) - 8usize];
};
impl Default for fmpq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fmpq_t = [fmpq; 1usize];
extern "C" {
    pub static mut flint_version: [libc::c_char; 0usize];
    pub fn flint_malloc(size: usize) -> *mut libc::c_void;
    pub fn flint_realloc(ptr: *mut libc::c_void, size: usize) -> *mut libc::c_void;
    pub fn flint_calloc(num: usize, size: usize) -> *mut libc::c_void;
    pub fn flint_free(ptr: *mut libc::c_void);
    pub fn flint_aligned_alloc(alignment: usize, size: usize) -> *mut libc::c_void;
    pub fn flint_aligned_free(ptr: *mut libc::c_void);
    pub fn flint_register_cleanup_function(cleanup_function: flint_cleanup_function_t);
    pub fn flint_cleanup();
    pub fn flint_cleanup_master();
    pub fn __flint_set_all_memory_functions(
        alloc_func: ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut libc::c_void>,
        calloc_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut libc::c_void,
        >,
        realloc_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: usize) -> *mut libc::c_void,
        >,
        free_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        aligned_alloc_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut libc::c_void,
        >,
        aligned_free_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
    pub fn __flint_get_all_memory_functions(
        alloc_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut libc::c_void,
        >,
        calloc_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut libc::c_void,
        >,
        realloc_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: usize) -> *mut libc::c_void,
        >,
        free_func: *mut ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        aligned_alloc_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut libc::c_void,
        >,
        aligned_free_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void),
        >,
    );
    pub fn __flint_set_memory_functions(
        alloc_func: ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut libc::c_void>,
        calloc_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut libc::c_void,
        >,
        realloc_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: usize) -> *mut libc::c_void,
        >,
        free_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
    pub fn __flint_get_memory_functions(
        alloc_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut libc::c_void,
        >,
        calloc_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut libc::c_void,
        >,
        realloc_func: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: usize) -> *mut libc::c_void,
        >,
        free_func: *mut ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    );
    pub fn flint_abort();
    pub fn flint_set_abort(func: ::std::option::Option<unsafe extern "C" fn()>);
    pub fn flint_get_num_threads() -> libc::c_int;
    pub fn flint_set_num_threads(num_threads: libc::c_int);
    pub fn _flint_set_num_workers(num_workers: libc::c_int);
    pub fn flint_set_num_workers(num_workers: libc::c_int) -> libc::c_int;
    pub fn flint_reset_num_workers(max_workers: libc::c_int);
    pub fn flint_set_thread_affinity(
        cpus: *mut libc::c_int,
        length: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn flint_restore_thread_affinity() -> libc::c_int;
    pub fn flint_test_multiplier() -> f64;
    #[link_name = "flint_randinit__extern"]
    pub fn flint_randinit(state: *mut flint_rand_s);
    #[link_name = "flint_randseed__extern"]
    pub fn flint_randseed(state: *mut flint_rand_s, seed1: mp_limb_t, seed2: mp_limb_t);
    #[link_name = "flint_get_randseed__extern"]
    pub fn flint_get_randseed(
        seed1: *mut mp_limb_t,
        seed2: *mut mp_limb_t,
        state: *mut flint_rand_s,
    );
    #[link_name = "_flint_rand_init_gmp__extern"]
    pub fn _flint_rand_init_gmp(state: *mut flint_rand_s);
    #[link_name = "flint_randclear__extern"]
    pub fn flint_randclear(state: *mut flint_rand_s);
    #[link_name = "flint_rand_alloc__extern"]
    pub fn flint_rand_alloc() -> *mut flint_rand_s;
    #[link_name = "flint_rand_free__extern"]
    pub fn flint_rand_free(state: *mut flint_rand_s);
    pub fn n_randint(arg1: *mut flint_rand_s, arg2: mp_limb_t) -> mp_limb_t;
    pub fn n_randtest(arg1: *mut flint_rand_s) -> mp_limb_t;
    pub fn n_randtest_not_zero(arg1: *mut flint_rand_s) -> mp_limb_t;
    #[link_name = "FLINT_BIT_COUNT__extern"]
    pub fn FLINT_BIT_COUNT(x: mp_limb_t) -> mp_limb_t;
    pub fn parse_fmt(floating: *mut libc::c_int, fmt: *const libc::c_char) -> libc::c_int;
    pub fn flint_printf(str_: *const libc::c_char, ...) -> libc::c_int;
    pub fn flint_sprintf(s: *mut libc::c_char, str_: *const libc::c_char, ...) -> libc::c_int;
    pub fn flint_scanf(str_: *const libc::c_char, ...) -> libc::c_int;
    pub fn flint_sscanf(s: *const libc::c_char, str_: *const libc::c_char, ...) -> libc::c_int;
    pub fn flint_fprintf(f: *mut FILE, str_: *const libc::c_char, ...) -> libc::c_int;
    pub fn flint_fscanf(f: *mut FILE, str_: *const libc::c_char, ...) -> libc::c_int;
    pub fn flint_throw(exc: flint_err_t, msg: *const libc::c_char, ...);
    #[link_name = "flint_mul_sizes__extern"]
    pub fn flint_mul_sizes(x: mp_limb_signed_t, y: mp_limb_signed_t) -> mp_limb_signed_t;
}
