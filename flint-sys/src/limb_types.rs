/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_camel_case_types)]
use crate::deps::*;
use libc::{c_char, c_int, c_uint, c_void, size_t, FILE};


pub const FLINT_MAX_FACTORS_IN_LIMB: u32 = 15;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct n_factor_t {
    pub num: ::std::os::raw::c_int,
    pub exp: [::std::os::raw::c_int; 15usize],
    pub p: [mp_limb_t; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of n_factor_t"][::std::mem::size_of::<n_factor_t>() - 184usize];
    ["Alignment of n_factor_t"][::std::mem::align_of::<n_factor_t>() - 8usize];
    ["Offset of field: n_factor_t::num"][::std::mem::offset_of!(n_factor_t, num) - 0usize];
    ["Offset of field: n_factor_t::exp"][::std::mem::offset_of!(n_factor_t, exp) - 4usize];
    ["Offset of field: n_factor_t::p"][::std::mem::offset_of!(n_factor_t, p) - 64usize];
};
impl Default for n_factor_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct n_primes_struct {
    pub small_i: mp_limb_signed_t,
    pub small_num: mp_limb_signed_t,
    pub small_primes: *mut ::std::os::raw::c_uint,
    pub sieve_a: mp_limb_t,
    pub sieve_b: mp_limb_t,
    pub sieve_i: mp_limb_signed_t,
    pub sieve_num: mp_limb_signed_t,
    pub sieve: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of n_primes_struct"][::std::mem::size_of::<n_primes_struct>() - 64usize];
    ["Alignment of n_primes_struct"][::std::mem::align_of::<n_primes_struct>() - 8usize];
    ["Offset of field: n_primes_struct::small_i"]
        [::std::mem::offset_of!(n_primes_struct, small_i) - 0usize];
    ["Offset of field: n_primes_struct::small_num"]
        [::std::mem::offset_of!(n_primes_struct, small_num) - 8usize];
    ["Offset of field: n_primes_struct::small_primes"]
        [::std::mem::offset_of!(n_primes_struct, small_primes) - 16usize];
    ["Offset of field: n_primes_struct::sieve_a"]
        [::std::mem::offset_of!(n_primes_struct, sieve_a) - 24usize];
    ["Offset of field: n_primes_struct::sieve_b"]
        [::std::mem::offset_of!(n_primes_struct, sieve_b) - 32usize];
    ["Offset of field: n_primes_struct::sieve_i"]
        [::std::mem::offset_of!(n_primes_struct, sieve_i) - 40usize];
    ["Offset of field: n_primes_struct::sieve_num"]
        [::std::mem::offset_of!(n_primes_struct, sieve_num) - 48usize];
    ["Offset of field: n_primes_struct::sieve"]
        [::std::mem::offset_of!(n_primes_struct, sieve) - 56usize];
};
impl Default for n_primes_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type n_primes_t = [n_primes_struct; 1usize];
