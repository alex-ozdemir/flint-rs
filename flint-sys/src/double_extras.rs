/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_camel_case_types)]
use crate::deps::*;
use libc::{c_char, c_int, c_uint, c_void, size_t, FILE};


pub const D_BITS: u32 = 53;
pub const D_MIN_NORMAL_EXPONENT: i32 = -1022;
pub const D_MAX_NORMAL_EXPONENT: u32 = 1023;
pub const D_EXPONENT_BIAS: u32 = 1023;
pub const D_EXPONENT_SHIFT: u32 = 52;
#[repr(C)]
#[derive(Copy, Clone)]
pub union double_uint64_u {
    pub f: f64,
    pub i: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of double_uint64_u"][::std::mem::size_of::<double_uint64_u>() - 8usize];
    ["Alignment of double_uint64_u"][::std::mem::align_of::<double_uint64_u>() - 8usize];
    ["Offset of field: double_uint64_u::f"][::std::mem::offset_of!(double_uint64_u, f) - 0usize];
    ["Offset of field: double_uint64_u::i"][::std::mem::offset_of!(double_uint64_u, i) - 0usize];
};
impl Default for double_uint64_u {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn d_randtest(state: *mut flint_rand_s) -> f64;
    pub fn d_randtest_signed(
        state: *mut flint_rand_s,
        minexp: mp_limb_signed_t,
        maxexp: mp_limb_signed_t,
    ) -> f64;
    pub fn d_randtest_special(
        state: *mut flint_rand_s,
        minexp: mp_limb_signed_t,
        maxexp: mp_limb_signed_t,
    ) -> f64;
    pub fn d_lambertw(x: f64) -> f64;
    pub fn d_log2(x: f64) -> f64;
}
