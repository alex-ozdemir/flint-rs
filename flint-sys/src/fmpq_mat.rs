/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    #[link_name = "fmpq_mat_entry__extern"]
    pub fn fmpq_mat_entry(
        mat: *const fmpq_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> *mut fmpq;
    #[link_name = "fmpq_mat_entry_num__extern"]
    pub fn fmpq_mat_entry_num(
        mat: *const fmpq_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> *mut fmpz;
    #[link_name = "fmpq_mat_entry_den__extern"]
    pub fn fmpq_mat_entry_den(
        mat: *const fmpq_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> *mut fmpz;
    #[link_name = "fmpq_mat_nrows__extern"]
    pub fn fmpq_mat_nrows(mat: *const fmpq_mat_struct) -> mp_limb_signed_t;
    #[link_name = "fmpq_mat_ncols__extern"]
    pub fn fmpq_mat_ncols(mat: *const fmpq_mat_struct) -> mp_limb_signed_t;
    pub fn fmpq_mat_init(mat: *mut fmpq_mat_struct, rows: mp_limb_signed_t, cols: mp_limb_signed_t);
    pub fn fmpq_mat_init_set(mat1: *mut fmpq_mat_struct, mat2: *const fmpq_mat_struct);
    pub fn fmpq_mat_clear(mat: *mut fmpq_mat_struct);
    #[link_name = "fmpq_mat_swap__extern"]
    pub fn fmpq_mat_swap(mat1: *mut fmpq_mat_struct, mat2: *mut fmpq_mat_struct);
    pub fn fmpq_mat_swap_entrywise(mat1: *mut fmpq_mat_struct, mat2: *mut fmpq_mat_struct);
    pub fn fmpq_mat_window_init(
        window: *mut fmpq_mat_struct,
        mat: *const fmpq_mat_struct,
        r1: mp_limb_signed_t,
        c1: mp_limb_signed_t,
        r2: mp_limb_signed_t,
        c2: mp_limb_signed_t,
    );
    pub fn fmpq_mat_window_clear(window: *mut fmpq_mat_struct);
    pub fn fmpq_mat_concat_horizontal(
        res: *mut fmpq_mat_struct,
        mat1: *const fmpq_mat_struct,
        mat2: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_concat_vertical(
        res: *mut fmpq_mat_struct,
        mat1: *const fmpq_mat_struct,
        mat2: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_print(mat: *const fmpq_mat_struct);
    pub fn fmpq_mat_randbits(mat: *mut fmpq_mat_struct, state: *mut flint_rand_s, bits: mp_limb_t);
    pub fn fmpq_mat_randtest(mat: *mut fmpq_mat_struct, state: *mut flint_rand_s, bits: mp_limb_t);
    pub fn fmpq_mat_hilbert_matrix(mat: *mut fmpq_mat_struct);
    pub fn fmpq_mat_set(dest: *mut fmpq_mat_struct, src: *const fmpq_mat_struct);
    pub fn fmpq_mat_zero(mat: *mut fmpq_mat_struct);
    pub fn fmpq_mat_one(mat: *mut fmpq_mat_struct);
    pub fn fmpq_mat_transpose(rop: *mut fmpq_mat_struct, op: *const fmpq_mat_struct);
    pub fn fmpq_mat_add(
        mat: *mut fmpq_mat_struct,
        mat1: *const fmpq_mat_struct,
        mat2: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_sub(
        mat: *mut fmpq_mat_struct,
        mat1: *const fmpq_mat_struct,
        mat2: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_neg(rop: *mut fmpq_mat_struct, op: *const fmpq_mat_struct);
    pub fn fmpq_mat_scalar_mul_fmpq(
        rop: *mut fmpq_mat_struct,
        op: *const fmpq_mat_struct,
        x: *const fmpq,
    );
    pub fn fmpq_mat_scalar_mul_fmpz(
        rop: *mut fmpq_mat_struct,
        op: *const fmpq_mat_struct,
        x: *const fmpz,
    );
    pub fn fmpq_mat_scalar_div_fmpz(
        rop: *mut fmpq_mat_struct,
        op: *const fmpq_mat_struct,
        x: *const fmpz,
    );
    pub fn fmpq_mat_equal(
        mat1: *const fmpq_mat_struct,
        mat2: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_is_integral(mat: *const fmpq_mat_struct) -> libc::c_int;
    pub fn fmpq_mat_is_zero(mat: *const fmpq_mat_struct) -> libc::c_int;
    pub fn fmpq_mat_is_one(mat: *const fmpq_mat_struct) -> libc::c_int;
    #[link_name = "fmpq_mat_is_empty__extern"]
    pub fn fmpq_mat_is_empty(mat: *const fmpq_mat_struct) -> libc::c_int;
    #[link_name = "fmpq_mat_is_square__extern"]
    pub fn fmpq_mat_is_square(mat: *const fmpq_mat_struct) -> libc::c_int;
    pub fn fmpq_mat_get_fmpz_mat(
        dest: *mut fmpz_mat_struct,
        mat: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_get_fmpz_mat_entrywise(
        num: *mut fmpz_mat_struct,
        den: *mut fmpz_mat_struct,
        mat: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_get_fmpz_mat_matwise(
        num: *mut fmpz_mat_struct,
        den: *mut fmpz,
        mat: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_get_fmpz_mat_rowwise(
        num: *mut fmpz_mat_struct,
        den: *mut fmpz,
        mat: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_get_fmpz_mat_colwise(
        num: *mut fmpz_mat_struct,
        den: *mut fmpz,
        mat: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_get_fmpz_mat_rowwise_2(
        num: *mut fmpz_mat_struct,
        num2: *mut fmpz_mat_struct,
        den: *mut fmpz,
        mat: *const fmpq_mat_struct,
        mat2: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_get_fmpz_mat_mod_fmpz(
        dest: *mut fmpz_mat_struct,
        mat: *const fmpq_mat_struct,
        mod_: *const fmpz,
    );
    pub fn fmpq_mat_set_fmpz_mat(dest: *mut fmpq_mat_struct, src: *const fmpz_mat_struct);
    pub fn fmpq_mat_set_fmpz_mat_div_fmpz(
        X: *mut fmpq_mat_struct,
        Xmod: *const fmpz_mat_struct,
        div: *const fmpz,
    );
    pub fn fmpq_mat_set_fmpz_mat_mod_fmpz(
        X: *mut fmpq_mat_struct,
        Xmod: *const fmpz_mat_struct,
        mod_: *const fmpz,
    ) -> libc::c_int;
    pub fn fmpq_mat_mul_direct(
        C: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_mul_cleared(
        C: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_mul(
        C: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_mul_fmpz_mat(
        C: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpz_mat_struct,
    );
    pub fn fmpq_mat_mul_r_fmpz_mat(
        C: *mut fmpq_mat_struct,
        A: *const fmpz_mat_struct,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_mul_fmpq_vec(
        c: *mut fmpq,
        A: *const fmpq_mat_struct,
        b: *const fmpq,
        blen: mp_limb_signed_t,
    );
    pub fn fmpq_mat_mul_fmpz_vec(
        c: *mut fmpq,
        A: *const fmpq_mat_struct,
        b: *const fmpz,
        blen: mp_limb_signed_t,
    );
    pub fn fmpq_mat_mul_fmpq_vec_ptr(
        c: *const *mut fmpq,
        A: *const fmpq_mat_struct,
        b: *const *const fmpq,
        blen: mp_limb_signed_t,
    );
    pub fn fmpq_mat_mul_fmpz_vec_ptr(
        c: *const *mut fmpq,
        A: *const fmpq_mat_struct,
        b: *const *const fmpz,
        blen: mp_limb_signed_t,
    );
    pub fn fmpq_mat_fmpq_vec_mul(
        c: *mut fmpq,
        a: *const fmpq,
        alen: mp_limb_signed_t,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_fmpz_vec_mul(
        c: *mut fmpq,
        a: *const fmpz,
        alen: mp_limb_signed_t,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_fmpq_vec_mul_ptr(
        c: *const *mut fmpq,
        a: *const *const fmpq,
        alen: mp_limb_signed_t,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_fmpz_vec_mul_ptr(
        c: *const *mut fmpq,
        a: *const *const fmpz,
        alen: mp_limb_signed_t,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_kronecker_product(
        C: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    );
    pub fn fmpq_mat_swap_rows(
        mat: *mut fmpq_mat_struct,
        perm: *mut mp_limb_signed_t,
        r: mp_limb_signed_t,
        s: mp_limb_signed_t,
    );
    pub fn fmpq_mat_swap_cols(
        mat: *mut fmpq_mat_struct,
        perm: *mut mp_limb_signed_t,
        r: mp_limb_signed_t,
        s: mp_limb_signed_t,
    );
    pub fn fmpq_mat_invert_rows(mat: *mut fmpq_mat_struct, perm: *mut mp_limb_signed_t);
    pub fn fmpq_mat_invert_cols(mat: *mut fmpq_mat_struct, perm: *mut mp_limb_signed_t);
    pub fn fmpq_mat_trace(trace: *mut fmpq, mat: *const fmpq_mat_struct);
    pub fn fmpq_mat_det(det: *mut fmpq, mat: *const fmpq_mat_struct);
    pub fn fmpq_mat_solve_fmpz_mat_fraction_free(
        X: *mut fmpq_mat_struct,
        A: *const fmpz_mat_struct,
        B: *const fmpz_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_solve_fraction_free(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_solve_fmpz_mat_dixon(
        X: *mut fmpq_mat_struct,
        A: *const fmpz_mat_struct,
        B: *const fmpz_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_solve_dixon(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_solve_fmpz_mat_multi_mod(
        X: *mut fmpq_mat_struct,
        A: *const fmpz_mat_struct,
        B: *const fmpz_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_solve_multi_mod(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_can_solve_fmpz_mat_multi_mod(
        X: *mut fmpq_mat_struct,
        A: *const fmpz_mat_struct,
        B: *const fmpz_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_can_solve_multi_mod(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_can_solve_fraction_free(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_can_solve_fmpz_mat_dixon(
        X: *mut fmpq_mat_struct,
        A: *const fmpz_mat_struct,
        B: *const fmpz_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_can_solve_dixon(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_solve_fmpz_mat(
        X: *mut fmpq_mat_struct,
        A: *const fmpz_mat_struct,
        B: *const fmpz_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_solve(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_can_solve(
        X: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
        B: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn fmpq_mat_inv(B: *mut fmpq_mat_struct, A: *const fmpq_mat_struct) -> libc::c_int;
    pub fn fmpq_mat_pivot(
        perm: *mut mp_limb_signed_t,
        mat: *mut fmpq_mat_struct,
        r: mp_limb_signed_t,
        c: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn fmpq_mat_rref_classical(
        B: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn fmpq_mat_rref_fraction_free(
        B: *mut fmpq_mat_struct,
        A: *const fmpq_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn fmpq_mat_rref(B: *mut fmpq_mat_struct, A: *const fmpq_mat_struct) -> mp_limb_signed_t;
    pub fn fmpq_mat_gso(B: *mut fmpq_mat_struct, A: *const fmpq_mat_struct);
    pub fn fmpq_mat_similarity(A: *mut fmpq_mat_struct, r: mp_limb_signed_t, d: *mut fmpq);
    pub fn _fmpq_mat_charpoly(coeffs: *mut fmpz, den: *mut fmpz, mat: *const fmpq_mat_struct);
    pub fn fmpq_mat_charpoly(pol: *mut fmpq_poly_struct, mat: *const fmpq_mat_struct);
    pub fn _fmpq_mat_minpoly(
        coeffs: *mut fmpz,
        den: *mut fmpz,
        mat: *const fmpq_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn fmpq_mat_minpoly(pol: *mut fmpq_poly_struct, mat: *const fmpq_mat_struct);
}
