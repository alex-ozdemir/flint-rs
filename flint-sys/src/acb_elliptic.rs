/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    pub fn acb_elliptic_k(k: *mut acb_struct, m: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_elliptic_k_jet(
        w: acb_ptr,
        m: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn _acb_elliptic_k_series(
        res: acb_ptr,
        m: acb_srcptr,
        zlen: mp_limb_signed_t,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_k_series(
        res: *mut acb_poly_struct,
        m: *const acb_poly_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_e(res: *mut acb_struct, m: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_elliptic_rf(
        res: *mut acb_struct,
        x: *const acb_struct,
        y: *const acb_struct,
        z: *const acb_struct,
        flags: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_rj(
        res: *mut acb_struct,
        x: *const acb_struct,
        y: *const acb_struct,
        z: *const acb_struct,
        p: *const acb_struct,
        flags: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_rj_carlson(
        res: *mut acb_struct,
        x: *const acb_struct,
        y: *const acb_struct,
        z: *const acb_struct,
        p: *const acb_struct,
        flags: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_rj_integration(
        res: *mut acb_struct,
        x: *const acb_struct,
        y: *const acb_struct,
        z: *const acb_struct,
        p: *const acb_struct,
        flags: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_rg(
        res: *mut acb_struct,
        x: *const acb_struct,
        y: *const acb_struct,
        z: *const acb_struct,
        flags: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_rc1(res: *mut acb_struct, x: *const acb_struct, prec: mp_limb_signed_t);
    pub fn acb_elliptic_f(
        res: *mut acb_struct,
        phi: *const acb_struct,
        m: *const acb_struct,
        times_pi: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_e_inc(
        res: *mut acb_struct,
        phi: *const acb_struct,
        m: *const acb_struct,
        times_pi: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_pi(
        r: *mut acb_struct,
        n: *const acb_struct,
        m: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_pi_inc(
        res: *mut acb_struct,
        n: *const acb_struct,
        phi: *const acb_struct,
        m: *const acb_struct,
        times_pi: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_p(
        r: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_p_prime(
        r: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_p_jet(
        r: acb_ptr,
        z: *const acb_struct,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn _acb_elliptic_p_series(
        res: acb_ptr,
        z: acb_srcptr,
        zlen: mp_limb_signed_t,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_p_series(
        res: *mut acb_poly_struct,
        z: *const acb_poly_struct,
        tau: *const acb_struct,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_zeta(
        res: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_sigma(
        res: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_roots(
        e1: *mut acb_struct,
        e2: *mut acb_struct,
        e3: *mut acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_invariants(
        g2: *mut acb_struct,
        g3: *mut acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn acb_elliptic_inv_p(
        res: *mut acb_struct,
        z: *const acb_struct,
        tau: *const acb_struct,
        prec: mp_limb_signed_t,
    );
}
