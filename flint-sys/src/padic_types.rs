/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct padic_struct {
    pub u: fmpz,
    pub v: mp_limb_signed_t,
    pub N: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of padic_struct"][::std::mem::size_of::<padic_struct>() - 24usize];
    ["Alignment of padic_struct"][::std::mem::align_of::<padic_struct>() - 8usize];
    ["Offset of field: padic_struct::u"][::std::mem::offset_of!(padic_struct, u) - 0usize];
    ["Offset of field: padic_struct::v"][::std::mem::offset_of!(padic_struct, v) - 8usize];
    ["Offset of field: padic_struct::N"][::std::mem::offset_of!(padic_struct, N) - 16usize];
};
impl Default for padic_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type padic_t = [padic_struct; 1usize];
pub const padic_print_mode_PADIC_TERSE: padic_print_mode = 0;
pub const padic_print_mode_PADIC_SERIES: padic_print_mode = 1;
pub const padic_print_mode_PADIC_VAL_UNIT: padic_print_mode = 2;
pub type padic_print_mode = libc::c_uint;
#[repr(C)]
pub struct padic_ctx_struct {
    pub p: fmpz_t,
    pub pinv: f64,
    pub pow: *mut fmpz,
    pub min: mp_limb_signed_t,
    pub max: mp_limb_signed_t,
    pub mode: padic_print_mode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of padic_ctx_struct"][::std::mem::size_of::<padic_ctx_struct>() - 48usize];
    ["Alignment of padic_ctx_struct"][::std::mem::align_of::<padic_ctx_struct>() - 8usize];
    ["Offset of field: padic_ctx_struct::p"][::std::mem::offset_of!(padic_ctx_struct, p) - 0usize];
    ["Offset of field: padic_ctx_struct::pinv"]
        [::std::mem::offset_of!(padic_ctx_struct, pinv) - 8usize];
    ["Offset of field: padic_ctx_struct::pow"]
        [::std::mem::offset_of!(padic_ctx_struct, pow) - 16usize];
    ["Offset of field: padic_ctx_struct::min"]
        [::std::mem::offset_of!(padic_ctx_struct, min) - 24usize];
    ["Offset of field: padic_ctx_struct::max"]
        [::std::mem::offset_of!(padic_ctx_struct, max) - 32usize];
    ["Offset of field: padic_ctx_struct::mode"]
        [::std::mem::offset_of!(padic_ctx_struct, mode) - 40usize];
};
impl Default for padic_ctx_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type padic_ctx_t = [padic_ctx_struct; 1usize];
#[repr(C)]
pub struct padic_inv_struct {
    pub n: mp_limb_signed_t,
    pub pow: *mut fmpz,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of padic_inv_struct"][::std::mem::size_of::<padic_inv_struct>() - 16usize];
    ["Alignment of padic_inv_struct"][::std::mem::align_of::<padic_inv_struct>() - 8usize];
    ["Offset of field: padic_inv_struct::n"][::std::mem::offset_of!(padic_inv_struct, n) - 0usize];
    ["Offset of field: padic_inv_struct::pow"]
        [::std::mem::offset_of!(padic_inv_struct, pow) - 8usize];
};
impl Default for padic_inv_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type padic_inv_t = [padic_inv_struct; 1usize];
#[repr(C)]
pub struct padic_mat_struct {
    pub mat: fmpz_mat_struct,
    pub val: mp_limb_signed_t,
    pub N: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of padic_mat_struct"][::std::mem::size_of::<padic_mat_struct>() - 48usize];
    ["Alignment of padic_mat_struct"][::std::mem::align_of::<padic_mat_struct>() - 8usize];
    ["Offset of field: padic_mat_struct::mat"]
        [::std::mem::offset_of!(padic_mat_struct, mat) - 0usize];
    ["Offset of field: padic_mat_struct::val"]
        [::std::mem::offset_of!(padic_mat_struct, val) - 32usize];
    ["Offset of field: padic_mat_struct::N"][::std::mem::offset_of!(padic_mat_struct, N) - 40usize];
};
impl Default for padic_mat_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type padic_mat_t = [padic_mat_struct; 1usize];
#[repr(C)]
pub struct padic_poly_struct {
    pub coeffs: *mut fmpz,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub val: mp_limb_signed_t,
    pub N: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of padic_poly_struct"][::std::mem::size_of::<padic_poly_struct>() - 40usize];
    ["Alignment of padic_poly_struct"][::std::mem::align_of::<padic_poly_struct>() - 8usize];
    ["Offset of field: padic_poly_struct::coeffs"]
        [::std::mem::offset_of!(padic_poly_struct, coeffs) - 0usize];
    ["Offset of field: padic_poly_struct::alloc"]
        [::std::mem::offset_of!(padic_poly_struct, alloc) - 8usize];
    ["Offset of field: padic_poly_struct::length"]
        [::std::mem::offset_of!(padic_poly_struct, length) - 16usize];
    ["Offset of field: padic_poly_struct::val"]
        [::std::mem::offset_of!(padic_poly_struct, val) - 24usize];
    ["Offset of field: padic_poly_struct::N"]
        [::std::mem::offset_of!(padic_poly_struct, N) - 32usize];
};
impl Default for padic_poly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type padic_poly_t = [padic_poly_struct; 1usize];
