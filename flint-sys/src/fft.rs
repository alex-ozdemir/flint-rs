/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    pub fn flint_mpn_sumdiff_n(
        s: mp_ptr,
        d: mp_ptr,
        x: mp_srcptr,
        y: mp_srcptr,
        n: mp_size_t,
    ) -> mp_limb_t;
    #[link_name = "mpn_addmod_2expp1_1__extern"]
    pub fn mpn_addmod_2expp1_1(r: *mut mp_limb_t, limbs: mp_size_t, c: mp_limb_signed_t);
    pub fn fft_combine_limbs(
        res: *mut mp_limb_t,
        poly: *mut *mut mp_limb_t,
        length: mp_limb_signed_t,
        coeff_limbs: mp_size_t,
        output_limbs: mp_size_t,
        total_limbs: mp_size_t,
    );
    pub fn fft_combine_bits(
        res: *mut mp_limb_t,
        poly: *mut *mut mp_limb_t,
        length: mp_limb_signed_t,
        bits: mp_limb_t,
        output_limbs: mp_size_t,
        total_limbs: mp_size_t,
    );
    pub fn fft_split_limbs(
        poly: *mut *mut mp_limb_t,
        limbs: mp_srcptr,
        total_limbs: mp_size_t,
        coeff_limbs: mp_size_t,
        output_limbs: mp_size_t,
    ) -> mp_size_t;
    pub fn fft_split_bits(
        poly: *mut *mut mp_limb_t,
        limbs: mp_srcptr,
        total_limbs: mp_size_t,
        bits: mp_limb_t,
        output_limbs: mp_size_t,
    ) -> mp_size_t;
    pub fn fermat_to_mpz(m: *mut __mpz_struct, i: *mut mp_limb_t, limbs: mp_size_t);
    pub fn mpn_normmod_2expp1(t: *mut mp_limb_t, limbs: mp_size_t);
    pub fn butterfly_lshB(
        t: *mut mp_limb_t,
        u: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        limbs: mp_size_t,
        x: mp_size_t,
        y: mp_size_t,
    );
    pub fn butterfly_rshB(
        t: *mut mp_limb_t,
        u: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        limbs: mp_size_t,
        x: mp_size_t,
        y: mp_size_t,
    );
    pub fn mpn_negmod_2expp1(z: *mut mp_limb_t, a: *const mp_limb_t, limbs: mp_size_t);
    pub fn mpn_mul_2expmod_2expp1(
        t: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        limbs: mp_size_t,
        d: mp_limb_t,
    );
    pub fn mpn_div_2expmod_2expp1(
        t: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        limbs: mp_size_t,
        d: mp_limb_t,
    );
    pub fn fft_adjust(
        r: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i: mp_size_t,
        limbs: mp_size_t,
        w: mp_limb_t,
    );
    pub fn fft_butterfly(
        s: *mut mp_limb_t,
        t: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        i: mp_size_t,
        limbs: mp_size_t,
        w: mp_limb_t,
    );
    pub fn ifft_butterfly(
        s: *mut mp_limb_t,
        t: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        i: mp_size_t,
        limbs: mp_size_t,
        w: mp_limb_t,
    );
    pub fn fft_radix2(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
    );
    pub fn fft_truncate1(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        trunc: mp_size_t,
    );
    pub fn fft_truncate(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        trunc: mp_size_t,
    );
    pub fn ifft_radix2(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
    );
    pub fn ifft_truncate1(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        trunc: mp_size_t,
    );
    pub fn ifft_truncate(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        trunc: mp_size_t,
    );
    pub fn fft_butterfly_sqrt2(
        s: *mut mp_limb_t,
        t: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        i: mp_size_t,
        limbs: mp_size_t,
        w: mp_limb_t,
        temp: *mut mp_limb_t,
    );
    pub fn ifft_butterfly_sqrt2(
        s: *mut mp_limb_t,
        t: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        i: mp_size_t,
        limbs: mp_size_t,
        w: mp_limb_t,
        temp: *mut mp_limb_t,
    );
    pub fn fft_adjust_sqrt2(
        r: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i: mp_size_t,
        limbs: mp_size_t,
        w: mp_limb_t,
        temp: *mut mp_limb_t,
    );
    pub fn fft_truncate_sqrt2(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
        trunc: mp_size_t,
    );
    pub fn ifft_truncate_sqrt2(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
        trunc: mp_size_t,
    );
    pub fn mul_truncate_sqrt2(
        r1: mp_ptr,
        i1: mp_srcptr,
        n1: mp_size_t,
        i2: mp_srcptr,
        n2: mp_size_t,
        depth: mp_limb_t,
        w: mp_limb_t,
    );
    pub fn fft_butterfly_twiddle(
        u: *mut mp_limb_t,
        v: *mut mp_limb_t,
        s: *mut mp_limb_t,
        t: *mut mp_limb_t,
        limbs: mp_size_t,
        b1: mp_limb_t,
        b2: mp_limb_t,
    );
    pub fn ifft_butterfly_twiddle(
        u: *mut mp_limb_t,
        v: *mut mp_limb_t,
        s: *mut mp_limb_t,
        t: *mut mp_limb_t,
        limbs: mp_size_t,
        b1: mp_limb_t,
        b2: mp_limb_t,
    );
    pub fn fft_radix2_twiddle(
        ii: *mut *mut mp_limb_t,
        is: mp_size_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        ws: mp_size_t,
        r: mp_size_t,
        c: mp_size_t,
        rs: mp_size_t,
    );
    pub fn ifft_radix2_twiddle(
        ii: *mut *mut mp_limb_t,
        is: mp_size_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        ws: mp_size_t,
        r: mp_size_t,
        c: mp_size_t,
        rs: mp_size_t,
    );
    pub fn fft_truncate1_twiddle(
        ii: *mut *mut mp_limb_t,
        is: mp_size_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        ws: mp_size_t,
        r: mp_size_t,
        c: mp_size_t,
        rs: mp_size_t,
        trunc: mp_size_t,
    );
    pub fn ifft_truncate1_twiddle(
        ii: *mut *mut mp_limb_t,
        is: mp_size_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        ws: mp_size_t,
        r: mp_size_t,
        c: mp_size_t,
        rs: mp_size_t,
        trunc: mp_size_t,
    );
    pub fn fft_mfa_truncate_sqrt2(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
        n1: mp_size_t,
        trunc: mp_size_t,
    );
    pub fn ifft_mfa_truncate_sqrt2(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
        n1: mp_size_t,
        trunc: mp_size_t,
    );
    pub fn mul_mfa_truncate_sqrt2(
        r1: mp_ptr,
        i1: mp_srcptr,
        n1: mp_size_t,
        i2: mp_srcptr,
        n2: mp_size_t,
        depth: mp_limb_t,
        w: mp_limb_t,
    );
    pub fn fft_mfa_truncate_sqrt2_outer(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
        n1: mp_size_t,
        trunc: mp_size_t,
    );
    pub fn fft_mfa_truncate_sqrt2_inner(
        ii: *mut *mut mp_limb_t,
        jj: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
        n1: mp_size_t,
        trunc: mp_size_t,
        tt: *mut *mut mp_limb_t,
    );
    pub fn ifft_mfa_truncate_sqrt2_outer(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
        n1: mp_size_t,
        trunc: mp_size_t,
    );
    pub fn fft_negacyclic(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
    );
    pub fn ifft_negacyclic(
        ii: *mut *mut mp_limb_t,
        n: mp_size_t,
        w: mp_limb_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        temp: *mut *mut mp_limb_t,
    );
    pub fn fft_naive_convolution_1(
        r: *mut mp_limb_t,
        ii: *mut mp_limb_t,
        jj: *mut mp_limb_t,
        m: mp_size_t,
    );
    pub fn _fft_mulmod_2expp1(
        r1: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        r_limbs: mp_size_t,
        depth: mp_limb_t,
        w: mp_limb_t,
    );
    pub fn fft_adjust_limbs(limbs: mp_size_t) -> mp_limb_signed_t;
    pub fn fft_mulmod_2expp1(
        r: *mut mp_limb_t,
        i1: *mut mp_limb_t,
        i2: *mut mp_limb_t,
        n: mp_size_t,
        w: mp_size_t,
        tt: *mut mp_limb_t,
    );
    pub fn flint_mpn_mul_fft_main(
        r1: mp_ptr,
        i1: mp_srcptr,
        n1: mp_size_t,
        i2: mp_srcptr,
        n2: mp_size_t,
    );
    pub fn fft_convolution_basic(
        ii: *mut *mut mp_limb_t,
        jj: *mut *mut mp_limb_t,
        depth: mp_limb_signed_t,
        limbs: mp_limb_signed_t,
        trunc: mp_limb_signed_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        s1: *mut *mut mp_limb_t,
        tt: *mut *mut mp_limb_t,
    );
    pub fn fft_convolution(
        ii: *mut *mut mp_limb_t,
        jj: *mut *mut mp_limb_t,
        depth: mp_limb_signed_t,
        limbs: mp_limb_signed_t,
        trunc: mp_limb_signed_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        s1: *mut *mut mp_limb_t,
        tt: *mut *mut mp_limb_t,
    );
    #[doc = " FFT Precaching"]
    pub fn fft_precache(
        jj: *mut *mut mp_limb_t,
        depth: mp_limb_signed_t,
        limbs: mp_limb_signed_t,
        trunc: mp_limb_signed_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        s1: *mut *mut mp_limb_t,
    );
    pub fn fft_convolution_precache(
        ii: *mut *mut mp_limb_t,
        jj: *mut *mut mp_limb_t,
        depth: mp_limb_signed_t,
        limbs: mp_limb_signed_t,
        trunc: mp_limb_signed_t,
        t1: *mut *mut mp_limb_t,
        t2: *mut *mut mp_limb_t,
        s1: *mut *mut mp_limb_t,
        tt: *mut *mut mp_limb_t,
    );
}
