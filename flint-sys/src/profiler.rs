/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_camel_case_types)]
use crate::deps::*;
use libc::{c_char, c_int, c_uint, c_void, size_t, FILE};


pub const FLINT_NUM_CLOCKS: u32 = 20;
pub const FLINT_CLOCKSPEED: f64 = 3100000000.0;
pub const FLINT_CLOCK_SCALE_FACTOR: f64 = 0.0003225806451612903;
pub const DURATION_THRESHOLD: f64 = 5000.0;
pub const DURATION_TARGET: f64 = 10000.0;
#[repr(C)]
pub struct _bindgen_ty_2 {
    pub size: mp_limb_t,
    pub peak: mp_limb_t,
    pub hwm: mp_limb_t,
    pub rss: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_2"][::std::mem::size_of::<_bindgen_ty_2>() - 32usize];
    ["Alignment of _bindgen_ty_2"][::std::mem::align_of::<_bindgen_ty_2>() - 8usize];
    ["Offset of field: _bindgen_ty_2::size"][::std::mem::offset_of!(_bindgen_ty_2, size) - 0usize];
    ["Offset of field: _bindgen_ty_2::peak"][::std::mem::offset_of!(_bindgen_ty_2, peak) - 8usize];
    ["Offset of field: _bindgen_ty_2::hwm"][::std::mem::offset_of!(_bindgen_ty_2, hwm) - 16usize];
    ["Offset of field: _bindgen_ty_2::rss"][::std::mem::offset_of!(_bindgen_ty_2, rss) - 24usize];
};
impl Default for _bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type meminfo_t = [_bindgen_ty_2; 1usize];
#[repr(C)]
pub struct _bindgen_ty_3 {
    pub cpu: mp_limb_signed_t,
    pub wall: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_3"][::std::mem::size_of::<_bindgen_ty_3>() - 16usize];
    ["Alignment of _bindgen_ty_3"][::std::mem::align_of::<_bindgen_ty_3>() - 8usize];
    ["Offset of field: _bindgen_ty_3::cpu"][::std::mem::offset_of!(_bindgen_ty_3, cpu) - 0usize];
    ["Offset of field: _bindgen_ty_3::wall"][::std::mem::offset_of!(_bindgen_ty_3, wall) - 8usize];
};
impl Default for _bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type timeit_t = [_bindgen_ty_3; 1usize];
pub type profile_target_t =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void, count: mp_limb_t)>;
extern "C" {
    pub fn get_memory_usage(meminfo: *mut _bindgen_ty_2);
    pub static mut clock_last: [f64; 20usize];
    pub static mut clock_accum: [f64; 20usize];
    pub fn prof_repeat(
        min: *mut f64,
        max: *mut f64,
        target: profile_target_t,
        arg: *mut ::std::os::raw::c_void,
    );
}
