/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    #[link_name = "arb_mat_entry_ptr__extern"]
    pub fn arb_mat_entry_ptr(
        mat: *mut arb_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> arb_ptr;
    pub fn arb_mat_init(mat: *mut arb_mat_struct, r: mp_limb_signed_t, c: mp_limb_signed_t);
    pub fn arb_mat_clear(mat: *mut arb_mat_struct);
    #[link_name = "arb_mat_swap__extern"]
    pub fn arb_mat_swap(mat1: *mut arb_mat_struct, mat2: *mut arb_mat_struct);
    #[link_name = "arb_mat_swap_entrywise__extern"]
    pub fn arb_mat_swap_entrywise(mat1: *mut arb_mat_struct, mat2: *mut arb_mat_struct);
    pub fn arb_mat_window_init(
        window: *mut arb_mat_struct,
        mat: *const arb_mat_struct,
        r1: mp_limb_signed_t,
        c1: mp_limb_signed_t,
        r2: mp_limb_signed_t,
        c2: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_window_clear__extern"]
    pub fn arb_mat_window_clear(window: *mut arb_mat_struct);
    pub fn arb_mat_set(dest: *mut arb_mat_struct, src: *const arb_mat_struct);
    pub fn arb_mat_set_fmpz_mat(dest: *mut arb_mat_struct, src: *const fmpz_mat_struct);
    pub fn arb_mat_set_round_fmpz_mat(
        dest: *mut arb_mat_struct,
        src: *const fmpz_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_set_fmpq_mat(
        dest: *mut arb_mat_struct,
        src: *const fmpq_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_randtest(
        mat: *mut arb_mat_struct,
        state: *mut flint_rand_s,
        prec: mp_limb_signed_t,
        mag_bits: mp_limb_signed_t,
    );
    pub fn arb_mat_randtest_cho(
        mat: *mut arb_mat_struct,
        state: *mut flint_rand_s,
        prec: mp_limb_signed_t,
        mag_bits: mp_limb_signed_t,
    );
    pub fn arb_mat_randtest_spd(
        mat: *mut arb_mat_struct,
        state: *mut flint_rand_s,
        prec: mp_limb_signed_t,
        mag_bits: mp_limb_signed_t,
    );
    pub fn arb_mat_fprintd(file: *mut FILE, mat: *const arb_mat_struct, digits: mp_limb_signed_t);
    pub fn arb_mat_printd(mat: *const arb_mat_struct, digits: mp_limb_signed_t);
    pub fn arb_mat_eq(mat1: *const arb_mat_struct, mat2: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_ne(mat1: *const arb_mat_struct, mat2: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_equal(mat1: *const arb_mat_struct, mat2: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_overlaps(
        mat1: *const arb_mat_struct,
        mat2: *const arb_mat_struct,
    ) -> libc::c_int;
    pub fn arb_mat_contains(
        mat1: *const arb_mat_struct,
        mat2: *const arb_mat_struct,
    ) -> libc::c_int;
    pub fn arb_mat_contains_fmpq_mat(
        mat1: *const arb_mat_struct,
        mat2: *const fmpq_mat_struct,
    ) -> libc::c_int;
    pub fn arb_mat_contains_fmpz_mat(
        mat1: *const arb_mat_struct,
        mat2: *const fmpz_mat_struct,
    ) -> libc::c_int;
    #[link_name = "arb_mat_is_empty__extern"]
    pub fn arb_mat_is_empty(mat: *const arb_mat_struct) -> libc::c_int;
    #[link_name = "arb_mat_is_square__extern"]
    pub fn arb_mat_is_square(mat: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_is_exact(A: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_is_zero(mat: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_is_finite(mat: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_is_triu(mat: *const arb_mat_struct) -> libc::c_int;
    pub fn arb_mat_is_tril(mat: *const arb_mat_struct) -> libc::c_int;
    #[link_name = "arb_mat_is_diag__extern"]
    pub fn arb_mat_is_diag(mat: *const arb_mat_struct) -> libc::c_int;
    #[link_name = "arb_mat_get_mid__extern"]
    pub fn arb_mat_get_mid(B: *mut arb_mat_struct, A: *const arb_mat_struct);
    #[link_name = "arb_mat_add_error_mag__extern"]
    pub fn arb_mat_add_error_mag(mat: *mut arb_mat_struct, err: *const mag_struct);
    pub fn arb_mat_zero(mat: *mut arb_mat_struct);
    pub fn arb_mat_one(mat: *mut arb_mat_struct);
    pub fn arb_mat_ones(mat: *mut arb_mat_struct);
    pub fn arb_mat_indeterminate(mat: *mut arb_mat_struct);
    pub fn arb_mat_hilbert(mat: *mut arb_mat_struct, prec: mp_limb_signed_t);
    pub fn arb_mat_pascal(
        mat: *mut arb_mat_struct,
        triangular: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_stirling(mat: *mut arb_mat_struct, kind: libc::c_int, prec: mp_limb_signed_t);
    pub fn arb_mat_dct(mat: *mut arb_mat_struct, type_: libc::c_int, prec: mp_limb_signed_t);
    pub fn arb_mat_transpose(mat1: *mut arb_mat_struct, mat2: *const arb_mat_struct);
    pub fn arb_mat_bound_inf_norm(b: *mut mag_struct, A: *const arb_mat_struct);
    pub fn arb_mat_frobenius_norm(
        res: *mut arb_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_bound_frobenius_norm(b: *mut mag_struct, A: *const arb_mat_struct);
    pub fn arb_mat_neg(dest: *mut arb_mat_struct, src: *const arb_mat_struct);
    pub fn arb_mat_add(
        res: *mut arb_mat_struct,
        mat1: *const arb_mat_struct,
        mat2: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_sub(
        res: *mut arb_mat_struct,
        mat1: *const arb_mat_struct,
        mat2: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_mul(
        res: *mut arb_mat_struct,
        mat1: *const arb_mat_struct,
        mat2: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_mul_classical(
        C: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_mul_threaded(
        C: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn _arb_mat_addmul_rad_mag_fast(
        C: *mut arb_mat_struct,
        A: mag_srcptr,
        B: mag_srcptr,
        ar: mp_limb_signed_t,
        ac: mp_limb_signed_t,
        bc: mp_limb_signed_t,
    );
    pub fn arb_mat_mul_block(
        C: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_mul_entrywise(
        res: *mut arb_mat_struct,
        mat1: *const arb_mat_struct,
        mat2: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_sqr_classical(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_sqr(B: *mut arb_mat_struct, A: *const arb_mat_struct, prec: mp_limb_signed_t);
    pub fn arb_mat_pow_ui(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        exp: mp_limb_t,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_mul_2exp_si__extern"]
    pub fn arb_mat_scalar_mul_2exp_si(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_addmul_si__extern"]
    pub fn arb_mat_scalar_addmul_si(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_mul_si__extern"]
    pub fn arb_mat_scalar_mul_si(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_div_si__extern"]
    pub fn arb_mat_scalar_div_si(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_addmul_fmpz__extern"]
    pub fn arb_mat_scalar_addmul_fmpz(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: *const fmpz,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_mul_fmpz__extern"]
    pub fn arb_mat_scalar_mul_fmpz(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: *const fmpz,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_div_fmpz__extern"]
    pub fn arb_mat_scalar_div_fmpz(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: *const fmpz,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_addmul_arb__extern"]
    pub fn arb_mat_scalar_addmul_arb(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: *const arb_struct,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_mul_arb__extern"]
    pub fn arb_mat_scalar_mul_arb(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: *const arb_struct,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_scalar_div_arb__extern"]
    pub fn arb_mat_scalar_div_arb(
        B: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        c: *const arb_struct,
        prec: mp_limb_signed_t,
    );
    pub fn _arb_mat_vector_mul_row(
        res: arb_ptr,
        v: arb_srcptr,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn _arb_mat_vector_mul_col(
        res: arb_ptr,
        A: *const arb_mat_struct,
        v: arb_srcptr,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_vector_mul_row(
        res: arb_ptr,
        v: arb_srcptr,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_vector_mul_col(
        res: arb_ptr,
        A: *const arb_mat_struct,
        v: arb_srcptr,
        prec: mp_limb_signed_t,
    );
    #[link_name = "arb_mat_swap_rows__extern"]
    pub fn arb_mat_swap_rows(
        mat: *mut arb_mat_struct,
        perm: *mut mp_limb_signed_t,
        r: mp_limb_signed_t,
        s: mp_limb_signed_t,
    );
    pub fn arb_mat_find_pivot_partial(
        mat: *const arb_mat_struct,
        start_row: mp_limb_signed_t,
        end_row: mp_limb_signed_t,
        c: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn arb_mat_solve_tril_classical(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_solve_tril_recursive(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_solve_tril(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_solve_triu_classical(
        X: *mut arb_mat_struct,
        U: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_solve_triu_recursive(
        X: *mut arb_mat_struct,
        U: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_solve_triu(
        X: *mut arb_mat_struct,
        U: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_lu_classical(
        P: *mut mp_limb_signed_t,
        LU: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_lu_recursive(
        P: *mut mp_limb_signed_t,
        LU: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_lu(
        P: *mut mp_limb_signed_t,
        LU: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_solve_lu_precomp(
        X: *mut arb_mat_struct,
        perm: *const mp_limb_signed_t,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_solve(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_solve_lu(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_solve_precond(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_solve_preapprox(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        R: *const arb_mat_struct,
        T: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_approx_mul(
        C: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_approx_solve_triu(
        X: *mut arb_mat_struct,
        U: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_approx_solve_tril(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        B: *const arb_mat_struct,
        unit: libc::c_int,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_approx_lu(
        P: *mut mp_limb_signed_t,
        LU: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_approx_solve_lu_precomp(
        X: *mut arb_mat_struct,
        perm: *const mp_limb_signed_t,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_approx_solve(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_approx_inv(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_inv(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_det_lu(det: *mut arb_struct, A: *const arb_mat_struct, prec: mp_limb_signed_t);
    pub fn arb_mat_det_precond(
        det: *mut arb_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_det(det: *mut arb_struct, A: *const arb_mat_struct, prec: mp_limb_signed_t);
    pub fn _arb_mat_cholesky_banachiewicz(
        A: *mut arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_cho(
        L: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_solve_cho_precomp(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_inv_cho_precomp(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_spd_solve(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_spd_inv(
        X: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn _arb_mat_ldl_inplace(A: *mut arb_mat_struct, prec: mp_limb_signed_t) -> libc::c_int;
    pub fn _arb_mat_ldl_golub_and_van_loan(
        A: *mut arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_ldl(
        L: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_solve_ldl_precomp(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        B: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_inv_ldl_precomp(
        X: *mut arb_mat_struct,
        L: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_exp_taylor_sum(
        S: *mut arb_mat_struct,
        A: *const arb_mat_struct,
        N: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_exp(B: *mut arb_mat_struct, A: *const arb_mat_struct, prec: mp_limb_signed_t);
    pub fn _arb_mat_charpoly(poly: arb_ptr, mat: *const arb_mat_struct, prec: mp_limb_signed_t);
    pub fn arb_mat_charpoly(
        poly: *mut arb_poly_struct,
        mat: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn _arb_mat_companion(mat: *mut arb_mat_struct, poly: arb_srcptr, prec: mp_limb_signed_t);
    pub fn arb_mat_companion(
        mat: *mut arb_mat_struct,
        poly: *const arb_poly_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_trace(
        trace: *mut arb_struct,
        mat: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn _arb_mat_diag_prod(
        res: *mut arb_struct,
        A: *const arb_mat_struct,
        a: mp_limb_signed_t,
        b: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_diag_prod(
        res: *mut arb_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_entrywise_is_zero(dest: *mut fmpz_mat_struct, src: *const arb_mat_struct);
    pub fn arb_mat_entrywise_not_is_zero(dest: *mut fmpz_mat_struct, src: *const arb_mat_struct);
    pub fn arb_mat_count_is_zero(mat: *const arb_mat_struct) -> mp_limb_signed_t;
    #[link_name = "arb_mat_count_not_is_zero__extern"]
    pub fn arb_mat_count_not_is_zero(mat: *const arb_mat_struct) -> mp_limb_signed_t;
    #[link_name = "arb_mat_allocated_bytes__extern"]
    pub fn arb_mat_allocated_bytes(x: *const arb_mat_struct) -> mp_limb_signed_t;
    pub fn arb_mat_spd_get_fmpz_mat(
        B: *mut fmpz_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn arb_mat_spd_lll_reduce(
        U: *mut fmpz_mat_struct,
        A: *const arb_mat_struct,
        prec: mp_limb_signed_t,
    );
    pub fn arb_mat_spd_is_lll_reduced(
        A: *const arb_mat_struct,
        tol_exp: mp_limb_signed_t,
        prec: mp_limb_signed_t,
    ) -> libc::c_int;
}
