/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


pub const NMOD_MAT_MUL_TRANSPOSE_CUTOFF: u32 = 20;
pub const NMOD_MAT_SOLVE_TRI_ROWS_CUTOFF: u32 = 64;
pub const NMOD_MAT_SOLVE_TRI_COLS_CUTOFF: u32 = 64;
pub const NMOD_MAT_OPTIMAL_MODULUS_BITS: u32 = 59;
extern "C" {
    #[link_name = "nmod_mat_get_entry__extern"]
    pub fn nmod_mat_get_entry(
        mat: *const nmod_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> mp_limb_t;
    #[link_name = "nmod_mat_entry_ptr__extern"]
    pub fn nmod_mat_entry_ptr(
        mat: *const nmod_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> *mut mp_limb_t;
    #[link_name = "nmod_mat_nrows__extern"]
    pub fn nmod_mat_nrows(mat: *const nmod_mat_struct) -> mp_limb_signed_t;
    #[link_name = "nmod_mat_ncols__extern"]
    pub fn nmod_mat_ncols(mat: *const nmod_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_mat_set_mod(mat: *mut nmod_mat_struct, n: mp_limb_t);
    pub fn nmod_mat_init(
        mat: *mut nmod_mat_struct,
        rows: mp_limb_signed_t,
        cols: mp_limb_signed_t,
        n: mp_limb_t,
    );
    pub fn nmod_mat_init_set(mat: *mut nmod_mat_struct, src: *const nmod_mat_struct);
    pub fn nmod_mat_clear(mat: *mut nmod_mat_struct);
    pub fn nmod_mat_one(mat: *mut nmod_mat_struct);
    pub fn nmod_mat_swap(mat1: *mut nmod_mat_struct, mat2: *mut nmod_mat_struct);
    #[link_name = "nmod_mat_swap_entrywise__extern"]
    pub fn nmod_mat_swap_entrywise(mat1: *mut nmod_mat_struct, mat2: *mut nmod_mat_struct);
    pub fn nmod_mat_window_init(
        window: *mut nmod_mat_struct,
        mat: *const nmod_mat_struct,
        r1: mp_limb_signed_t,
        c1: mp_limb_signed_t,
        r2: mp_limb_signed_t,
        c2: mp_limb_signed_t,
    );
    pub fn nmod_mat_window_clear(window: *mut nmod_mat_struct);
    pub fn nmod_mat_concat_horizontal(
        res: *mut nmod_mat_struct,
        mat1: *const nmod_mat_struct,
        mat2: *const nmod_mat_struct,
    );
    pub fn nmod_mat_concat_vertical(
        res: *mut nmod_mat_struct,
        mat1: *const nmod_mat_struct,
        mat2: *const nmod_mat_struct,
    );
    pub fn nmod_mat_randtest(mat: *mut nmod_mat_struct, state: *mut flint_rand_s);
    pub fn nmod_mat_randfull(mat: *mut nmod_mat_struct, state: *mut flint_rand_s);
    pub fn nmod_mat_randpermdiag(
        mat: *mut nmod_mat_struct,
        state: *mut flint_rand_s,
        diag: mp_srcptr,
        n: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn nmod_mat_randrank(
        arg1: *mut nmod_mat_struct,
        state: *mut flint_rand_s,
        rank: mp_limb_signed_t,
    );
    pub fn nmod_mat_randops(
        mat: *mut nmod_mat_struct,
        state: *mut flint_rand_s,
        count: mp_limb_signed_t,
    );
    pub fn nmod_mat_randtril(
        mat: *mut nmod_mat_struct,
        state: *mut flint_rand_s,
        unit: libc::c_int,
    );
    pub fn nmod_mat_randtriu(
        mat: *mut nmod_mat_struct,
        state: *mut flint_rand_s,
        unit: libc::c_int,
    );
    pub fn nmod_mat_fprint_pretty(file: *mut FILE, mat: *const nmod_mat_struct) -> libc::c_int;
    pub fn nmod_mat_fprint(f: *mut FILE, mat: *const nmod_mat_struct) -> libc::c_int;
    pub fn nmod_mat_print_pretty(mat: *const nmod_mat_struct);
    pub fn nmod_mat_print(mat: *const nmod_mat_struct) -> libc::c_int;
    pub fn nmod_mat_equal(
        mat1: *const nmod_mat_struct,
        mat2: *const nmod_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_mat_zero(mat: *mut nmod_mat_struct);
    pub fn nmod_mat_is_zero(mat: *const nmod_mat_struct) -> libc::c_int;
    pub fn nmod_mat_is_one(mat: *const nmod_mat_struct) -> libc::c_int;
    pub fn nmod_mat_is_zero_row(mat: *const nmod_mat_struct, i: mp_limb_signed_t) -> libc::c_int;
    #[link_name = "nmod_mat_is_empty__extern"]
    pub fn nmod_mat_is_empty(mat: *const nmod_mat_struct) -> libc::c_int;
    #[link_name = "nmod_mat_is_square__extern"]
    pub fn nmod_mat_is_square(mat: *const nmod_mat_struct) -> libc::c_int;
    pub fn nmod_mat_set(B: *mut nmod_mat_struct, A: *const nmod_mat_struct);
    pub fn nmod_mat_transpose(B: *mut nmod_mat_struct, A: *const nmod_mat_struct);
    pub fn nmod_mat_add(
        C: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn nmod_mat_sub(
        C: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn nmod_mat_neg(B: *mut nmod_mat_struct, A: *const nmod_mat_struct);
    pub fn nmod_mat_scalar_mul(B: *mut nmod_mat_struct, A: *const nmod_mat_struct, c: mp_limb_t);
    pub fn nmod_mat_scalar_addmul_ui(
        dest: *mut nmod_mat_struct,
        X: *const nmod_mat_struct,
        Y: *const nmod_mat_struct,
        b: mp_limb_t,
    );
    pub fn nmod_mat_scalar_mul_fmpz(
        res: *mut nmod_mat_struct,
        M: *const nmod_mat_struct,
        c: *const fmpz,
    );
    pub fn nmod_mat_mul(
        C: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn nmod_mat_mul_blas(
        C: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_mat_mul_classical(
        C: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn _nmod_mat_mul_classical_threaded_pool_op(
        D: *mut nmod_mat_struct,
        C: *const nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        op: libc::c_int,
        threads: *mut thread_pool_handle,
        num_threads: mp_limb_signed_t,
    );
    pub fn nmod_mat_mul_classical_threaded(
        C: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn nmod_mat_mul_strassen(
        C: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn _nmod_mat_mul_classical_op(
        D: *mut nmod_mat_struct,
        C: *const nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        op: libc::c_int,
    );
    pub fn nmod_mat_addmul(
        D: *mut nmod_mat_struct,
        C: *const nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn nmod_mat_submul(
        D: *mut nmod_mat_struct,
        C: *const nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    );
    pub fn nmod_mat_mul_nmod_vec(
        c: *mut mp_limb_t,
        A: *const nmod_mat_struct,
        b: *const mp_limb_t,
        blen: mp_limb_signed_t,
    );
    pub fn nmod_mat_mul_nmod_vec_ptr(
        c: *const *mut mp_limb_t,
        A: *const nmod_mat_struct,
        b: *const *const mp_limb_t,
        blen: mp_limb_signed_t,
    );
    pub fn nmod_mat_nmod_vec_mul(
        c: *mut mp_limb_t,
        a: *const mp_limb_t,
        alen: mp_limb_signed_t,
        B: *const nmod_mat_struct,
    );
    pub fn nmod_mat_nmod_vec_mul_ptr(
        c: *const *mut mp_limb_t,
        a: *const *const mp_limb_t,
        alen: mp_limb_signed_t,
        B: *const nmod_mat_struct,
    );
    pub fn _nmod_mat_pow(dest: *mut nmod_mat_struct, mat: *const nmod_mat_struct, pow: mp_limb_t);
    pub fn nmod_mat_pow(dest: *mut nmod_mat_struct, mat: *const nmod_mat_struct, pow: mp_limb_t);
    pub fn nmod_mat_trace(mat: *const nmod_mat_struct) -> mp_limb_t;
    pub fn _nmod_mat_det(A: *mut nmod_mat_struct) -> mp_limb_t;
    pub fn nmod_mat_det(A: *const nmod_mat_struct) -> mp_limb_t;
    pub fn _nmod_mat_det_howell(A: *mut nmod_mat_struct) -> mp_limb_t;
    pub fn nmod_mat_det_howell(A: *const nmod_mat_struct) -> mp_limb_t;
    pub fn nmod_mat_rank(A: *const nmod_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_mat_inv(B: *mut nmod_mat_struct, A: *const nmod_mat_struct) -> libc::c_int;
    #[link_name = "nmod_mat_swap_rows__extern"]
    pub fn nmod_mat_swap_rows(
        mat: *mut nmod_mat_struct,
        perm: *mut mp_limb_signed_t,
        r: mp_limb_signed_t,
        s: mp_limb_signed_t,
    );
    #[link_name = "nmod_mat_invert_rows__extern"]
    pub fn nmod_mat_invert_rows(mat: *mut nmod_mat_struct, perm: *mut mp_limb_signed_t);
    #[link_name = "nmod_mat_swap_cols__extern"]
    pub fn nmod_mat_swap_cols(
        mat: *mut nmod_mat_struct,
        perm: *mut mp_limb_signed_t,
        r: mp_limb_signed_t,
        s: mp_limb_signed_t,
    );
    #[link_name = "nmod_mat_invert_cols__extern"]
    pub fn nmod_mat_invert_cols(mat: *mut nmod_mat_struct, perm: *mut mp_limb_signed_t);
    pub fn nmod_mat_permute_rows(
        mat: *mut nmod_mat_struct,
        perm_act: *const mp_limb_signed_t,
        perm_store: *mut mp_limb_signed_t,
    );
    pub fn nmod_mat_solve_tril(
        X: *mut nmod_mat_struct,
        L: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        unit: libc::c_int,
    );
    pub fn nmod_mat_solve_tril_recursive(
        X: *mut nmod_mat_struct,
        L: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        unit: libc::c_int,
    );
    pub fn nmod_mat_solve_tril_classical(
        X: *mut nmod_mat_struct,
        L: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        unit: libc::c_int,
    );
    pub fn nmod_mat_solve_triu(
        X: *mut nmod_mat_struct,
        U: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        unit: libc::c_int,
    );
    pub fn nmod_mat_solve_triu_recursive(
        X: *mut nmod_mat_struct,
        U: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        unit: libc::c_int,
    );
    pub fn nmod_mat_solve_triu_classical(
        X: *mut nmod_mat_struct,
        U: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
        unit: libc::c_int,
    );
    pub fn nmod_mat_lu(
        P: *mut mp_limb_signed_t,
        A: *mut nmod_mat_struct,
        rank_check: libc::c_int,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_lu_classical(
        P: *mut mp_limb_signed_t,
        A: *mut nmod_mat_struct,
        rank_check: libc::c_int,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_lu_classical_delayed(
        P: *mut mp_limb_signed_t,
        A: *mut nmod_mat_struct,
        rank_check: libc::c_int,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_lu_recursive(
        P: *mut mp_limb_signed_t,
        A: *mut nmod_mat_struct,
        rank_check: libc::c_int,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_solve(
        X: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_mat_solve_vec(x: mp_ptr, A: *const nmod_mat_struct, b: mp_srcptr) -> libc::c_int;
    pub fn nmod_mat_can_solve_inner(
        rank: *mut mp_limb_signed_t,
        prm: *mut mp_limb_signed_t,
        piv: *mut mp_limb_signed_t,
        X: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_mat_can_solve(
        X: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
        B: *const nmod_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_mat_rref(A: *mut nmod_mat_struct) -> mp_limb_signed_t;
    pub fn _nmod_mat_rref(
        A: *mut nmod_mat_struct,
        pivots_nonpivots: *mut mp_limb_signed_t,
        P: *mut mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_rref_classical(A: *mut nmod_mat_struct) -> mp_limb_signed_t;
    pub fn _nmod_mat_rref_classical(
        A: *mut nmod_mat_struct,
        pivots_nonpivots: *mut mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_rref_storjohann(A: *mut nmod_mat_struct) -> mp_limb_signed_t;
    pub fn _nmod_mat_rref_storjohann(
        A: *mut nmod_mat_struct,
        pivots_nonpivots: *mut mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_reduce_row(
        M: *mut nmod_mat_struct,
        P: *mut mp_limb_signed_t,
        L: *mut mp_limb_signed_t,
        m: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_nullspace(
        X: *mut nmod_mat_struct,
        A: *const nmod_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn nmod_mat_strong_echelon_form(A: *mut nmod_mat_struct);
    pub fn nmod_mat_howell_form(A: *mut nmod_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_mat_similarity(M: *mut nmod_mat_struct, r: mp_limb_signed_t, d: mp_limb_t);
    pub fn nmod_mat_set_entry(
        mat: *mut nmod_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
        x: mp_limb_t,
    );
}
