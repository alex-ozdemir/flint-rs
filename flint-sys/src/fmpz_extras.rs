/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    #[link_name = "fmpz_add_inline__extern"]
    pub fn fmpz_add_inline(z: *mut fmpz, x: *const fmpz, y: *const fmpz);
    #[link_name = "fmpz_add_si_inline__extern"]
    pub fn fmpz_add_si_inline(z: *mut fmpz, x: *const fmpz, y: mp_limb_signed_t);
    #[link_name = "fmpz_sub_si_inline__extern"]
    pub fn fmpz_sub_si_inline(z: *mut fmpz, x: *const fmpz, y: mp_limb_signed_t);
    #[link_name = "fmpz_add_ui_inline__extern"]
    pub fn fmpz_add_ui_inline(z: *mut fmpz, x: *const fmpz, y: mp_limb_t);
    #[link_name = "fmpz_add2_fmpz_si_inline__extern"]
    pub fn fmpz_add2_fmpz_si_inline(
        z: *mut fmpz,
        x: *const fmpz,
        y: *const fmpz,
        c: mp_limb_signed_t,
    );
    #[link_name = "fmpz_set_mpn_large__extern"]
    pub fn fmpz_set_mpn_large(z: *mut fmpz, src: mp_srcptr, n: mp_size_t, negative: libc::c_int);
    #[link_name = "fmpz_adiv_q_2exp__extern"]
    pub fn fmpz_adiv_q_2exp(z: *mut fmpz, x: *const fmpz, exp: mp_limb_t);
    #[link_name = "_fmpz_set_si_small__extern"]
    pub fn _fmpz_set_si_small(x: *mut fmpz, v: mp_limb_signed_t);
    pub fn _fmpz_sub_small_large(x: *const fmpz, y: *const fmpz) -> mp_limb_signed_t;
    #[link_name = "_fmpz_sub_small__extern"]
    pub fn _fmpz_sub_small(x: *const fmpz, y: *const fmpz) -> mp_limb_signed_t;
    #[link_name = "_fmpz_size__extern"]
    pub fn _fmpz_size(f: *const fmpz) -> mp_size_t;
    #[link_name = "fmpz_ui_mul_ui__extern"]
    pub fn fmpz_ui_mul_ui(r: *mut fmpz, a: mp_limb_t, b: mp_limb_t);
    #[link_name = "fmpz_max__extern"]
    pub fn fmpz_max(z: *mut fmpz, x: *const fmpz, y: *const fmpz);
    #[link_name = "fmpz_min__extern"]
    pub fn fmpz_min(z: *mut fmpz, x: *const fmpz, y: *const fmpz);
    pub fn fmpz_lshift_mpn(
        z: *mut fmpz,
        d: mp_srcptr,
        dn: mp_size_t,
        sgnbit: libc::c_int,
        shift: mp_limb_t,
    );
    #[link_name = "fmpz_allocated_bytes__extern"]
    pub fn fmpz_allocated_bytes(x: *const fmpz) -> mp_limb_signed_t;
}
