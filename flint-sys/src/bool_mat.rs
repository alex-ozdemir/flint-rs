/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
pub struct bool_mat_struct {
    pub entries: *mut libc::c_int,
    pub r: mp_limb_signed_t,
    pub c: mp_limb_signed_t,
    pub rows: *mut *mut libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bool_mat_struct"][::std::mem::size_of::<bool_mat_struct>() - 32usize];
    ["Alignment of bool_mat_struct"][::std::mem::align_of::<bool_mat_struct>() - 8usize];
    ["Offset of field: bool_mat_struct::entries"]
        [::std::mem::offset_of!(bool_mat_struct, entries) - 0usize];
    ["Offset of field: bool_mat_struct::r"][::std::mem::offset_of!(bool_mat_struct, r) - 8usize];
    ["Offset of field: bool_mat_struct::c"][::std::mem::offset_of!(bool_mat_struct, c) - 16usize];
    ["Offset of field: bool_mat_struct::rows"]
        [::std::mem::offset_of!(bool_mat_struct, rows) - 24usize];
};
impl Default for bool_mat_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type bool_mat_t = [bool_mat_struct; 1usize];
extern "C" {
    #[link_name = "bool_mat_get_entry__extern"]
    pub fn bool_mat_get_entry(
        mat: *const bool_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> libc::c_int;
    #[link_name = "bool_mat_set_entry__extern"]
    pub fn bool_mat_set_entry(
        mat: *mut bool_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
        value: libc::c_int,
    );
    pub fn bool_mat_init(mat: *mut bool_mat_struct, r: mp_limb_signed_t, c: mp_limb_signed_t);
    pub fn bool_mat_clear(mat: *mut bool_mat_struct);
    #[link_name = "bool_mat_swap__extern"]
    pub fn bool_mat_swap(mat1: *mut bool_mat_struct, mat2: *mut bool_mat_struct);
    pub fn bool_mat_set(dest: *mut bool_mat_struct, src: *const bool_mat_struct);
    pub fn bool_mat_randtest(mat: *mut bool_mat_struct, state: *mut flint_rand_s);
    pub fn bool_mat_randtest_diagonal(mat: *mut bool_mat_struct, state: *mut flint_rand_s);
    pub fn bool_mat_randtest_nilpotent(mat: *mut bool_mat_struct, state: *mut flint_rand_s);
    pub fn bool_mat_fprint(file: *mut FILE, mat: *const bool_mat_struct);
    pub fn bool_mat_print(mat: *const bool_mat_struct);
    pub fn bool_mat_equal(
        mat1: *const bool_mat_struct,
        mat2: *const bool_mat_struct,
    ) -> libc::c_int;
    pub fn bool_mat_any(mat: *const bool_mat_struct) -> libc::c_int;
    pub fn bool_mat_all(mat: *const bool_mat_struct) -> libc::c_int;
    pub fn bool_mat_is_diagonal(mat: *const bool_mat_struct) -> libc::c_int;
    pub fn bool_mat_is_lower_triangular(mat: *const bool_mat_struct) -> libc::c_int;
    pub fn bool_mat_is_transitive(mat: *const bool_mat_struct) -> libc::c_int;
    pub fn bool_mat_is_nilpotent(mat: *const bool_mat_struct) -> libc::c_int;
    #[link_name = "bool_mat_is_empty__extern"]
    pub fn bool_mat_is_empty(mat: *const bool_mat_struct) -> libc::c_int;
    #[link_name = "bool_mat_is_square__extern"]
    pub fn bool_mat_is_square(mat: *const bool_mat_struct) -> libc::c_int;
    pub fn bool_mat_zero(mat: *mut bool_mat_struct);
    pub fn bool_mat_one(mat: *mut bool_mat_struct);
    pub fn bool_mat_directed_path(mat: *mut bool_mat_struct);
    pub fn bool_mat_directed_cycle(mat: *mut bool_mat_struct);
    pub fn bool_mat_transpose(mat1: *mut bool_mat_struct, mat2: *const bool_mat_struct);
    pub fn bool_mat_complement(mat1: *mut bool_mat_struct, mat2: *const bool_mat_struct);
    pub fn bool_mat_add(
        res: *mut bool_mat_struct,
        mat1: *const bool_mat_struct,
        mat2: *const bool_mat_struct,
    );
    pub fn bool_mat_mul(
        res: *mut bool_mat_struct,
        mat1: *const bool_mat_struct,
        mat2: *const bool_mat_struct,
    );
    pub fn bool_mat_mul_entrywise(
        res: *mut bool_mat_struct,
        mat1: *const bool_mat_struct,
        mat2: *const bool_mat_struct,
    );
    pub fn bool_mat_pow_ui(B: *mut bool_mat_struct, A: *const bool_mat_struct, exp: mp_limb_t);
    #[link_name = "bool_mat_sqr__extern"]
    pub fn bool_mat_sqr(B: *mut bool_mat_struct, A: *const bool_mat_struct);
    pub fn bool_mat_trace(mat: *const bool_mat_struct) -> libc::c_int;
    pub fn bool_mat_nilpotency_degree(mat: *const bool_mat_struct) -> mp_limb_signed_t;
    pub fn bool_mat_transitive_closure(dest: *mut bool_mat_struct, src: *const bool_mat_struct);
    pub fn bool_mat_get_strongly_connected_components(
        partition: *mut mp_limb_signed_t,
        A: *const bool_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn bool_mat_all_pairs_longest_walk(
        B: *mut fmpz_mat_struct,
        A: *const bool_mat_struct,
    ) -> mp_limb_signed_t;
}
