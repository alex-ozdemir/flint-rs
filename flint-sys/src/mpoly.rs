/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


pub const MPOLY_GCD_USE_HENSEL: u32 = 1;
pub const MPOLY_GCD_USE_BROWN: u32 = 2;
pub const MPOLY_GCD_USE_ZIPPEL: u32 = 4;
pub const MPOLY_GCD_USE_ZIPPEL2: u32 = 8;
pub const MPOLY_GCD_USE_PRS: u32 = 16;
pub const MPOLY_GCD_USE_ALL: u32 = 31;
pub const MPOLY_FACTOR_USE_ZAS: u32 = 1;
pub const MPOLY_FACTOR_USE_WANG: u32 = 2;
pub const MPOLY_FACTOR_USE_ZIP: u32 = 4;
pub const MPOLY_FACTOR_USE_ALL: u32 = 7;
#[repr(C)]
pub struct mpoly_heap_t {
    pub i: mp_limb_t,
    pub j: mp_limb_t,
    pub next: *mut mpoly_heap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_heap_t"][::std::mem::size_of::<mpoly_heap_t>() - 24usize];
    ["Alignment of mpoly_heap_t"][::std::mem::align_of::<mpoly_heap_t>() - 8usize];
    ["Offset of field: mpoly_heap_t::i"][::std::mem::offset_of!(mpoly_heap_t, i) - 0usize];
    ["Offset of field: mpoly_heap_t::j"][::std::mem::offset_of!(mpoly_heap_t, j) - 8usize];
    ["Offset of field: mpoly_heap_t::next"][::std::mem::offset_of!(mpoly_heap_t, next) - 16usize];
};
impl Default for mpoly_heap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct mpoly_nheap_t {
    pub i: mp_limb_t,
    pub j: mp_limb_t,
    pub next: *mut mpoly_nheap_t,
    pub p: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_nheap_t"][::std::mem::size_of::<mpoly_nheap_t>() - 32usize];
    ["Alignment of mpoly_nheap_t"][::std::mem::align_of::<mpoly_nheap_t>() - 8usize];
    ["Offset of field: mpoly_nheap_t::i"][::std::mem::offset_of!(mpoly_nheap_t, i) - 0usize];
    ["Offset of field: mpoly_nheap_t::j"][::std::mem::offset_of!(mpoly_nheap_t, j) - 8usize];
    ["Offset of field: mpoly_nheap_t::next"][::std::mem::offset_of!(mpoly_nheap_t, next) - 16usize];
    ["Offset of field: mpoly_nheap_t::p"][::std::mem::offset_of!(mpoly_nheap_t, p) - 24usize];
};
impl Default for mpoly_nheap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct mpoly_heap1_s {
    pub exp: mp_limb_t,
    pub next: *mut libc::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_heap1_s"][::std::mem::size_of::<mpoly_heap1_s>() - 16usize];
    ["Alignment of mpoly_heap1_s"][::std::mem::align_of::<mpoly_heap1_s>() - 8usize];
    ["Offset of field: mpoly_heap1_s::exp"][::std::mem::offset_of!(mpoly_heap1_s, exp) - 0usize];
    ["Offset of field: mpoly_heap1_s::next"][::std::mem::offset_of!(mpoly_heap1_s, next) - 8usize];
};
impl Default for mpoly_heap1_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mpoly_heap_s {
    pub exp: *mut mp_limb_t,
    pub next: *mut libc::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_heap_s"][::std::mem::size_of::<mpoly_heap_s>() - 16usize];
    ["Alignment of mpoly_heap_s"][::std::mem::align_of::<mpoly_heap_s>() - 8usize];
    ["Offset of field: mpoly_heap_s::exp"][::std::mem::offset_of!(mpoly_heap_s, exp) - 0usize];
    ["Offset of field: mpoly_heap_s::next"][::std::mem::offset_of!(mpoly_heap_s, next) - 8usize];
};
impl Default for mpoly_heap_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct mpoly_rbnode_ui_struct {
    pub key: mp_limb_t,
    pub up: mp_limb_signed_t,
    pub left: mp_limb_signed_t,
    pub right: mp_limb_signed_t,
    pub color: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_rbnode_ui_struct"][::std::mem::size_of::<mpoly_rbnode_ui_struct>() - 40usize];
    ["Alignment of mpoly_rbnode_ui_struct"]
        [::std::mem::align_of::<mpoly_rbnode_ui_struct>() - 8usize];
    ["Offset of field: mpoly_rbnode_ui_struct::key"]
        [::std::mem::offset_of!(mpoly_rbnode_ui_struct, key) - 0usize];
    ["Offset of field: mpoly_rbnode_ui_struct::up"]
        [::std::mem::offset_of!(mpoly_rbnode_ui_struct, up) - 8usize];
    ["Offset of field: mpoly_rbnode_ui_struct::left"]
        [::std::mem::offset_of!(mpoly_rbnode_ui_struct, left) - 16usize];
    ["Offset of field: mpoly_rbnode_ui_struct::right"]
        [::std::mem::offset_of!(mpoly_rbnode_ui_struct, right) - 24usize];
    ["Offset of field: mpoly_rbnode_ui_struct::color"]
        [::std::mem::offset_of!(mpoly_rbnode_ui_struct, color) - 32usize];
};
impl Default for mpoly_rbnode_ui_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct mpoly_rbtree_ui_struct {
    pub length: mp_limb_signed_t,
    pub nodes: *mut mpoly_rbnode_ui_struct,
    pub node_alloc: mp_limb_signed_t,
    pub data: *mut libc::c_char,
    pub data_alloc: mp_limb_signed_t,
    pub data_size: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_rbtree_ui_struct"][::std::mem::size_of::<mpoly_rbtree_ui_struct>() - 48usize];
    ["Alignment of mpoly_rbtree_ui_struct"]
        [::std::mem::align_of::<mpoly_rbtree_ui_struct>() - 8usize];
    ["Offset of field: mpoly_rbtree_ui_struct::length"]
        [::std::mem::offset_of!(mpoly_rbtree_ui_struct, length) - 0usize];
    ["Offset of field: mpoly_rbtree_ui_struct::nodes"]
        [::std::mem::offset_of!(mpoly_rbtree_ui_struct, nodes) - 8usize];
    ["Offset of field: mpoly_rbtree_ui_struct::node_alloc"]
        [::std::mem::offset_of!(mpoly_rbtree_ui_struct, node_alloc) - 16usize];
    ["Offset of field: mpoly_rbtree_ui_struct::data"]
        [::std::mem::offset_of!(mpoly_rbtree_ui_struct, data) - 24usize];
    ["Offset of field: mpoly_rbtree_ui_struct::data_alloc"]
        [::std::mem::offset_of!(mpoly_rbtree_ui_struct, data_alloc) - 32usize];
    ["Offset of field: mpoly_rbtree_ui_struct::data_size"]
        [::std::mem::offset_of!(mpoly_rbtree_ui_struct, data_size) - 40usize];
};
impl Default for mpoly_rbtree_ui_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mpoly_rbtree_ui_t = [mpoly_rbtree_ui_struct; 1usize];
#[repr(C)]
pub struct mpoly_rbnode_fmpz_struct {
    pub key: fmpz_t,
    pub up: mp_limb_signed_t,
    pub left: mp_limb_signed_t,
    pub right: mp_limb_signed_t,
    pub color: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_rbnode_fmpz_struct"]
        [::std::mem::size_of::<mpoly_rbnode_fmpz_struct>() - 40usize];
    ["Alignment of mpoly_rbnode_fmpz_struct"]
        [::std::mem::align_of::<mpoly_rbnode_fmpz_struct>() - 8usize];
    ["Offset of field: mpoly_rbnode_fmpz_struct::key"]
        [::std::mem::offset_of!(mpoly_rbnode_fmpz_struct, key) - 0usize];
    ["Offset of field: mpoly_rbnode_fmpz_struct::up"]
        [::std::mem::offset_of!(mpoly_rbnode_fmpz_struct, up) - 8usize];
    ["Offset of field: mpoly_rbnode_fmpz_struct::left"]
        [::std::mem::offset_of!(mpoly_rbnode_fmpz_struct, left) - 16usize];
    ["Offset of field: mpoly_rbnode_fmpz_struct::right"]
        [::std::mem::offset_of!(mpoly_rbnode_fmpz_struct, right) - 24usize];
    ["Offset of field: mpoly_rbnode_fmpz_struct::color"]
        [::std::mem::offset_of!(mpoly_rbnode_fmpz_struct, color) - 32usize];
};
impl Default for mpoly_rbnode_fmpz_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct mpoly_rbtree_fmpz_struct {
    pub length: mp_limb_signed_t,
    pub nodes: *mut mpoly_rbnode_fmpz_struct,
    pub node_alloc: mp_limb_signed_t,
    pub data: *mut libc::c_char,
    pub data_alloc: mp_limb_signed_t,
    pub data_size: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_rbtree_fmpz_struct"]
        [::std::mem::size_of::<mpoly_rbtree_fmpz_struct>() - 48usize];
    ["Alignment of mpoly_rbtree_fmpz_struct"]
        [::std::mem::align_of::<mpoly_rbtree_fmpz_struct>() - 8usize];
    ["Offset of field: mpoly_rbtree_fmpz_struct::length"]
        [::std::mem::offset_of!(mpoly_rbtree_fmpz_struct, length) - 0usize];
    ["Offset of field: mpoly_rbtree_fmpz_struct::nodes"]
        [::std::mem::offset_of!(mpoly_rbtree_fmpz_struct, nodes) - 8usize];
    ["Offset of field: mpoly_rbtree_fmpz_struct::node_alloc"]
        [::std::mem::offset_of!(mpoly_rbtree_fmpz_struct, node_alloc) - 16usize];
    ["Offset of field: mpoly_rbtree_fmpz_struct::data"]
        [::std::mem::offset_of!(mpoly_rbtree_fmpz_struct, data) - 24usize];
    ["Offset of field: mpoly_rbtree_fmpz_struct::data_alloc"]
        [::std::mem::offset_of!(mpoly_rbtree_fmpz_struct, data_alloc) - 32usize];
    ["Offset of field: mpoly_rbtree_fmpz_struct::data_size"]
        [::std::mem::offset_of!(mpoly_rbtree_fmpz_struct, data_size) - 40usize];
};
impl Default for mpoly_rbtree_fmpz_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mpoly_rbtree_fmpz_t = [mpoly_rbtree_fmpz_struct; 1usize];
#[repr(C)]
pub struct mpoly_univar_struct {
    pub coeffs: *mut libc::c_char,
    pub exps: *mut fmpz,
    pub length: mp_limb_signed_t,
    pub alloc: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_univar_struct"][::std::mem::size_of::<mpoly_univar_struct>() - 32usize];
    ["Alignment of mpoly_univar_struct"][::std::mem::align_of::<mpoly_univar_struct>() - 8usize];
    ["Offset of field: mpoly_univar_struct::coeffs"]
        [::std::mem::offset_of!(mpoly_univar_struct, coeffs) - 0usize];
    ["Offset of field: mpoly_univar_struct::exps"]
        [::std::mem::offset_of!(mpoly_univar_struct, exps) - 8usize];
    ["Offset of field: mpoly_univar_struct::length"]
        [::std::mem::offset_of!(mpoly_univar_struct, length) - 16usize];
    ["Offset of field: mpoly_univar_struct::alloc"]
        [::std::mem::offset_of!(mpoly_univar_struct, alloc) - 24usize];
};
impl Default for mpoly_univar_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mpoly_univar_t = [mpoly_univar_struct; 1usize];
#[repr(C)]
pub struct string_with_length_struct {
    pub str_: *mut libc::c_char,
    pub str_len: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of string_with_length_struct"]
        [::std::mem::size_of::<string_with_length_struct>() - 16usize];
    ["Alignment of string_with_length_struct"]
        [::std::mem::align_of::<string_with_length_struct>() - 8usize];
    ["Offset of field: string_with_length_struct::str_"]
        [::std::mem::offset_of!(string_with_length_struct, str_) - 0usize];
    ["Offset of field: string_with_length_struct::str_len"]
        [::std::mem::offset_of!(string_with_length_struct, str_len) - 8usize];
};
impl Default for string_with_length_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct mpoly_parse_struct {
    pub R: mpoly_void_ring_t,
    pub stack: *mut mp_limb_signed_t,
    pub stack_len: mp_limb_signed_t,
    pub stack_alloc: mp_limb_signed_t,
    pub estore: *mut libc::c_char,
    pub estore_len: mp_limb_signed_t,
    pub estore_alloc: mp_limb_signed_t,
    pub tmp: *mut libc::c_void,
    pub terminal_strings: *mut string_with_length_struct,
    pub terminal_values: *mut libc::c_char,
    pub terminals_alloc: mp_limb_signed_t,
    pub terminals_len: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mpoly_parse_struct"][::std::mem::size_of::<mpoly_parse_struct>() - 240usize];
    ["Alignment of mpoly_parse_struct"][::std::mem::align_of::<mpoly_parse_struct>() - 8usize];
    ["Offset of field: mpoly_parse_struct::R"]
        [::std::mem::offset_of!(mpoly_parse_struct, R) - 0usize];
    ["Offset of field: mpoly_parse_struct::stack"]
        [::std::mem::offset_of!(mpoly_parse_struct, stack) - 152usize];
    ["Offset of field: mpoly_parse_struct::stack_len"]
        [::std::mem::offset_of!(mpoly_parse_struct, stack_len) - 160usize];
    ["Offset of field: mpoly_parse_struct::stack_alloc"]
        [::std::mem::offset_of!(mpoly_parse_struct, stack_alloc) - 168usize];
    ["Offset of field: mpoly_parse_struct::estore"]
        [::std::mem::offset_of!(mpoly_parse_struct, estore) - 176usize];
    ["Offset of field: mpoly_parse_struct::estore_len"]
        [::std::mem::offset_of!(mpoly_parse_struct, estore_len) - 184usize];
    ["Offset of field: mpoly_parse_struct::estore_alloc"]
        [::std::mem::offset_of!(mpoly_parse_struct, estore_alloc) - 192usize];
    ["Offset of field: mpoly_parse_struct::tmp"]
        [::std::mem::offset_of!(mpoly_parse_struct, tmp) - 200usize];
    ["Offset of field: mpoly_parse_struct::terminal_strings"]
        [::std::mem::offset_of!(mpoly_parse_struct, terminal_strings) - 208usize];
    ["Offset of field: mpoly_parse_struct::terminal_values"]
        [::std::mem::offset_of!(mpoly_parse_struct, terminal_values) - 216usize];
    ["Offset of field: mpoly_parse_struct::terminals_alloc"]
        [::std::mem::offset_of!(mpoly_parse_struct, terminals_alloc) - 224usize];
    ["Offset of field: mpoly_parse_struct::terminals_len"]
        [::std::mem::offset_of!(mpoly_parse_struct, terminals_len) - 232usize];
};
impl Default for mpoly_parse_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mpoly_parse_t = [mpoly_parse_struct; 1usize];
extern "C" {
    #[link_name = "mpoly_divide_threads__extern"]
    pub fn mpoly_divide_threads(n: mp_limb_signed_t, la: f64, lb: f64) -> mp_limb_signed_t;
    pub fn mpoly_ctx_init(ctx: *mut mpoly_ctx_struct, nvars: mp_limb_signed_t, ord: ordering_t);
    pub fn mpoly_ctx_init_rand(
        mctx: *mut mpoly_ctx_struct,
        state: *mut flint_rand_s,
        max_nvars: mp_limb_signed_t,
    );
    pub fn mpoly_monomial_randbits_fmpz(
        exp: *mut fmpz,
        state: *mut flint_rand_s,
        exp_bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_ctx_clear(mctx: *mut mpoly_ctx_struct);
    #[link_name = "mpoly_words_per_exp_sp__extern"]
    pub fn mpoly_words_per_exp_sp(
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "mpoly_words_per_exp_mp__extern"]
    pub fn mpoly_words_per_exp_mp(
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "mpoly_words_per_exp__extern"]
    pub fn mpoly_words_per_exp(bits: mp_limb_t, mctx: *const mpoly_ctx_struct) -> mp_limb_signed_t;
    #[link_name = "mpoly_fix_bits__extern"]
    pub fn mpoly_fix_bits(bits: mp_limb_t, mctx: *const mpoly_ctx_struct) -> mp_limb_t;
    pub fn mpoly_rbtree_ui_init(T: *mut mpoly_rbtree_ui_struct, data_size: mp_limb_signed_t);
    pub fn mpoly_rbtree_ui_clear(T: *mut mpoly_rbtree_ui_struct);
    pub fn mpoly_rbtree_ui_lookup(
        T: *mut mpoly_rbtree_ui_struct,
        its_new: *mut libc::c_int,
        key: mp_limb_t,
    ) -> *mut libc::c_void;
    #[link_name = "mpoly_rbtree_ui_head__extern"]
    pub fn mpoly_rbtree_ui_head(T: *const mpoly_rbtree_ui_struct) -> mp_limb_signed_t;
    pub fn mpoly_rbtree_fmpz_init(T: *mut mpoly_rbtree_fmpz_struct, data_size: mp_limb_signed_t);
    pub fn mpoly_rbtree_fmpz_clear(T: *mut mpoly_rbtree_fmpz_struct);
    pub fn mpoly_rbtree_fmpz_lookup(
        T: *mut mpoly_rbtree_fmpz_struct,
        its_new: *mut libc::c_int,
        key: *const fmpz,
    ) -> *mut libc::c_void;
    #[link_name = "mpoly_rbtree_fmpz_head__extern"]
    pub fn mpoly_rbtree_fmpz_head(T: *const mpoly_rbtree_fmpz_struct) -> mp_limb_signed_t;
    #[link_name = "mpoly_ordering_randtest__extern"]
    pub fn mpoly_ordering_randtest(state: *mut flint_rand_s) -> ordering_t;
    #[link_name = "mpoly_ordering_isdeg__extern"]
    pub fn mpoly_ordering_isdeg(mctx: *const mpoly_ctx_struct) -> libc::c_int;
    #[link_name = "mpoly_ordering_isrev__extern"]
    pub fn mpoly_ordering_isrev(mctx: *const mpoly_ctx_struct) -> libc::c_int;
    pub fn mpoly_ordering_print(ord: ordering_t);
    #[link_name = "mpoly_monomial_zero__extern"]
    pub fn mpoly_monomial_zero(exp_ptr: *mut mp_limb_t, N: mp_limb_signed_t);
    #[link_name = "mpoly_monomial_add__extern"]
    pub fn mpoly_monomial_add(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_add_mp__extern"]
    pub fn mpoly_monomial_add_mp(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_sub__extern"]
    pub fn mpoly_monomial_sub(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_sub_mp__extern"]
    pub fn mpoly_monomial_sub_mp(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_madd__extern"]
    pub fn mpoly_monomial_madd(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        scalar: mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_madd_mp__extern"]
    pub fn mpoly_monomial_madd_mp(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        scalar: mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_madd_inplace_mp__extern"]
    pub fn mpoly_monomial_madd_inplace_mp(
        exp12: *mut mp_limb_t,
        scalar: mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_msub__extern"]
    pub fn mpoly_monomial_msub(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        scalar: mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_msub_mp__extern"]
    pub fn mpoly_monomial_msub_mp(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        scalar: mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_msub_ui_array__extern"]
    pub fn mpoly_monomial_msub_ui_array(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        scalar: *const mp_limb_t,
        scalar_limbs: mp_limb_signed_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_madd_ui_array__extern"]
    pub fn mpoly_monomial_madd_ui_array(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        scalar: *const mp_limb_t,
        scalar_limbs: mp_limb_signed_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_madd_fmpz__extern"]
    pub fn mpoly_monomial_madd_fmpz(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        scalar: *const fmpz,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_overflow_mask_sp__extern"]
    pub fn mpoly_overflow_mask_sp(bits: mp_limb_t) -> mp_limb_t;
    #[link_name = "mpoly_monomial_max1__extern"]
    pub fn mpoly_monomial_max1(
        exp2: mp_limb_t,
        exp3: mp_limb_t,
        bits: mp_limb_t,
        mask: mp_limb_t,
    ) -> mp_limb_t;
    #[link_name = "mpoly_monomial_max__extern"]
    pub fn mpoly_monomial_max(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        bits: mp_limb_t,
        N: mp_limb_signed_t,
        mask: mp_limb_t,
    );
    #[link_name = "mpoly_monomial_min1__extern"]
    pub fn mpoly_monomial_min1(
        exp2: mp_limb_t,
        exp3: mp_limb_t,
        bits: mp_limb_t,
        mask: mp_limb_t,
    ) -> mp_limb_t;
    #[link_name = "mpoly_monomial_min__extern"]
    pub fn mpoly_monomial_min(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        bits: mp_limb_t,
        N: mp_limb_signed_t,
        mask: mp_limb_t,
    );
    #[link_name = "mpoly_monomial_max_mp__extern"]
    pub fn mpoly_monomial_max_mp(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        bits: mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_min_mp__extern"]
    pub fn mpoly_monomial_min_mp(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        bits: mp_limb_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_overflows__extern"]
    pub fn mpoly_monomial_overflows(
        exp2: *mut mp_limb_t,
        N: mp_limb_signed_t,
        mask: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_overflows_mp__extern"]
    pub fn mpoly_monomial_overflows_mp(
        exp_ptr: *mut mp_limb_t,
        N: mp_limb_signed_t,
        bits: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_overflows1__extern"]
    pub fn mpoly_monomial_overflows1(exp: mp_limb_t, mask: mp_limb_t) -> libc::c_int;
    #[link_name = "mpoly_monomial_divides__extern"]
    pub fn mpoly_monomial_divides(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        mask: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_halves__extern"]
    pub fn mpoly_monomial_halves(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        N: mp_limb_signed_t,
        mask: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_divides_mp__extern"]
    pub fn mpoly_monomial_divides_mp(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        bits: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_halves_mp__extern"]
    pub fn mpoly_monomial_halves_mp(
        exp_ptr: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        N: mp_limb_signed_t,
        bits: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_divides_test__extern"]
    pub fn mpoly_monomial_divides_test(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        mask: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_divides_mp_test__extern"]
    pub fn mpoly_monomial_divides_mp_test(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        bits: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_divides1__extern"]
    pub fn mpoly_monomial_divides1(
        exp_ptr: *mut mp_limb_t,
        exp2: mp_limb_t,
        exp3: mp_limb_t,
        mask: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_halves1__extern"]
    pub fn mpoly_monomial_halves1(
        exp_ptr: *mut mp_limb_t,
        exp2: mp_limb_t,
        mask: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_set__extern"]
    pub fn mpoly_monomial_set(exp2: *mut mp_limb_t, exp3: *const mp_limb_t, N: mp_limb_signed_t);
    #[link_name = "mpoly_monomial_set_extra__extern"]
    pub fn mpoly_monomial_set_extra(
        exp2: *mut mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        offset: mp_limb_signed_t,
        extra: mp_limb_t,
    );
    #[link_name = "mpoly_copy_monomials__extern"]
    pub fn mpoly_copy_monomials(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        len: mp_limb_signed_t,
        N: mp_limb_signed_t,
    );
    #[link_name = "mpoly_monomial_swap__extern"]
    pub fn mpoly_monomial_swap(exp2: *mut mp_limb_t, exp3: *mut mp_limb_t, N: mp_limb_signed_t);
    #[link_name = "mpoly_monomial_mul_ui__extern"]
    pub fn mpoly_monomial_mul_ui(
        exp2: *mut mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        c: mp_limb_t,
    );
    #[link_name = "mpoly_monomial_mul_ui_mp__extern"]
    pub fn mpoly_monomial_mul_ui_mp(
        exp2: *mut mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        c: mp_limb_t,
    );
    pub fn mpoly_monomial_mul_fmpz(
        exp2: *mut mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        c: *const fmpz,
    );
    #[link_name = "mpoly_monomial_is_zero__extern"]
    pub fn mpoly_monomial_is_zero(exp: *const mp_limb_t, N: mp_limb_signed_t) -> libc::c_int;
    #[link_name = "mpoly_monomial_equal__extern"]
    pub fn mpoly_monomial_equal(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_equal_extra__extern"]
    pub fn mpoly_monomial_equal_extra(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        offset: mp_limb_signed_t,
        extra: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_cmp1__extern"]
    pub fn mpoly_monomial_cmp1(a: mp_limb_t, b: mp_limb_t, cmpmask: mp_limb_t) -> libc::c_int;
    #[link_name = "mpoly_monomial_gt1__extern"]
    pub fn mpoly_monomial_gt1(a: mp_limb_t, b: mp_limb_t, cmpmask: mp_limb_t) -> libc::c_int;
    #[link_name = "mpoly_monomial_ge1__extern"]
    pub fn mpoly_monomial_ge1(a: mp_limb_t, b: mp_limb_t, cmpmask: mp_limb_t) -> libc::c_int;
    #[link_name = "mpoly_monomial_lt__extern"]
    pub fn mpoly_monomial_lt(
        exp3: *const mp_limb_t,
        exp2: *const mp_limb_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_gt__extern"]
    pub fn mpoly_monomial_gt(
        exp3: *const mp_limb_t,
        exp2: *const mp_limb_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_lt_nomask__extern"]
    pub fn mpoly_monomial_lt_nomask(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_gt_nomask__extern"]
    pub fn mpoly_monomial_gt_nomask(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_lt_nomask_extra__extern"]
    pub fn mpoly_monomial_lt_nomask_extra(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        offset: mp_limb_signed_t,
        extra: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_gt_nomask_extra__extern"]
    pub fn mpoly_monomial_gt_nomask_extra(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        offset: mp_limb_signed_t,
        extra: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_cmp__extern"]
    pub fn mpoly_monomial_cmp(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_cmp_nomask__extern"]
    pub fn mpoly_monomial_cmp_nomask(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_cmp_nomask_extra__extern"]
    pub fn mpoly_monomial_cmp_nomask_extra(
        exp2: *const mp_limb_t,
        exp3: *const mp_limb_t,
        N: mp_limb_signed_t,
        offset: mp_limb_signed_t,
        extra: mp_limb_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_monomial_divides_tight__extern"]
    pub fn mpoly_monomial_divides_tight(
        e1: mp_limb_signed_t,
        e2: mp_limb_signed_t,
        prods: *mut mp_limb_signed_t,
        num: mp_limb_signed_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_max_degrees_tight__extern"]
    pub fn mpoly_max_degrees_tight(
        max_exp: *mut mp_limb_signed_t,
        exps: *mut mp_limb_t,
        len: mp_limb_signed_t,
        prods: *mut mp_limb_signed_t,
        num: mp_limb_signed_t,
    );
    #[link_name = "mpoly_geobucket_clog4__extern"]
    pub fn mpoly_geobucket_clog4(x: mp_limb_signed_t) -> mp_limb_signed_t;
    #[link_name = "pack_exp2__extern"]
    pub fn pack_exp2(e0: mp_limb_t, e1: mp_limb_t) -> mp_limb_t;
    #[link_name = "pack_exp3__extern"]
    pub fn pack_exp3(e0: mp_limb_t, e1: mp_limb_t, e2: mp_limb_t) -> mp_limb_t;
    #[link_name = "extract_exp__extern"]
    pub fn extract_exp(e: mp_limb_t, idx: libc::c_int, nvars: libc::c_int) -> mp_limb_t;
    pub fn _mpoly_bidegree(
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    pub fn mpoly_gen_fields_ui(
        exp: *mut mp_limb_t,
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gen_fields_fmpz(
        exp: *mut fmpz,
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gen_bits_required(
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    #[link_name = "mpoly_gen_index__extern"]
    pub fn mpoly_gen_index(v: mp_limb_signed_t, mctx: *const mpoly_ctx_struct) -> mp_limb_signed_t;
    pub fn mpoly_gen_offset_shift_sp(
        offset: *mut mp_limb_signed_t,
        shift: *mut mp_limb_signed_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gen_monomial_offset_shift_sp(
        mexp: *mut mp_limb_t,
        offset: *mut mp_limb_signed_t,
        shift: *mut mp_limb_signed_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gen_monomial_sp(
        oneexp: *mut mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gen_offset_mp(
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_gen_monomial_offset_mp(
        mexp: *mut mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_compose_mat_gen(
        M: *mut fmpz_mat_struct,
        c: *const mp_limb_signed_t,
        mctxB: *const mpoly_ctx_struct,
        mctxAC: *const mpoly_ctx_struct,
    );
    pub fn mpoly_compose_mat_fill_column(
        M: *mut fmpz_mat_struct,
        Cexp: *const mp_limb_t,
        Cbits: mp_limb_t,
        Bvar: mp_limb_signed_t,
        mctxB: *const mpoly_ctx_struct,
        mctxAC: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_cmpmask(
        cmpmask: *mut mp_limb_t,
        N: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_ovfmask(
        ovfmask: *mut mp_limb_t,
        N: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_monomials_cmp(
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Bexps: *const mp_limb_t,
        Bbits: mp_limb_t,
        length: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_exp_bits_required_ui(
        user_exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    pub fn mpoly_exp_bits_required_ffmpz(
        user_exp: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    pub fn mpoly_exp_bits_required_pfmpz(
        user_exp: *const *mut fmpz,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    #[link_name = "mpoly_gen_pow_exp_bits_required__extern"]
    pub fn mpoly_gen_pow_exp_bits_required(
        v: mp_limb_signed_t,
        e: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    pub fn mpoly_is_poly(
        Aexps: *const mp_limb_t,
        Alen: mp_limb_signed_t,
        Abits: mp_limb_t,
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_pack_vec_ui(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        bits: mp_limb_t,
        nfields: mp_limb_signed_t,
        len: mp_limb_signed_t,
    );
    pub fn mpoly_pack_vec_fmpz(
        exp1: *mut mp_limb_t,
        exp2: *const fmpz,
        bits: mp_limb_t,
        nfields: mp_limb_signed_t,
        len: mp_limb_signed_t,
    );
    pub fn mpoly_unpack_vec_ui(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        bits: mp_limb_t,
        nfields: mp_limb_signed_t,
        len: mp_limb_signed_t,
    );
    pub fn mpoly_unpack_vec_fmpz(
        exp1: *mut fmpz,
        exp2: *const mp_limb_t,
        bits: mp_limb_t,
        nfields: mp_limb_signed_t,
        len: mp_limb_signed_t,
    );
    pub fn mpoly_get_monomial_ui_unpacked_ffmpz(
        user_exps: *mut mp_limb_t,
        poly_exps: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_ffmpz_unpacked_ffmpz(
        user_exps: *mut fmpz,
        poly_exps: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_pfmpz_unpacked_ffmpz(
        user_exps: *mut *mut fmpz,
        poly_exps: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_ui_unpacked_ui(
        user_exps: *mut mp_limb_t,
        poly_exps: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_ui_sp(
        user_exps: *mut mp_limb_t,
        poly_exps: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_ui_mp(
        user_exps: *mut mp_limb_t,
        poly_exps: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_si_mp(
        user_exps: *mut mp_limb_signed_t,
        poly_exps: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    #[link_name = "mpoly_get_monomial_ui__extern"]
    pub fn mpoly_get_monomial_ui(
        user_exps: *mut mp_limb_t,
        poly_exps: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    #[link_name = "mpoly_get_monomial_si__extern"]
    pub fn mpoly_get_monomial_si(
        user_exps: *mut mp_limb_signed_t,
        poly_exps: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_var_exp_ui_sp(
        poly_exps: *const mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    pub fn mpoly_get_monomial_var_exp_ui_mp(
        poly_exps: *const mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    pub fn mpoly_get_monomial_var_exp_si_mp(
        poly_exps: *const mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "mpoly_get_monomial_var_exp_ui__extern"]
    pub fn mpoly_get_monomial_var_exp_ui(
        poly_exps: *const mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_t;
    #[link_name = "mpoly_get_monomial_var_exp_si__extern"]
    pub fn mpoly_get_monomial_var_exp_si(
        poly_exps: *const mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_get_monomial_ffmpz(
        exps: *mut fmpz,
        poly_exps: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_get_monomial_pfmpz(
        exps: *mut *mut fmpz,
        poly_exps: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_set_monomial_ui(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_set_monomial_ffmpz(
        exp1: *mut mp_limb_t,
        exp2: *const fmpz,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_set_monomial_pfmpz(
        exp1: *mut mp_limb_t,
        exp2: *const *mut fmpz,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_repack_monomials(
        exps1: *mut mp_limb_t,
        bits1: mp_limb_t,
        exps2: *const mp_limb_t,
        bits2: mp_limb_t,
        len: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_pack_monomials_tight(
        exp1: *mut mp_limb_t,
        exp2: *const mp_limb_t,
        len: mp_limb_signed_t,
        mults: *const mp_limb_signed_t,
        num: mp_limb_signed_t,
        bits: mp_limb_signed_t,
    );
    pub fn mpoly_unpack_monomials_tight(
        e1: *mut mp_limb_t,
        e2: *mut mp_limb_t,
        len: mp_limb_signed_t,
        mults: *mut mp_limb_signed_t,
        num: mp_limb_signed_t,
        bits: mp_limb_signed_t,
    );
    pub fn mpoly_monomial_exists(
        index: *mut mp_limb_signed_t,
        poly_exps: *const mp_limb_t,
        exp: *const mp_limb_t,
        len: mp_limb_signed_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
    ) -> libc::c_int;
    pub fn mpoly_monomial_index1_nomask(
        Aexps: *mut mp_limb_t,
        Alen: mp_limb_signed_t,
        e: mp_limb_t,
    ) -> mp_limb_signed_t;
    pub fn mpoly_monomial_index_ui(
        Aexp: *const mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_monomial_index_pfmpz(
        Aexp: *const mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        exp: *const *mut fmpz,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_monomial_index_monomial(
        Aexp: *const mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        Mexp: *const mp_limb_t,
        Mbits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_min_fields_ui_sp(
        min_fields: *mut mp_limb_t,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_min_fields_fmpz(
        min_fields: *mut fmpz,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_max_fields_ui_sp(
        max_fields: *mut mp_limb_t,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_max_fields_fmpz(
        max_fields: *mut fmpz,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_degrees_fit_si(
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_degrees_si(
        user_degs: *mut mp_limb_signed_t,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_degrees_si_threaded(
        user_degs: *mut mp_limb_signed_t,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
        handles: *const thread_pool_handle,
        num_handles: mp_limb_signed_t,
    );
    pub fn mpoly_degrees_ffmpz(
        user_degs: *mut fmpz,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_degrees_pfmpz(
        user_degs: *mut *mut fmpz,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_degree_si(
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_degree_fmpz(
        deg: *mut fmpz,
        poly_exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        var: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_total_degree_fits_si(
        exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_total_degree_si(
        exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn mpoly_total_degree_fmpz(
        totdeg: *mut fmpz,
        exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_total_degree_fmpz_ref(
        totdeg: *mut fmpz,
        exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_used_vars_or(
        used: *mut libc::c_int,
        exps: *const mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_monomial_cmp_general(
        Aexp: *mut mp_limb_t,
        Abits: mp_limb_t,
        Bexp: *mut mp_limb_t,
        Bbits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_search_monomials(
        e_ind: *mut *mut mp_limb_signed_t,
        e: *mut mp_limb_t,
        e_score: *mut mp_limb_signed_t,
        t1: *mut mp_limb_signed_t,
        t2: *mut mp_limb_signed_t,
        t3: *mut mp_limb_signed_t,
        lower: mp_limb_signed_t,
        upper: mp_limb_signed_t,
        a: *const mp_limb_t,
        a_len: mp_limb_signed_t,
        b: *const mp_limb_t,
        b_len: mp_limb_signed_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
    );
    pub fn mpoly_main_variable_split_LEX(
        ind: *mut mp_limb_signed_t,
        pexp: *mut mp_limb_t,
        Aexp: *const mp_limb_t,
        l1: mp_limb_signed_t,
        Alen: mp_limb_signed_t,
        mults: *const mp_limb_t,
        num: mp_limb_signed_t,
        Abits: mp_limb_signed_t,
    );
    pub fn mpoly_main_variable_split_DEG(
        ind: *mut mp_limb_signed_t,
        pexp: *mut mp_limb_t,
        Aexp: *const mp_limb_t,
        l1: mp_limb_signed_t,
        Alen: mp_limb_signed_t,
        deg: mp_limb_t,
        num: mp_limb_signed_t,
        Abits: mp_limb_signed_t,
    );
    pub fn mpoly_term_exp_fits_si(
        exps: *mut mp_limb_t,
        bits: mp_limb_t,
        n: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_term_exp_fits_ui(
        exps: *mut mp_limb_t,
        bits: mp_limb_t,
        n: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_is_gen(
        exps: *mut mp_limb_t,
        var: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_monomials_valid_test(
        exps: *mut mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_monomials_overflow_test(
        exps: *mut mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_monomials_inorder_test(
        exps: *mut mp_limb_t,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_reverse(
        Aexp: *mut mp_limb_t,
        Bexp: *const mp_limb_t,
        len: mp_limb_signed_t,
        N: mp_limb_signed_t,
    );
    pub fn mpoly_monomials_deflation(
        shift: *mut fmpz,
        stride: *mut fmpz,
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_monomials_deflate(
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Bexps: *const mp_limb_t,
        Bbits: mp_limb_t,
        Blength: mp_limb_signed_t,
        shift: *const fmpz,
        stride: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_monomials_inflate(
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Bexps: *const mp_limb_t,
        Bbits: mp_limb_t,
        Blength: mp_limb_signed_t,
        shift: *const fmpz,
        stride: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn _mpoly_gen_shift_right(
        Aexp: *mut mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        var: mp_limb_signed_t,
        amount: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn _mpoly_gen_shift_right_fmpz(
        Aexp: *mut mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        var: mp_limb_signed_t,
        amount: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn _mpoly_gen_shift_left(
        Aexp: *mut mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        var: mp_limb_signed_t,
        amount: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_monomials_shift_right_ui(
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        user_exps: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_monomials_shift_right_ffmpz(
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        user_exps: *const fmpz,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly1_fill_marks(
        Dcoeffs: *mut *mut mp_limb_t,
        Dlen: *mut mp_limb_signed_t,
        Dalloc: *mut mp_limb_signed_t,
        Aexps: *const mp_limb_t,
        Alen: mp_limb_signed_t,
        Abits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly2_fill_marks(
        Dcoeffs: *mut *mut mp_limb_t,
        Dlen: *mut mp_limb_signed_t,
        Dalloc: *mut mp_limb_signed_t,
        Aexps: *const mp_limb_t,
        Alen: mp_limb_signed_t,
        Abits: mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_to_mpolyl_perm_deflate(
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Actx: *const mpoly_ctx_struct,
        Bexps: *mut mp_limb_t,
        Bbits: mp_limb_t,
        Bctx: *const mpoly_ctx_struct,
        length: mp_limb_signed_t,
        perm: *const mp_limb_signed_t,
        shift: *const mp_limb_t,
        stride: *const mp_limb_t,
    );
    pub fn mpoly_from_mpolyl_perm_inflate(
        Bexps: *mut mp_limb_t,
        Bbits: mp_limb_t,
        Bctx: *const mpoly_ctx_struct,
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Actx: *const mpoly_ctx_struct,
        length: mp_limb_signed_t,
        perm: *const mp_limb_signed_t,
        shift: *const mp_limb_t,
        stride: *const mp_limb_t,
    );
    pub fn mpoly_gcd_info_init(I: *mut mpoly_gcd_info_struct, nvars: mp_limb_signed_t);
    pub fn mpoly_gcd_info_clear(I: *mut mpoly_gcd_info_struct);
    pub fn mpoly_gcd_info_limits(
        Amax_exp: *mut mp_limb_t,
        Amin_exp: *mut mp_limb_t,
        Amax_exp_count: *mut mp_limb_signed_t,
        Amin_exp_count: *mut mp_limb_signed_t,
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gcd_info_stride(
        strides: *mut mp_limb_t,
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Alength: mp_limb_signed_t,
        Amax_exp: *const mp_limb_t,
        Amin_exp: *const mp_limb_t,
        Bexps: *const mp_limb_t,
        Bbits: mp_limb_t,
        Blength: mp_limb_signed_t,
        Bmax_exp: *const mp_limb_t,
        Bmin_exp: *const mp_limb_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gcd_info_set_perm(
        I: *mut mpoly_gcd_info_struct,
        Alength: mp_limb_signed_t,
        Blength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gcd_info_get_brown_upper_limit(
        I: *const mpoly_gcd_info_struct,
        var: mp_limb_signed_t,
        bound: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn mpoly_gcd_info_measure_hensel(
        I: *mut mpoly_gcd_info_struct,
        Alength: mp_limb_signed_t,
        Blength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gcd_info_measure_brown(
        I: *mut mpoly_gcd_info_struct,
        Alength: mp_limb_signed_t,
        Blength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gcd_info_measure_bma(
        I: *mut mpoly_gcd_info_struct,
        Alength: mp_limb_signed_t,
        Blength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gcd_info_measure_zippel(
        I: *mut mpoly_gcd_info_struct,
        Alength: mp_limb_signed_t,
        Blength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_gcd_info_measure_zippel2(
        I: *mut mpoly_gcd_info_struct,
        Alength: mp_limb_signed_t,
        Blength: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_monomial_cofactors(
        Abarexps: *mut fmpz,
        Bbarexps: *mut fmpz,
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Bexps: *const mp_limb_t,
        Bbits: mp_limb_t,
        length: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn mpoly_is_proved_not_square(
        Aexps: *const mp_limb_t,
        Alen: mp_limb_signed_t,
        Abits: mp_limb_t,
        N: mp_limb_signed_t,
        t: *mut mp_limb_t,
    ) -> libc::c_int;
    pub fn mpoly_remove_var_powers(
        var_powers: *mut fmpz,
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Alen: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn _mpoly_compress_exps(
        V: *mut mp_limb_signed_t,
        D: *mut mp_limb_signed_t,
        deg: *mut mp_limb_signed_t,
        S: *mut mp_limb_signed_t,
        n: mp_limb_signed_t,
        l: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn mpoly_test_irreducible(
        Aexps: *mut mp_limb_t,
        Abits: mp_limb_t,
        Alen: mp_limb_signed_t,
        ctx: *const mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn _mpoly_test_irreducible(
        Aexps: *mut mp_limb_signed_t,
        stride: mp_limb_signed_t,
        Alen: mp_limb_signed_t,
        nvars: mp_limb_signed_t,
        state: *mut flint_rand_s,
        tries_left: mp_limb_signed_t,
    ) -> libc::c_int;
    pub fn mpoly_compression_init(M: *mut mpoly_compression_struct);
    pub fn mpoly_compression_clear(M: *mut mpoly_compression_struct);
    pub fn mpoly_compression_set(
        M: *mut mpoly_compression_struct,
        Aexps: *const mp_limb_t,
        Abits: mp_limb_t,
        Alen: mp_limb_signed_t,
        mctx: *const mpoly_ctx_struct,
    );
    pub fn mpoly_bivar_cld_bounds(l: *mut mp_limb_signed_t, n: mp_limb_signed_t);
    #[link_name = "_slong_array_fit_length__extern"]
    pub fn _slong_array_fit_length(
        array: *mut *mut mp_limb_signed_t,
        alloc: *mut mp_limb_signed_t,
        len: mp_limb_signed_t,
    );
    pub fn _mpoly_heap_pop1(
        heap: *mut mpoly_heap1_s,
        heap_len: *mut mp_limb_signed_t,
        maskhi: mp_limb_t,
    ) -> *mut libc::c_void;
    pub fn _mpoly_heap_insert1(
        heap: *mut mpoly_heap1_s,
        exp: mp_limb_t,
        x: *mut libc::c_void,
        next_loc: *mut mp_limb_signed_t,
        heap_len: *mut mp_limb_signed_t,
        maskhi: mp_limb_t,
    );
    pub fn _mpoly_heap_pop(
        heap: *mut mpoly_heap_s,
        heap_len: *mut mp_limb_signed_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
    ) -> *mut libc::c_void;
    pub fn _mpoly_heap_insert(
        heap: *mut mpoly_heap_s,
        exp: *mut mp_limb_t,
        x: *mut libc::c_void,
        next_loc: *mut mp_limb_signed_t,
        heap_len: *mut mp_limb_signed_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
    ) -> libc::c_int;
    pub fn mpoly_void_ring_elem_init(R: *mut _bindgen_ty_2) -> *mut libc::c_void;
    pub fn mpoly_void_ring_elem_clear(a: *mut libc::c_void, R: *mut _bindgen_ty_2);
    pub fn mpoly_univar_init(A: *mut mpoly_univar_struct, R: *mut _bindgen_ty_2);
    pub fn mpoly_univar_clear(A: *mut mpoly_univar_struct, R: *mut _bindgen_ty_2);
    pub fn mpoly_univar_swap(A: *mut mpoly_univar_struct, B: *mut mpoly_univar_struct);
    pub fn mpoly_univar_fit_length(
        A: *mut mpoly_univar_struct,
        len: mp_limb_signed_t,
        R: *mut _bindgen_ty_2,
    );
    pub fn mpoly_univar_init2(
        A: *mut mpoly_univar_struct,
        len: mp_limb_signed_t,
        R: *mut _bindgen_ty_2,
    );
    pub fn mpoly_univar_pseudo_gcd_ducos(
        G: *mut mpoly_univar_struct,
        B: *mut mpoly_univar_struct,
        A: *mut mpoly_univar_struct,
        R: *mut _bindgen_ty_2,
    ) -> libc::c_int;
    pub fn mpoly_univar_resultant(
        r: *mut libc::c_void,
        fx: *mut mpoly_univar_struct,
        gx: *mut mpoly_univar_struct,
        R: *mut _bindgen_ty_2,
    ) -> libc::c_int;
    pub fn mpoly_univar_discriminant(
        d: *mut libc::c_void,
        fx: *mut mpoly_univar_struct,
        R: *mut _bindgen_ty_2,
    ) -> libc::c_int;
    pub fn mpoly_parse_init(E: *mut mpoly_parse_struct);
    pub fn mpoly_parse_clear(E: *mut mpoly_parse_struct);
    pub fn mpoly_parse_add_terminal(
        E: *mut mpoly_parse_struct,
        s: *const libc::c_char,
        v: *const libc::c_void,
    );
    pub fn mpoly_parse_parse(
        E: *mut mpoly_parse_struct,
        res: *mut libc::c_void,
        s: *const libc::c_char,
        len: mp_limb_signed_t,
    ) -> libc::c_int;
    #[link_name = "mpoly_main_variable_terms1__extern"]
    pub fn mpoly_main_variable_terms1(
        i1: *mut mp_limb_signed_t,
        n1: *mut mp_limb_signed_t,
        exp1: *const mp_limb_t,
        l1: mp_limb_signed_t,
        len1: mp_limb_signed_t,
        k: mp_limb_signed_t,
        num: mp_limb_signed_t,
        bits: mp_limb_signed_t,
    );
}
