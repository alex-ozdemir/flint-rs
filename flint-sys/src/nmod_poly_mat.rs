/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    #[link_name = "nmod_poly_mat_entry__extern"]
    pub fn nmod_poly_mat_entry(
        mat: *const nmod_poly_mat_struct,
        i: mp_limb_signed_t,
        j: mp_limb_signed_t,
    ) -> *mut nmod_poly_struct;
    #[link_name = "nmod_poly_mat_nrows__extern"]
    pub fn nmod_poly_mat_nrows(mat: *const nmod_poly_mat_struct) -> mp_limb_signed_t;
    #[link_name = "nmod_poly_mat_ncols__extern"]
    pub fn nmod_poly_mat_ncols(mat: *const nmod_poly_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_init(
        mat: *mut nmod_poly_mat_struct,
        rows: mp_limb_signed_t,
        cols: mp_limb_signed_t,
        n: mp_limb_t,
    );
    pub fn nmod_poly_mat_init_set(mat: *mut nmod_poly_mat_struct, src: *const nmod_poly_mat_struct);
    #[link_name = "nmod_poly_mat_swap__extern"]
    pub fn nmod_poly_mat_swap(mat1: *mut nmod_poly_mat_struct, mat2: *mut nmod_poly_mat_struct);
    #[link_name = "nmod_poly_mat_swap_entrywise__extern"]
    pub fn nmod_poly_mat_swap_entrywise(
        mat1: *mut nmod_poly_mat_struct,
        mat2: *mut nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_set(mat1: *mut nmod_poly_mat_struct, mat2: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_set_nmod_mat(
        pmat: *mut nmod_poly_mat_struct,
        cmat: *const nmod_mat_struct,
    );
    pub fn nmod_poly_mat_clear(mat: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_set_trunc(
        res: *mut nmod_poly_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        len: libc::c_long,
    );
    #[link_name = "nmod_poly_mat_truncate__extern"]
    pub fn nmod_poly_mat_truncate(pmat: *mut nmod_poly_mat_struct, len: libc::c_long);
    pub fn nmod_poly_mat_shift_left(
        res: *mut nmod_poly_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        k: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_shift_right(
        res: *mut nmod_poly_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        k: mp_limb_signed_t,
    );
    #[link_name = "nmod_poly_mat_modulus__extern"]
    pub fn nmod_poly_mat_modulus(mat: *const nmod_poly_mat_struct) -> mp_limb_t;
    pub fn nmod_poly_mat_get_coeff_mat(
        coeff: *mut nmod_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        deg: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_set_coeff_mat(
        pmat: *mut nmod_poly_mat_struct,
        coeff: *const nmod_mat_struct,
        deg: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_equal(
        mat1: *const nmod_poly_mat_struct,
        mat2: *const nmod_poly_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_poly_mat_equal_nmod_mat(
        pmat: *const nmod_poly_mat_struct,
        cmat: *const nmod_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_poly_mat_is_zero(mat: *const nmod_poly_mat_struct) -> libc::c_int;
    pub fn nmod_poly_mat_is_one(mat: *const nmod_poly_mat_struct) -> libc::c_int;
    #[link_name = "nmod_poly_mat_is_empty__extern"]
    pub fn nmod_poly_mat_is_empty(mat: *const nmod_poly_mat_struct) -> libc::c_int;
    #[link_name = "nmod_poly_mat_is_square__extern"]
    pub fn nmod_poly_mat_is_square(mat: *const nmod_poly_mat_struct) -> libc::c_int;
    pub fn nmod_poly_mat_zero(mat: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_one(mat: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_randtest(
        mat: *mut nmod_poly_mat_struct,
        state: *mut flint_rand_s,
        len: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_randtest_sparse(
        A: *mut nmod_poly_mat_struct,
        state: *mut flint_rand_s,
        len: mp_limb_signed_t,
        density: f32,
    );
    pub fn nmod_poly_mat_window_init(
        window: *mut nmod_poly_mat_struct,
        mat: *const nmod_poly_mat_struct,
        r1: mp_limb_signed_t,
        c1: mp_limb_signed_t,
        r2: mp_limb_signed_t,
        c2: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_window_clear(window: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_concat_horizontal(
        res: *mut nmod_poly_mat_struct,
        mat1: *const nmod_poly_mat_struct,
        mat2: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_concat_vertical(
        res: *mut nmod_poly_mat_struct,
        mat1: *const nmod_poly_mat_struct,
        mat2: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_print(mat: *const nmod_poly_mat_struct, x: *const libc::c_char);
    pub fn nmod_poly_mat_max_length(A: *const nmod_poly_mat_struct) -> mp_limb_signed_t;
    #[link_name = "nmod_poly_mat_degree__extern"]
    pub fn nmod_poly_mat_degree(pmat: *const nmod_poly_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_scalar_mul_nmod_poly(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        c: *const nmod_poly_struct,
    );
    pub fn nmod_poly_mat_scalar_mul_nmod(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        c: mp_limb_t,
    );
    pub fn nmod_poly_mat_add(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_sub(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_neg(B: *mut nmod_poly_mat_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_mul(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_mul_interpolate(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_mul_classical(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_mul_KS(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_sqr(B: *mut nmod_poly_mat_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_sqr_classical(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_sqr_KS(B: *mut nmod_poly_mat_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_sqr_interpolate(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_pow(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        exp: mp_limb_t,
    );
    pub fn nmod_poly_mat_evaluate_nmod(
        B: *mut nmod_mat_struct,
        A: *const nmod_poly_mat_struct,
        x: mp_limb_t,
    );
    pub fn nmod_poly_mat_find_pivot_any(
        mat: *const nmod_poly_mat_struct,
        start_row: mp_limb_signed_t,
        end_row: mp_limb_signed_t,
        c: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_find_pivot_partial(
        mat: *const nmod_poly_mat_struct,
        start_row: mp_limb_signed_t,
        end_row: mp_limb_signed_t,
        c: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_fflu(
        B: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        perm: *mut mp_limb_signed_t,
        A: *const nmod_poly_mat_struct,
        rank_check: libc::c_int,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_rref(
        B: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_trace(trace: *mut nmod_poly_struct, mat: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_det(det: *mut nmod_poly_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_det_fflu(det: *mut nmod_poly_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_det_interpolate(
        det: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_rank(A: *const nmod_poly_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_inv(
        Ainv: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_poly_mat_nullspace(
        res: *mut nmod_poly_mat_struct,
        mat: *const nmod_poly_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_solve(
        X: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_poly_mat_solve_fflu(
        X: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    ) -> libc::c_int;
    pub fn nmod_poly_mat_solve_fflu_precomp(
        X: *mut nmod_poly_mat_struct,
        perm: *const mp_limb_signed_t,
        FFLU: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
}
