/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_camel_case_types)]
use crate::deps::*;
use crate::flint::*;
use crate::nmod_types::*;
use libc::{c_char, c_int, c_uint, c_void, size_t, FILE};


extern "C" {
    pub fn nmod_poly_mat_init(
        mat: *mut nmod_poly_mat_struct,
        rows: mp_limb_signed_t,
        cols: mp_limb_signed_t,
        n: mp_limb_t,
    );
    pub fn nmod_poly_mat_init_set(mat: *mut nmod_poly_mat_struct, src: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_set(mat1: *mut nmod_poly_mat_struct, mat2: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_set_nmod_mat(
        pmat: *mut nmod_poly_mat_struct,
        cmat: *const nmod_mat_struct,
    );
    pub fn nmod_poly_mat_clear(mat: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_set_trunc(
        res: *mut nmod_poly_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        len: ::std::os::raw::c_long,
    );
    pub fn nmod_poly_mat_shift_left(
        res: *mut nmod_poly_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        k: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_shift_right(
        res: *mut nmod_poly_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        k: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_get_coeff_mat(
        coeff: *mut nmod_mat_struct,
        pmat: *const nmod_poly_mat_struct,
        deg: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_set_coeff_mat(
        pmat: *mut nmod_poly_mat_struct,
        coeff: *const nmod_mat_struct,
        deg: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_equal(
        mat1: *const nmod_poly_mat_struct,
        mat2: *const nmod_poly_mat_struct,
    ) -> ::std::os::raw::c_int;
    pub fn nmod_poly_mat_equal_nmod_mat(
        pmat: *const nmod_poly_mat_struct,
        cmat: *const nmod_mat_struct,
    ) -> ::std::os::raw::c_int;
    pub fn nmod_poly_mat_is_zero(mat: *const nmod_poly_mat_struct) -> ::std::os::raw::c_int;
    pub fn nmod_poly_mat_is_one(mat: *const nmod_poly_mat_struct) -> ::std::os::raw::c_int;
    pub fn nmod_poly_mat_zero(mat: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_one(mat: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_randtest(
        mat: *mut nmod_poly_mat_struct,
        state: *mut flint_rand_s,
        len: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_randtest_sparse(
        A: *mut nmod_poly_mat_struct,
        state: *mut flint_rand_s,
        len: mp_limb_signed_t,
        density: f32,
    );
    pub fn nmod_poly_mat_window_init(
        window: *mut nmod_poly_mat_struct,
        mat: *const nmod_poly_mat_struct,
        r1: mp_limb_signed_t,
        c1: mp_limb_signed_t,
        r2: mp_limb_signed_t,
        c2: mp_limb_signed_t,
    );
    pub fn nmod_poly_mat_window_clear(window: *mut nmod_poly_mat_struct);
    pub fn nmod_poly_mat_concat_horizontal(
        res: *mut nmod_poly_mat_struct,
        mat1: *const nmod_poly_mat_struct,
        mat2: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_concat_vertical(
        res: *mut nmod_poly_mat_struct,
        mat1: *const nmod_poly_mat_struct,
        mat2: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_print(mat: *const nmod_poly_mat_struct, x: *const ::std::os::raw::c_char);
    pub fn nmod_poly_mat_max_length(A: *const nmod_poly_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_scalar_mul_nmod_poly(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        c: *const nmod_poly_struct,
    );
    pub fn nmod_poly_mat_scalar_mul_nmod(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        c: mp_limb_t,
    );
    pub fn nmod_poly_mat_add(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_sub(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_neg(B: *mut nmod_poly_mat_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_mul(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_mul_interpolate(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_mul_classical(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_mul_KS(
        C: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_sqr(B: *mut nmod_poly_mat_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_sqr_classical(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_sqr_KS(B: *mut nmod_poly_mat_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_sqr_interpolate(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_pow(
        B: *mut nmod_poly_mat_struct,
        A: *const nmod_poly_mat_struct,
        exp: mp_limb_t,
    );
    pub fn nmod_poly_mat_evaluate_nmod(
        B: *mut nmod_mat_struct,
        A: *const nmod_poly_mat_struct,
        x: mp_limb_t,
    );
    pub fn nmod_poly_mat_find_pivot_any(
        mat: *const nmod_poly_mat_struct,
        start_row: mp_limb_signed_t,
        end_row: mp_limb_signed_t,
        c: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_find_pivot_partial(
        mat: *const nmod_poly_mat_struct,
        start_row: mp_limb_signed_t,
        end_row: mp_limb_signed_t,
        c: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_fflu(
        B: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        perm: *mut mp_limb_signed_t,
        A: *const nmod_poly_mat_struct,
        rank_check: ::std::os::raw::c_int,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_rref(
        B: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_trace(trace: *mut nmod_poly_struct, mat: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_det(det: *mut nmod_poly_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_det_fflu(det: *mut nmod_poly_struct, A: *const nmod_poly_mat_struct);
    pub fn nmod_poly_mat_det_interpolate(
        det: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
    );
    pub fn nmod_poly_mat_rank(A: *const nmod_poly_mat_struct) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_inv(
        Ainv: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
    ) -> ::std::os::raw::c_int;
    pub fn nmod_poly_mat_nullspace(
        res: *mut nmod_poly_mat_struct,
        mat: *const nmod_poly_mat_struct,
    ) -> mp_limb_signed_t;
    pub fn nmod_poly_mat_solve(
        X: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    ) -> ::std::os::raw::c_int;
    pub fn nmod_poly_mat_solve_fflu(
        X: *mut nmod_poly_mat_struct,
        den: *mut nmod_poly_struct,
        A: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    ) -> ::std::os::raw::c_int;
    pub fn nmod_poly_mat_solve_fflu_precomp(
        X: *mut nmod_poly_mat_struct,
        perm: *const mp_limb_signed_t,
        FFLU: *const nmod_poly_mat_struct,
        B: *const nmod_poly_mat_struct,
    );
}
