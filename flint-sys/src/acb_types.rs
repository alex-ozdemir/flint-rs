/* automatically generated by rust-bindgen 0.70.1 */

use crate::deps::*;
use crate::arb_types::*;


#[repr(C)]
pub struct acb_struct {
    pub real: arb_struct,
    pub imag: arb_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acb_struct"][::std::mem::size_of::<acb_struct>() - 96usize];
    ["Alignment of acb_struct"][::std::mem::align_of::<acb_struct>() - 8usize];
    ["Offset of field: acb_struct::real"][::std::mem::offset_of!(acb_struct, real) - 0usize];
    ["Offset of field: acb_struct::imag"][::std::mem::offset_of!(acb_struct, imag) - 48usize];
};
impl Default for acb_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type acb_t = [acb_struct; 1usize];
pub type acb_ptr = *mut acb_struct;
pub type acb_srcptr = *const acb_struct;
#[repr(C)]
pub struct acb_mat_struct {
    pub entries: acb_ptr,
    pub r: mp_limb_signed_t,
    pub c: mp_limb_signed_t,
    pub rows: *mut acb_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acb_mat_struct"][::std::mem::size_of::<acb_mat_struct>() - 32usize];
    ["Alignment of acb_mat_struct"][::std::mem::align_of::<acb_mat_struct>() - 8usize];
    ["Offset of field: acb_mat_struct::entries"]
        [::std::mem::offset_of!(acb_mat_struct, entries) - 0usize];
    ["Offset of field: acb_mat_struct::r"][::std::mem::offset_of!(acb_mat_struct, r) - 8usize];
    ["Offset of field: acb_mat_struct::c"][::std::mem::offset_of!(acb_mat_struct, c) - 16usize];
    ["Offset of field: acb_mat_struct::rows"]
        [::std::mem::offset_of!(acb_mat_struct, rows) - 24usize];
};
impl Default for acb_mat_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type acb_mat_t = [acb_mat_struct; 1usize];
#[repr(C)]
pub struct acb_poly_struct {
    pub coeffs: acb_ptr,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of acb_poly_struct"][::std::mem::size_of::<acb_poly_struct>() - 24usize];
    ["Alignment of acb_poly_struct"][::std::mem::align_of::<acb_poly_struct>() - 8usize];
    ["Offset of field: acb_poly_struct::coeffs"]
        [::std::mem::offset_of!(acb_poly_struct, coeffs) - 0usize];
    ["Offset of field: acb_poly_struct::alloc"]
        [::std::mem::offset_of!(acb_poly_struct, alloc) - 8usize];
    ["Offset of field: acb_poly_struct::length"]
        [::std::mem::offset_of!(acb_poly_struct, length) - 16usize];
};
impl Default for acb_poly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type acb_poly_t = [acb_poly_struct; 1usize];
