/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


pub const MAX_FACTORS: u32 = 15;
#[repr(C)]
pub struct dirichlet_prime_group_struct {
    pub p: mp_limb_t,
    pub e: libc::c_int,
    pub pe: nmod_t,
    pub phi: nmod_t,
    pub g: mp_limb_t,
    pub dlog: *mut dlog_precomp_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dirichlet_prime_group_struct"]
        [::std::mem::size_of::<dirichlet_prime_group_struct>() - 80usize];
    ["Alignment of dirichlet_prime_group_struct"]
        [::std::mem::align_of::<dirichlet_prime_group_struct>() - 8usize];
    ["Offset of field: dirichlet_prime_group_struct::p"]
        [::std::mem::offset_of!(dirichlet_prime_group_struct, p) - 0usize];
    ["Offset of field: dirichlet_prime_group_struct::e"]
        [::std::mem::offset_of!(dirichlet_prime_group_struct, e) - 8usize];
    ["Offset of field: dirichlet_prime_group_struct::pe"]
        [::std::mem::offset_of!(dirichlet_prime_group_struct, pe) - 16usize];
    ["Offset of field: dirichlet_prime_group_struct::phi"]
        [::std::mem::offset_of!(dirichlet_prime_group_struct, phi) - 40usize];
    ["Offset of field: dirichlet_prime_group_struct::g"]
        [::std::mem::offset_of!(dirichlet_prime_group_struct, g) - 64usize];
    ["Offset of field: dirichlet_prime_group_struct::dlog"]
        [::std::mem::offset_of!(dirichlet_prime_group_struct, dlog) - 72usize];
};
impl Default for dirichlet_prime_group_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct dirichlet_group_struct {
    pub q: mp_limb_t,
    pub q_even: mp_limb_t,
    pub mod_: nmod_t,
    pub rad_q: mp_limb_t,
    pub phi_q: mp_limb_t,
    pub neven: mp_limb_signed_t,
    pub num: mp_limb_signed_t,
    pub expo: mp_limb_t,
    pub P: *mut dirichlet_prime_group_struct,
    pub generators: *mut mp_limb_t,
    pub PHI: *mut mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dirichlet_group_struct"][::std::mem::size_of::<dirichlet_group_struct>() - 104usize];
    ["Alignment of dirichlet_group_struct"]
        [::std::mem::align_of::<dirichlet_group_struct>() - 8usize];
    ["Offset of field: dirichlet_group_struct::q"]
        [::std::mem::offset_of!(dirichlet_group_struct, q) - 0usize];
    ["Offset of field: dirichlet_group_struct::q_even"]
        [::std::mem::offset_of!(dirichlet_group_struct, q_even) - 8usize];
    ["Offset of field: dirichlet_group_struct::mod_"]
        [::std::mem::offset_of!(dirichlet_group_struct, mod_) - 16usize];
    ["Offset of field: dirichlet_group_struct::rad_q"]
        [::std::mem::offset_of!(dirichlet_group_struct, rad_q) - 40usize];
    ["Offset of field: dirichlet_group_struct::phi_q"]
        [::std::mem::offset_of!(dirichlet_group_struct, phi_q) - 48usize];
    ["Offset of field: dirichlet_group_struct::neven"]
        [::std::mem::offset_of!(dirichlet_group_struct, neven) - 56usize];
    ["Offset of field: dirichlet_group_struct::num"]
        [::std::mem::offset_of!(dirichlet_group_struct, num) - 64usize];
    ["Offset of field: dirichlet_group_struct::expo"]
        [::std::mem::offset_of!(dirichlet_group_struct, expo) - 72usize];
    ["Offset of field: dirichlet_group_struct::P"]
        [::std::mem::offset_of!(dirichlet_group_struct, P) - 80usize];
    ["Offset of field: dirichlet_group_struct::generators"]
        [::std::mem::offset_of!(dirichlet_group_struct, generators) - 88usize];
    ["Offset of field: dirichlet_group_struct::PHI"]
        [::std::mem::offset_of!(dirichlet_group_struct, PHI) - 96usize];
};
impl Default for dirichlet_group_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dirichlet_group_t = [dirichlet_group_struct; 1usize];
#[repr(C)]
pub struct dirichlet_char_struct {
    pub n: mp_limb_t,
    pub log: *mut mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dirichlet_char_struct"][::std::mem::size_of::<dirichlet_char_struct>() - 16usize];
    ["Alignment of dirichlet_char_struct"]
        [::std::mem::align_of::<dirichlet_char_struct>() - 8usize];
    ["Offset of field: dirichlet_char_struct::n"]
        [::std::mem::offset_of!(dirichlet_char_struct, n) - 0usize];
    ["Offset of field: dirichlet_char_struct::log"]
        [::std::mem::offset_of!(dirichlet_char_struct, log) - 8usize];
};
impl Default for dirichlet_char_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dirichlet_char_t = [dirichlet_char_struct; 1usize];
extern "C" {
    #[link_name = "dirichlet_group_size__extern"]
    pub fn dirichlet_group_size(G: *const dirichlet_group_struct) -> mp_limb_t;
    pub fn dirichlet_group_num_primitive(G: *const dirichlet_group_struct) -> mp_limb_t;
    pub fn dirichlet_group_init(G: *mut dirichlet_group_struct, q: mp_limb_t) -> libc::c_int;
    pub fn dirichlet_subgroup_init(
        H: *mut dirichlet_group_struct,
        G: *const dirichlet_group_struct,
        h: mp_limb_t,
    );
    pub fn dirichlet_group_clear(G: *mut dirichlet_group_struct);
    pub fn dirichlet_group_dlog_precompute(G: *mut dirichlet_group_struct, num: mp_limb_t);
    pub fn dirichlet_group_dlog_clear(G: *mut dirichlet_group_struct);
    pub fn dirichlet_conductor_ui(G: *const dirichlet_group_struct, a: mp_limb_t) -> mp_limb_t;
    pub fn dirichlet_parity_ui(G: *const dirichlet_group_struct, a: mp_limb_t) -> libc::c_int;
    pub fn dirichlet_order_ui(G: *const dirichlet_group_struct, a: mp_limb_t) -> mp_limb_t;
    pub fn dirichlet_char_init(x: *mut dirichlet_char_struct, G: *const dirichlet_group_struct);
    pub fn dirichlet_char_clear(x: *mut dirichlet_char_struct);
    pub fn dirichlet_char_print(G: *const dirichlet_group_struct, x: *const dirichlet_char_struct);
    #[link_name = "dirichlet_char_set__extern"]
    pub fn dirichlet_char_set(
        x: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
        y: *const dirichlet_char_struct,
    );
    #[link_name = "dirichlet_char_eq__extern"]
    pub fn dirichlet_char_eq(
        x: *const dirichlet_char_struct,
        y: *const dirichlet_char_struct,
    ) -> libc::c_int;
    pub fn dirichlet_char_eq_deep(
        G: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
        y: *const dirichlet_char_struct,
    ) -> libc::c_int;
    pub fn dirichlet_parity_char(
        G: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
    ) -> libc::c_int;
    pub fn dirichlet_conductor_char(
        G: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
    ) -> mp_limb_t;
    pub fn dirichlet_order_char(
        G: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
    ) -> mp_limb_t;
    pub fn dirichlet_char_log(
        x: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
        m: mp_limb_t,
    );
    #[link_name = "dirichlet_char_exp__extern"]
    pub fn dirichlet_char_exp(
        G: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
    ) -> mp_limb_t;
    pub fn _dirichlet_char_exp(
        x: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
    ) -> mp_limb_t;
    pub fn dirichlet_char_index(
        x: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
        j: mp_limb_t,
    );
    pub fn dirichlet_index_char(
        G: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
    ) -> mp_limb_t;
    pub fn dirichlet_char_one(x: *mut dirichlet_char_struct, G: *const dirichlet_group_struct);
    pub fn dirichlet_char_first_primitive(
        x: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
    );
    pub fn dirichlet_char_next(
        x: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
    ) -> libc::c_int;
    pub fn dirichlet_char_next_primitive(
        x: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
    ) -> libc::c_int;
    pub fn dirichlet_char_mul(
        c: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
        a: *const dirichlet_char_struct,
        b: *const dirichlet_char_struct,
    );
    pub fn dirichlet_char_pow(
        c: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
        a: *const dirichlet_char_struct,
        n: mp_limb_t,
    );
    pub fn dirichlet_char_lower(
        y: *mut dirichlet_char_struct,
        H: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
        G: *const dirichlet_group_struct,
    );
    pub fn dirichlet_char_lift(
        y: *mut dirichlet_char_struct,
        G: *const dirichlet_group_struct,
        x: *const dirichlet_char_struct,
        H: *const dirichlet_group_struct,
    );
    pub fn dirichlet_pairing(
        G: *const dirichlet_group_struct,
        m: mp_limb_t,
        n: mp_limb_t,
    ) -> mp_limb_t;
    pub fn dirichlet_pairing_char(
        G: *const dirichlet_group_struct,
        a: *const dirichlet_char_struct,
        b: *const dirichlet_char_struct,
    ) -> mp_limb_t;
    #[link_name = "dirichlet_char_is_principal__extern"]
    pub fn dirichlet_char_is_principal(
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
    ) -> libc::c_int;
    #[link_name = "dirichlet_char_is_real__extern"]
    pub fn dirichlet_char_is_real(
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
    ) -> libc::c_int;
    #[link_name = "dirichlet_char_is_primitive__extern"]
    pub fn dirichlet_char_is_primitive(
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
    ) -> libc::c_int;
    pub fn dirichlet_chi(
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
        n: mp_limb_t,
    ) -> mp_limb_t;
    pub fn dirichlet_vec_set_null(
        v: *mut mp_limb_t,
        G: *const dirichlet_group_struct,
        nv: mp_limb_signed_t,
    );
    pub fn dirichlet_chi_vec_loop(
        v: *mut mp_limb_t,
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
        nv: mp_limb_signed_t,
    );
    pub fn dirichlet_chi_vec_primeloop(
        v: *mut mp_limb_t,
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
        nv: mp_limb_signed_t,
    );
    pub fn dirichlet_chi_vec(
        v: *mut mp_limb_t,
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
        nv: mp_limb_signed_t,
    );
    pub fn dirichlet_chi_vec_loop_order(
        v: *mut mp_limb_t,
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
        order: mp_limb_t,
        nv: mp_limb_signed_t,
    );
    pub fn dirichlet_chi_vec_primeloop_order(
        v: *mut mp_limb_t,
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
        order: mp_limb_t,
        nv: mp_limb_signed_t,
    );
    pub fn dirichlet_chi_vec_order(
        v: *mut mp_limb_t,
        G: *const dirichlet_group_struct,
        chi: *const dirichlet_char_struct,
        order: mp_limb_t,
        nv: mp_limb_signed_t,
    );
}
