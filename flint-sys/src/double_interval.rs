/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct di_t {
    pub a: f64,
    pub b: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of di_t"][::std::mem::size_of::<di_t>() - 16usize];
    ["Alignment of di_t"][::std::mem::align_of::<di_t>() - 8usize];
    ["Offset of field: di_t::a"][::std::mem::offset_of!(di_t, a) - 0usize];
    ["Offset of field: di_t::b"][::std::mem::offset_of!(di_t, b) - 8usize];
};
extern "C" {
    #[link_name = "di_interval__extern"]
    pub fn di_interval(a: f64, b: f64) -> di_t;
    #[link_name = "_di_below__extern"]
    pub fn _di_below(x: f64) -> f64;
    #[link_name = "_di_above__extern"]
    pub fn _di_above(x: f64) -> f64;
    #[link_name = "di_neg__extern"]
    pub fn di_neg(x: di_t) -> di_t;
    #[link_name = "di_fast_add__extern"]
    pub fn di_fast_add(x: di_t, y: di_t) -> di_t;
    #[link_name = "di_fast_sub__extern"]
    pub fn di_fast_sub(x: di_t, y: di_t) -> di_t;
    pub fn di_fast_mul(x: di_t, y: di_t) -> di_t;
    pub fn di_fast_sqr(x: di_t) -> di_t;
    pub fn di_fast_div(x: di_t, y: di_t) -> di_t;
    #[link_name = "di_fast_add_d__extern"]
    pub fn di_fast_add_d(x: di_t, y: f64) -> di_t;
    #[link_name = "di_fast_sub_d__extern"]
    pub fn di_fast_sub_d(x: di_t, y: f64) -> di_t;
    #[link_name = "di_fast_mul_d__extern"]
    pub fn di_fast_mul_d(x: di_t, y: f64) -> di_t;
    #[link_name = "di_fast_div_d__extern"]
    pub fn di_fast_div_d(x: di_t, y: f64) -> di_t;
    pub fn di_fast_log_nonnegative(x: di_t) -> di_t;
    #[link_name = "di_fast_mid__extern"]
    pub fn di_fast_mid(x: di_t) -> di_t;
    #[link_name = "di_fast_ubound_radius__extern"]
    pub fn di_fast_ubound_radius(x: di_t) -> f64;
    #[link_name = "di_print__extern"]
    pub fn di_print(x: di_t);
    pub fn arb_get_di(x: *const arb_struct) -> di_t;
    pub fn arb_set_di(res: *mut arb_struct, x: di_t, prec: mp_limb_signed_t);
    #[link_name = "d_randtest2__extern"]
    pub fn d_randtest2(state: *mut flint_rand_s) -> f64;
    #[link_name = "di_randtest__extern"]
    pub fn di_randtest(state: *mut flint_rand_s) -> di_t;
}
