/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::bindgen::*;
use crate::acb::*;
use crate::acb_calc::*;
use crate::acb_dft::*;
use crate::acb_dirichlet::*;
use crate::acb_elliptic::*;
use crate::acb_hypgeom::*;
use crate::acb_mat::*;
use crate::acb_modular::*;
use crate::acb_poly::*;
use crate::acb_theta::*;
use crate::acb_types::*;
use crate::acf_types::*;
use crate::aprcl::*;
use crate::arb::*;
use crate::arb_calc::*;
use crate::arb_fmpz_poly::*;
use crate::arb_fpwrap::*;
use crate::arb_hypgeom::*;
use crate::arb_mat::*;
use crate::arb_poly::*;
use crate::arb_types::*;
use crate::arf::*;
use crate::arf_types::*;
use crate::arith::*;
use crate::bernoulli::*;
use crate::bool_mat::*;
use crate::ca::*;
use crate::ca_ext::*;
use crate::ca_field::*;
use crate::ca_mat::*;
use crate::ca_poly::*;
use crate::ca_vec::*;
use crate::calcium::*;
use crate::d_mat::*;
use crate::d_vec::*;
use crate::dirichlet::*;
use crate::dlog::*;
use crate::double_extras::*;
use crate::double_interval::*;
use crate::fexpr::*;
use crate::fexpr_builtin::*;
use crate::fft::*;
use crate::fft_tuning::*;
use crate::flint_config::*;
use crate::flint::*;
use crate::fmpq::*;
use crate::fmpq_mat::*;
use crate::fmpq_mpoly::*;
use crate::fmpq_mpoly_factor::*;
use crate::fmpq_poly::*;
use crate::fmpq_types::*;
use crate::fmpq_vec::*;
use crate::fmpz::*;
use crate::fmpz_extras::*;
use crate::fmpz_factor::*;
use crate::fmpz_lll::*;
use crate::fmpz_mat::*;
use crate::fmpz_mod::*;
use crate::fmpz_mod_mat::*;
use crate::fmpz_mod_mpoly::*;
use crate::fmpz_mod_mpoly_factor::*;
use crate::fmpz_mod_poly::*;
use crate::fmpz_mod_poly_factor::*;
use crate::fmpz_mod_types::*;
use crate::fmpz_mod_vec::*;
use crate::fmpz_mpoly::*;
use crate::fmpz_mpoly_factor::*;
use crate::fmpz_mpoly_q::*;
use crate::fmpz_poly::*;
use crate::fmpz_poly_factor::*;
use crate::fmpz_poly_mat::*;
use crate::fmpz_poly_q::*;
use crate::fmpz_types::*;
use crate::fmpz_vec::*;
use crate::fmpzi::*;
use crate::fq::*;
use crate::fq_default::*;
use crate::fq_default_mat::*;
use crate::fq_default_poly::*;
use crate::fq_default_poly_factor::*;
use crate::fq_embed::*;
use crate::fq_embed_templates::*;
use crate::fq_mat::*;
use crate::fq_mat_templates::*;
use crate::fq_nmod::*;
use crate::fq_nmod_embed::*;
use crate::fq_nmod_mat::*;
use crate::fq_nmod_mpoly::*;
use crate::fq_nmod_mpoly_factor::*;
use crate::fq_nmod_poly::*;
use crate::fq_nmod_poly_factor::*;
use crate::fq_nmod_types::*;
use crate::fq_nmod_vec::*;
use crate::fq_poly::*;
use crate::fq_poly_factor::*;
use crate::fq_poly_factor_templates::*;
use crate::fq_poly_templates::*;
use crate::fq_templates::*;
use crate::fq_types::*;
use crate::fq_vec::*;
use crate::fq_vec_templates::*;
use crate::fq_zech::*;
use crate::fq_zech_embed::*;
use crate::fq_zech_mat::*;
use crate::fq_zech_mpoly::*;
use crate::fq_zech_mpoly_factor::*;
use crate::fq_zech_poly::*;
use crate::fq_zech_poly_factor::*;
use crate::fq_zech_types::*;
use crate::fq_zech_vec::*;
use crate::gmpcompat::*;
use crate::gr::*;
use crate::gr_generic::*;
use crate::gr_mat::*;
use crate::gr_mpoly::*;
use crate::gr_poly::*;
use crate::gr_special::*;
use crate::gr_vec::*;
use crate::hypgeom::*;
use crate::limb_types::*;
use crate::long_extras::*;
use crate::longlong::*;
use crate::mag::*;
use crate::mpf_impl::*;
use crate::mpfr_mat::*;
use crate::mpfr_vec::*;
use crate::mpoly::*;
use crate::mpoly_types::*;
use crate::n_poly::*;
use crate::n_poly_types::*;
use crate::nf::*;
use crate::nf_elem::*;
use crate::nmod::*;
use crate::nmod_mat::*;
use crate::nmod_mpoly::*;
use crate::nmod_mpoly_factor::*;
use crate::nmod_poly::*;
use crate::nmod_poly_factor::*;
use crate::nmod_poly_mat::*;
use crate::nmod_types::*;
use crate::nmod_vec::*;
use crate::padic::*;
use crate::padic_mat::*;
use crate::padic_poly::*;
use crate::padic_types::*;
use crate::partitions::*;
use crate::perm::*;
use crate::qadic::*;
use crate::qfb::*;
use crate::qqbar::*;
use crate::qsieve::*;
use crate::templates::*;
use crate::thread_pool::*;
use crate::thread_support::*;
use crate::ulong_extras::*;


extern "C" {
    #[link_name = "acf_init__extern"]
    pub fn acf_init(x: *mut acf_struct);
    #[link_name = "acf_clear__extern"]
    pub fn acf_clear(x: *mut acf_struct);
    #[link_name = "_acf_vec_init__extern"]
    pub fn _acf_vec_init(n: mp_limb_signed_t) -> acf_ptr;
    #[link_name = "_acf_vec_clear__extern"]
    pub fn _acf_vec_clear(v: acf_ptr, n: mp_limb_signed_t);
    #[link_name = "acf_real_ptr__extern"]
    pub fn acf_real_ptr(z: *mut acf_struct) -> arf_ptr;
    #[link_name = "acf_imag_ptr__extern"]
    pub fn acf_imag_ptr(z: *mut acf_struct) -> arf_ptr;
    #[link_name = "acf_set__extern"]
    pub fn acf_set(z: *mut acf_struct, x: *const acf_struct);
    #[link_name = "acf_swap__extern"]
    pub fn acf_swap(z: *mut acf_struct, x: *mut acf_struct);
    #[link_name = "acf_equal__extern"]
    pub fn acf_equal(x: *const acf_struct, y: *const acf_struct) -> libc::c_int;
    #[link_name = "acf_printd__extern"]
    pub fn acf_printd(x: *const acf_struct, n: mp_limb_signed_t);
    #[link_name = "acf_bits__extern"]
    pub fn acf_bits(x: *const acf_struct) -> mp_limb_signed_t;
    #[link_name = "acf_allocated_bytes__extern"]
    pub fn acf_allocated_bytes(x: *const acf_struct) -> mp_limb_signed_t;
    #[link_name = "acf_randtest__extern"]
    pub fn acf_randtest(
        x: *mut acf_struct,
        state: *mut flint_rand_s,
        bits: mp_limb_signed_t,
        mag_bits: mp_limb_signed_t,
    );
    #[link_name = "acf_get_mag__extern"]
    pub fn acf_get_mag(res: *mut mag_struct, x: *const acf_struct);
    #[link_name = "acf_neg__extern"]
    pub fn acf_neg(z: *mut acf_struct, x: *const acf_struct);
    #[link_name = "acf_set_round__extern"]
    pub fn acf_set_round(
        res: *mut acf_struct,
        x: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    ) -> libc::c_int;
    #[link_name = "acf_neg_round__extern"]
    pub fn acf_neg_round(
        res: *mut acf_struct,
        x: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    ) -> libc::c_int;
    #[link_name = "acf_add__extern"]
    pub fn acf_add(
        res: *mut acf_struct,
        x: *const acf_struct,
        y: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    ) -> libc::c_int;
    #[link_name = "acf_sub__extern"]
    pub fn acf_sub(
        res: *mut acf_struct,
        x: *const acf_struct,
        y: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    ) -> libc::c_int;
    #[link_name = "acf_mul__extern"]
    pub fn acf_mul(
        res: *mut acf_struct,
        x: *const acf_struct,
        y: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    ) -> libc::c_int;
    pub fn acf_approx_inv(
        res: *mut acf_struct,
        x: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    );
    pub fn acf_approx_div(
        res: *mut acf_struct,
        x: *const acf_struct,
        y: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    );
    pub fn acf_approx_sqrt(
        res: *mut acf_struct,
        x: *const acf_struct,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    );
    pub fn acf_approx_dot(
        res: *mut acf_struct,
        initial: *const acf_struct,
        subtract: libc::c_int,
        x: acf_srcptr,
        xstep: mp_limb_signed_t,
        y: acf_srcptr,
        ystep: mp_limb_signed_t,
        len: mp_limb_signed_t,
        prec: mp_limb_signed_t,
        rnd: arf_rnd_t,
    );
}
