/* automatically generated by rust-bindgen 0.70.1 */

use libc::*;
use crate::deps::*;
use crate::flint::*;
use crate::fmpz_types::*;
use crate::fq_nmod_types::*;
use crate::fq_zech_types::*;
use crate::mpoly_types::*;
use crate::nmod_types::*;


#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_zech_mpoly_ctx_struct {
    pub minfo: mpoly_ctx_t,
    pub fqctx: fq_zech_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_zech_mpoly_ctx_struct"]
        [::std::mem::size_of::<fq_zech_mpoly_ctx_struct>() - 696usize];
    ["Alignment of fq_zech_mpoly_ctx_struct"]
        [::std::mem::align_of::<fq_zech_mpoly_ctx_struct>() - 8usize];
    ["Offset of field: fq_zech_mpoly_ctx_struct::minfo"]
        [::std::mem::offset_of!(fq_zech_mpoly_ctx_struct, minfo) - 0usize];
    ["Offset of field: fq_zech_mpoly_ctx_struct::fqctx"]
        [::std::mem::offset_of!(fq_zech_mpoly_ctx_struct, fqctx) - 608usize];
};
impl Default for fq_zech_mpoly_ctx_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_zech_mpoly_ctx_t = [fq_zech_mpoly_ctx_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_zech_mpoly_struct {
    pub coeffs: *mut fq_zech_struct,
    pub exps: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_zech_mpoly_struct"][::std::mem::size_of::<fq_zech_mpoly_struct>() - 40usize];
    ["Alignment of fq_zech_mpoly_struct"][::std::mem::align_of::<fq_zech_mpoly_struct>() - 8usize];
    ["Offset of field: fq_zech_mpoly_struct::coeffs"]
        [::std::mem::offset_of!(fq_zech_mpoly_struct, coeffs) - 0usize];
    ["Offset of field: fq_zech_mpoly_struct::exps"]
        [::std::mem::offset_of!(fq_zech_mpoly_struct, exps) - 8usize];
    ["Offset of field: fq_zech_mpoly_struct::alloc"]
        [::std::mem::offset_of!(fq_zech_mpoly_struct, alloc) - 16usize];
    ["Offset of field: fq_zech_mpoly_struct::length"]
        [::std::mem::offset_of!(fq_zech_mpoly_struct, length) - 24usize];
    ["Offset of field: fq_zech_mpoly_struct::bits"]
        [::std::mem::offset_of!(fq_zech_mpoly_struct, bits) - 32usize];
};
impl Default for fq_zech_mpoly_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_zech_mpoly_t = [fq_zech_mpoly_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_zech_mpoly_univar_struct {
    pub coeffs: *mut fq_zech_mpoly_struct,
    pub exps: *mut fmpz,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_zech_mpoly_univar_struct"]
        [::std::mem::size_of::<fq_zech_mpoly_univar_struct>() - 32usize];
    ["Alignment of fq_zech_mpoly_univar_struct"]
        [::std::mem::align_of::<fq_zech_mpoly_univar_struct>() - 8usize];
    ["Offset of field: fq_zech_mpoly_univar_struct::coeffs"]
        [::std::mem::offset_of!(fq_zech_mpoly_univar_struct, coeffs) - 0usize];
    ["Offset of field: fq_zech_mpoly_univar_struct::exps"]
        [::std::mem::offset_of!(fq_zech_mpoly_univar_struct, exps) - 8usize];
    ["Offset of field: fq_zech_mpoly_univar_struct::alloc"]
        [::std::mem::offset_of!(fq_zech_mpoly_univar_struct, alloc) - 16usize];
    ["Offset of field: fq_zech_mpoly_univar_struct::length"]
        [::std::mem::offset_of!(fq_zech_mpoly_univar_struct, length) - 24usize];
};
impl Default for fq_zech_mpoly_univar_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_zech_mpoly_univar_t = [fq_zech_mpoly_univar_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_zech_mpolyu_struct {
    pub coeffs: *mut fq_zech_mpoly_struct,
    pub exps: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_zech_mpolyu_struct"][::std::mem::size_of::<fq_zech_mpolyu_struct>() - 40usize];
    ["Alignment of fq_zech_mpolyu_struct"]
        [::std::mem::align_of::<fq_zech_mpolyu_struct>() - 8usize];
    ["Offset of field: fq_zech_mpolyu_struct::coeffs"]
        [::std::mem::offset_of!(fq_zech_mpolyu_struct, coeffs) - 0usize];
    ["Offset of field: fq_zech_mpolyu_struct::exps"]
        [::std::mem::offset_of!(fq_zech_mpolyu_struct, exps) - 8usize];
    ["Offset of field: fq_zech_mpolyu_struct::alloc"]
        [::std::mem::offset_of!(fq_zech_mpolyu_struct, alloc) - 16usize];
    ["Offset of field: fq_zech_mpolyu_struct::length"]
        [::std::mem::offset_of!(fq_zech_mpolyu_struct, length) - 24usize];
    ["Offset of field: fq_zech_mpolyu_struct::bits"]
        [::std::mem::offset_of!(fq_zech_mpolyu_struct, bits) - 32usize];
};
impl Default for fq_zech_mpolyu_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_zech_mpolyu_t = [fq_zech_mpolyu_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_zech_mpolyn_struct {
    pub coeffs: *mut fq_zech_poly_struct,
    pub exps: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_zech_mpolyn_struct"][::std::mem::size_of::<fq_zech_mpolyn_struct>() - 40usize];
    ["Alignment of fq_zech_mpolyn_struct"]
        [::std::mem::align_of::<fq_zech_mpolyn_struct>() - 8usize];
    ["Offset of field: fq_zech_mpolyn_struct::coeffs"]
        [::std::mem::offset_of!(fq_zech_mpolyn_struct, coeffs) - 0usize];
    ["Offset of field: fq_zech_mpolyn_struct::exps"]
        [::std::mem::offset_of!(fq_zech_mpolyn_struct, exps) - 8usize];
    ["Offset of field: fq_zech_mpolyn_struct::alloc"]
        [::std::mem::offset_of!(fq_zech_mpolyn_struct, alloc) - 16usize];
    ["Offset of field: fq_zech_mpolyn_struct::length"]
        [::std::mem::offset_of!(fq_zech_mpolyn_struct, length) - 24usize];
    ["Offset of field: fq_zech_mpolyn_struct::bits"]
        [::std::mem::offset_of!(fq_zech_mpolyn_struct, bits) - 32usize];
};
impl Default for fq_zech_mpolyn_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_zech_mpolyn_t = [fq_zech_mpolyn_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_zech_mpolyun_struct {
    pub coeffs: *mut fq_zech_mpolyn_struct,
    pub exps: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub length: mp_limb_signed_t,
    pub bits: mp_limb_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_zech_mpolyun_struct"][::std::mem::size_of::<fq_zech_mpolyun_struct>() - 40usize];
    ["Alignment of fq_zech_mpolyun_struct"]
        [::std::mem::align_of::<fq_zech_mpolyun_struct>() - 8usize];
    ["Offset of field: fq_zech_mpolyun_struct::coeffs"]
        [::std::mem::offset_of!(fq_zech_mpolyun_struct, coeffs) - 0usize];
    ["Offset of field: fq_zech_mpolyun_struct::exps"]
        [::std::mem::offset_of!(fq_zech_mpolyun_struct, exps) - 8usize];
    ["Offset of field: fq_zech_mpolyun_struct::alloc"]
        [::std::mem::offset_of!(fq_zech_mpolyun_struct, alloc) - 16usize];
    ["Offset of field: fq_zech_mpolyun_struct::length"]
        [::std::mem::offset_of!(fq_zech_mpolyun_struct, length) - 24usize];
    ["Offset of field: fq_zech_mpolyun_struct::bits"]
        [::std::mem::offset_of!(fq_zech_mpolyun_struct, bits) - 32usize];
};
impl Default for fq_zech_mpolyun_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_zech_mpolyun_t = [fq_zech_mpolyun_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fq_zech_mpoly_geobucket {
    pub polys: [fq_zech_mpoly_struct; 32usize],
    pub length: mp_limb_signed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fq_zech_mpoly_geobucket"]
        [::std::mem::size_of::<fq_zech_mpoly_geobucket>() - 1288usize];
    ["Alignment of fq_zech_mpoly_geobucket"]
        [::std::mem::align_of::<fq_zech_mpoly_geobucket>() - 8usize];
    ["Offset of field: fq_zech_mpoly_geobucket::polys"]
        [::std::mem::offset_of!(fq_zech_mpoly_geobucket, polys) - 0usize];
    ["Offset of field: fq_zech_mpoly_geobucket::length"]
        [::std::mem::offset_of!(fq_zech_mpoly_geobucket, length) - 1280usize];
};
impl Default for fq_zech_mpoly_geobucket {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fq_zech_mpoly_geobucket_struct = fq_zech_mpoly_geobucket;
pub type fq_zech_mpoly_geobucket_t = [fq_zech_mpoly_geobucket_struct; 1usize];
extern "C" {
    #[link_name = "fq_zech_ctx_mod__extern"]
    pub fn fq_zech_ctx_mod(ctx: *const fq_zech_ctx_struct) -> nmod_t;
    pub fn fq_zech_mpoly_ctx_init_deg(
        ctx: *mut fq_zech_mpoly_ctx_struct,
        nvars: mp_limb_signed_t,
        ord: ordering_t,
        p: mp_limb_t,
        deg: mp_limb_signed_t,
    );
    pub fn fq_zech_mpoly_ctx_clear(ctx: *mut fq_zech_mpoly_ctx_struct);
    #[link_name = "fq_zech_mpoly_ctx_nvars__extern"]
    pub fn fq_zech_mpoly_ctx_nvars(ctx: *const fq_zech_mpoly_ctx_struct) -> mp_limb_signed_t;
    #[link_name = "fq_zech_mpoly_ctx_ord__extern"]
    pub fn fq_zech_mpoly_ctx_ord(ctx: *const fq_zech_mpoly_ctx_struct) -> ordering_t;
    pub fn fq_zech_mpoly_init(A: *mut fq_zech_mpoly_struct, ctx: *const fq_zech_mpoly_ctx_struct);
    pub fn fq_zech_mpoly_init2(
        A: *mut fq_zech_mpoly_struct,
        alloc: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_init3(
        A: *mut fq_zech_mpoly_struct,
        alloc: mp_limb_signed_t,
        bits: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_realloc(
        A: *mut fq_zech_mpoly_struct,
        alloc: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_fit_length(
        A: *mut fq_zech_mpoly_struct,
        length: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_fit_length(
        coeff: *mut *mut fq_zech_struct,
        exps: *mut *mut mp_limb_t,
        alloc: *mut mp_limb_signed_t,
        len: mp_limb_signed_t,
        N: mp_limb_signed_t,
        fqctx: *const fq_zech_ctx_struct,
    );
    pub fn fq_zech_mpoly_fit_length_reset_bits(
        A: *mut fq_zech_mpoly_struct,
        len: mp_limb_signed_t,
        bits: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_clear(A: *mut fq_zech_mpoly_struct, ctx: *const fq_zech_mpoly_ctx_struct);
    #[link_name = "_fq_zech_mpoly_set_length__extern"]
    pub fn _fq_zech_mpoly_set_length(
        A: *mut fq_zech_mpoly_struct,
        newlen: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    #[link_name = "fq_zech_mpoly_truncate__extern"]
    pub fn fq_zech_mpoly_truncate(
        A: *mut fq_zech_mpoly_struct,
        newlen: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_fit_bits(
        A: *mut fq_zech_mpoly_struct,
        bits: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_str_pretty(
        A: *mut fq_zech_mpoly_struct,
        str_: *const libc::c_char,
        x: *mut *const libc::c_char,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_get_str_pretty(
        A: *const fq_zech_mpoly_struct,
        x: *mut *const libc::c_char,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> *mut libc::c_char;
    pub fn fq_zech_mpoly_fprint_pretty(
        file: *mut FILE,
        A: *const fq_zech_mpoly_struct,
        x: *mut *const libc::c_char,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_print_pretty(
        A: *const fq_zech_mpoly_struct,
        x: *mut *const libc::c_char,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_gen(
        A: *mut fq_zech_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_is_gen(
        A: *const fq_zech_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_set(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_equal(
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fq_zech_mpoly_swap__extern"]
    pub fn fq_zech_mpoly_swap(
        A: *mut fq_zech_mpoly_struct,
        B: *mut fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_is_fq_zech(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_get_fq_zech(
        c: *mut fq_zech_struct,
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_fq_zech(
        A: *mut fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_ui(
        A: *mut fq_zech_mpoly_struct,
        c: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_fq_zech_gen(
        A: *mut fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_equal_fq_zech(
        A: *const fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fq_zech_mpoly_zero__extern"]
    pub fn fq_zech_mpoly_zero(A: *mut fq_zech_mpoly_struct, ctx: *const fq_zech_mpoly_ctx_struct);
    #[link_name = "fq_zech_mpoly_one__extern"]
    pub fn fq_zech_mpoly_one(A: *mut fq_zech_mpoly_struct, ctx: *const fq_zech_mpoly_ctx_struct);
    #[link_name = "fq_zech_mpoly_is_zero__extern"]
    pub fn fq_zech_mpoly_is_zero(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_is_one(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_degrees_fit_si(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_degrees_fmpz(
        degs: *mut *mut fmpz,
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_degrees_si(
        degs: *mut mp_limb_signed_t,
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_degree_fmpz(
        deg: *mut fmpz,
        A: *const fq_zech_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_degree_si(
        A: *const fq_zech_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fq_zech_mpoly_total_degree_fits_si(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_total_degree_fmpz(
        td: *mut fmpz,
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_total_degree_si(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fq_zech_mpoly_get_coeff_fq_zech_monomial(
        c: *mut fq_zech_struct,
        A: *const fq_zech_mpoly_struct,
        M: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_coeff_fq_zech_monomial(
        A: *mut fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        M: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_coeff_fq_zech_fmpz(
        c: *mut fq_zech_struct,
        A: *const fq_zech_mpoly_struct,
        exp: *const *mut fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_coeff_fq_zech_ui(
        c: *mut fq_zech_struct,
        A: *const fq_zech_mpoly_struct,
        exp: *const mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_set_coeff_fq_zech_fmpz(
        A: *mut fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        exp: *const fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_coeff_fq_zech_fmpz(
        A: *mut fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        exp: *const *mut fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_coeff_fq_zech_ui(
        A: *mut fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        exp: *const mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_coeff_vars_ui(
        C: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        vars: *const mp_limb_signed_t,
        exps: *const mp_limb_t,
        length: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    #[link_name = "fq_zech_mpoly_leadcoeff__extern"]
    pub fn fq_zech_mpoly_leadcoeff(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> *mut fq_zech_struct;
    pub fn fq_zech_mpoly_cmp(
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_is_canonical(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fq_zech_mpoly_length__extern"]
    pub fn fq_zech_mpoly_length(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fq_zech_mpoly_resize(
        A: *mut fq_zech_mpoly_struct,
        new_length: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_term_coeff_fq_zech(
        c: *mut fq_zech_struct,
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_term_coeff_fq_zech(
        A: *mut fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        c: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_term_exp_fits_ui(
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_term_exp_fits_si(
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_get_term_exp_fmpz(
        exp: *mut *mut fmpz,
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_term_exp_ui(
        exp: *mut mp_limb_t,
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_term_exp_si(
        exp: *mut mp_limb_signed_t,
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_term_var_exp_ui(
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> mp_limb_t;
    pub fn fq_zech_mpoly_get_term_var_exp_si(
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fq_zech_mpoly_set_term_exp_fmpz(
        A: *mut fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        exp: *const *mut fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_set_term_exp_ui(
        A: *mut fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        exp: *const mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_term(
        M: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_get_term_monomial(
        M: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_push_term_fq_zech_fmpz(
        A: *mut fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        exp: *const *mut fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_push_term_fq_zech_ui(
        A: *mut fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        exp: *const mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_sort_terms(
        A: *mut fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_combine_like_terms(
        A: *mut fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_reverse(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_assert_canonical(
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_radix_sort1(
        A: *mut fq_zech_mpoly_struct,
        left: mp_limb_signed_t,
        right: mp_limb_signed_t,
        pos: mp_limb_t,
        cmpmask: mp_limb_t,
        totalmask: mp_limb_t,
    );
    pub fn _fq_zech_mpoly_radix_sort(
        A: *mut fq_zech_mpoly_struct,
        left: mp_limb_signed_t,
        right: mp_limb_signed_t,
        pos: mp_limb_t,
        N: mp_limb_signed_t,
        cmpmask: *mut mp_limb_t,
    );
    pub fn _fq_zech_mpoly_push_exp_ffmpz(
        A: *mut fq_zech_mpoly_struct,
        exp: *const fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_push_exp_pfmpz(
        A: *mut fq_zech_mpoly_struct,
        exp: *const *mut fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_push_exp_ui(
        A: *mut fq_zech_mpoly_struct,
        exp: *const mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_randtest_bound(
        A: *mut fq_zech_mpoly_struct,
        state: *mut flint_rand_s,
        length: mp_limb_signed_t,
        exp_bound: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_randtest_bounds(
        A: *mut fq_zech_mpoly_struct,
        state: *mut flint_rand_s,
        length: mp_limb_signed_t,
        exp_bounds: *mut mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_randtest_bits(
        A: *mut fq_zech_mpoly_struct,
        state: *mut flint_rand_s,
        length: mp_limb_signed_t,
        exp_bits: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_add(
        coeff1: *mut fq_zech_struct,
        exp1: *mut mp_limb_t,
        coeff2: *mut fq_zech_struct,
        exp2: *const mp_limb_t,
        len2: mp_limb_signed_t,
        coeff3: *mut fq_zech_struct,
        exp3: *const mp_limb_t,
        len3: mp_limb_signed_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
        fqctx: *const fq_zech_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fq_zech_mpoly_add_fq_zech(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_sub_fq_zech(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_add(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_sub(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_neg(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_scalar_mul_fq_zech(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        c: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_make_monic(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_scalar_addmul_fq_zech(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const fq_zech_mpoly_struct,
        d: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_derivative(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_evaluate_one_fq_zech(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        var: mp_limb_signed_t,
        val: *const fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_eval_all_fq_zech(
        eval: *mut fq_zech_struct,
        Acoeffs: *const fq_zech_struct,
        Aexps: *const mp_limb_t,
        Alen: mp_limb_signed_t,
        Abits: mp_limb_t,
        alphas: *const *mut fq_zech_struct,
        mctx: *const mpoly_ctx_struct,
        fqctx: *const fq_zech_ctx_struct,
    );
    pub fn fq_zech_mpoly_evaluate_all_fq_zech(
        ev: *mut fq_zech_struct,
        A: *const fq_zech_mpoly_struct,
        vals: *const *mut fq_zech_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_compose_fq_zech_poly(
        A: *mut fq_zech_poly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const *mut fq_zech_poly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn _fq_zech_mpoly_compose_mat(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        M: *const fmpz_mat_struct,
        ctxB: *const fq_zech_mpoly_ctx_struct,
        ctxAC: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_compose_fq_zech_mpoly_geobucket(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const *mut fq_zech_mpoly_struct,
        ctxB: *const fq_zech_mpoly_ctx_struct,
        ctxAC: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_compose_fq_zech_mpoly_horner(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const *mut fq_zech_mpoly_struct,
        ctxB: *const fq_zech_mpoly_ctx_struct,
        ctxAC: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_compose_fq_zech_mpoly(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const *mut fq_zech_mpoly_struct,
        ctxB: *const fq_zech_mpoly_ctx_struct,
        ctxAC: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_compose_fq_zech_mpoly_gen(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        c: *const mp_limb_signed_t,
        ctxB: *const fq_zech_mpoly_ctx_struct,
        ctxAC: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_mul(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        C: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_mul_johnson(
        poly1: *mut fq_zech_mpoly_struct,
        poly2: *const fq_zech_mpoly_struct,
        poly3: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_mul_johnson(
        coeff1: *mut *mut fq_zech_struct,
        exp1: *mut *mut mp_limb_t,
        alloc: *mut mp_limb_signed_t,
        coeff2: *const fq_zech_struct,
        exp2: *const mp_limb_t,
        len2: mp_limb_signed_t,
        coeff3: *const fq_zech_struct,
        exp3: *const mp_limb_t,
        len3: mp_limb_signed_t,
        bits: mp_limb_t,
        N: mp_limb_signed_t,
        cmpmask: *const mp_limb_t,
        fqctx: *const fq_zech_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fq_zech_mpoly_pow_fmpz(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        k: *const fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_pow_ui(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        k: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_divides(
        Q: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_div(
        Q: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_divrem(
        Q: *mut fq_zech_mpoly_struct,
        R: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_divrem_ideal(
        Q: *mut *mut fq_zech_mpoly_struct,
        R: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const *mut fq_zech_mpoly_struct,
        len: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_divides_monagan_pearce(
        poly1: *mut fq_zech_mpoly_struct,
        poly2: *const fq_zech_mpoly_struct,
        poly3: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_div_monagan_pearce(
        q: *mut fq_zech_mpoly_struct,
        poly2: *const fq_zech_mpoly_struct,
        poly3: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_divrem_monagan_pearce(
        q: *mut fq_zech_mpoly_struct,
        r: *mut fq_zech_mpoly_struct,
        poly2: *const fq_zech_mpoly_struct,
        poly3: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_divrem_ideal_monagan_pearce(
        q: *mut *mut fq_zech_mpoly_struct,
        r: *mut fq_zech_mpoly_struct,
        poly2: *const fq_zech_mpoly_struct,
        poly3: *const *mut fq_zech_mpoly_struct,
        len: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_gcd(
        G: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn _fq_zech_mpoly_gcd(
        G: *mut fq_zech_mpoly_struct,
        Gbits: mp_limb_t,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_gcd_cofactors(
        G: *mut fq_zech_mpoly_struct,
        Abar: *mut fq_zech_mpoly_struct,
        Bbar: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn _fq_zech_mpoly_gcd_cofactors(
        G: *mut fq_zech_mpoly_struct,
        Gbits: mp_limb_t,
        Abar: *mut fq_zech_mpoly_struct,
        Abarbits: mp_limb_t,
        Bbar: *mut fq_zech_mpoly_struct,
        Bbarbits: mp_limb_t,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_gcd_brown(
        G: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_gcd_zippel(
        G: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_deflation(
        shift: *mut fmpz,
        stride: *mut fmpz,
        A: *const fq_zech_mpoly_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_deflate(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        shift: *const fmpz,
        stride: *const fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_inflate(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        shift: *const fmpz,
        stride: *const fmpz,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_univar_init(
        A: *mut fq_zech_mpoly_univar_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_univar_clear(
        A: *mut fq_zech_mpoly_univar_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_univar_fit_length(
        A: *mut fq_zech_mpoly_univar_struct,
        length: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_univar_print_pretty(
        A: *const fq_zech_mpoly_univar_struct,
        x: *mut *const libc::c_char,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_univar_assert_canonical(
        A: *mut fq_zech_mpoly_univar_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_to_univar(
        A: *mut fq_zech_mpoly_univar_struct,
        B: *const fq_zech_mpoly_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_from_univar_bits(
        A: *mut fq_zech_mpoly_struct,
        Abits: mp_limb_t,
        B: *const fq_zech_mpoly_univar_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_from_univar(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_univar_struct,
        var: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    #[link_name = "fq_zech_mpoly_univar_swap__extern"]
    pub fn fq_zech_mpoly_univar_swap(
        A: *mut fq_zech_mpoly_univar_struct,
        B: *mut fq_zech_mpoly_univar_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_univar_degree_fits_si(
        A: *const fq_zech_mpoly_univar_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    #[link_name = "fq_zech_mpoly_univar_length__extern"]
    pub fn fq_zech_mpoly_univar_length(
        A: *const fq_zech_mpoly_univar_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    pub fn fq_zech_mpoly_univar_get_term_exp_si(
        A: *mut fq_zech_mpoly_univar_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> mp_limb_signed_t;
    #[link_name = "fq_zech_mpoly_univar_get_term_coeff__extern"]
    pub fn fq_zech_mpoly_univar_get_term_coeff(
        c: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_univar_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    #[link_name = "fq_zech_mpoly_univar_swap_term_coeff__extern"]
    pub fn fq_zech_mpoly_univar_swap_term_coeff(
        c: *mut fq_zech_mpoly_struct,
        A: *mut fq_zech_mpoly_univar_struct,
        i: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    #[doc = "Internal functions (guaranteed to change without notice)"]
    pub fn _fq_zech_mpoly_get_nmod_mpoly(
        s: *mut nmod_mpoly_struct,
        sctx: *const nmod_mpoly_ctx_struct,
        t: *const fq_zech_mpoly_struct,
        tctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn _fq_zech_mpoly_set_nmod_mpoly(
        A: *mut fq_zech_mpoly_struct,
        Actx: *const fq_zech_mpoly_ctx_struct,
        B: *const nmod_mpoly_struct,
        Bctx: *const nmod_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpolyl_lead_coeff(
        c: *mut fq_zech_mpoly_struct,
        A: *const fq_zech_mpoly_struct,
        num_vars: mp_limb_signed_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_pow_rmul(
        A: *mut fq_zech_mpoly_struct,
        B: *const fq_zech_mpoly_struct,
        k: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpoly_repack_bits_inplace(
        A: *mut fq_zech_mpoly_struct,
        Abits: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpoly_ctx_change_modulus(
        ctx: *mut fq_zech_mpoly_ctx_struct,
        deg: mp_limb_signed_t,
    );
    pub fn _fq_zech_mpoly_get_fq_nmod_mpoly(
        A: *mut fq_nmod_mpoly_struct,
        ctxA: *const fq_nmod_mpoly_ctx_struct,
        B: *const fq_zech_mpoly_struct,
        ctxB: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn _fq_zech_mpoly_set_fq_nmod_mpoly(
        A: *mut fq_zech_mpoly_struct,
        ctxA: *const fq_zech_mpoly_ctx_struct,
        B: *const fq_nmod_mpoly_struct,
        ctxB: *const fq_nmod_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpolyu_is_canonical(
        poly: *const fq_zech_mpolyu_struct,
        ctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpolyu_init(
        A: *mut fq_zech_mpolyu_struct,
        bits: mp_limb_t,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpolyu_clear(
        A: *mut fq_zech_mpolyu_struct,
        uctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpolyu_swap(A: *mut fq_zech_mpolyu_struct, B: *mut fq_zech_mpolyu_struct);
    pub fn fq_zech_mpolyu_zero(
        A: *mut fq_zech_mpolyu_struct,
        uctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpolyu_is_one(
        A: *mut fq_zech_mpolyu_struct,
        uctx: *const fq_zech_mpoly_ctx_struct,
    ) -> libc::c_int;
    pub fn fq_zech_mpolyu_print_pretty(
        poly: *const fq_zech_mpolyu_struct,
        x: *mut *const libc::c_char,
        ctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpolyu_fit_length(
        A: *mut fq_zech_mpolyu_struct,
        length: mp_limb_signed_t,
        uctx: *const fq_zech_mpoly_ctx_struct,
    );
    pub fn fq_zech_mpolyu_one(A: *mut fq_zech_mpolyu_struct, uctx: *const fq_zech_mpoly_ctx_struct);
}
